{"version":3,"sources":["../src/StatusHandler.js"],"names":["flatten","jobStatusHandler","pushStatusHandler","PUSH_STATUS_COLLECTION","JOB_STATUS_COLLECTION","incrementOp","object","key","amount","__op","array","flattened","i","length","Array","isArray","concat","push","statusHandler","className","database","lastPromise","Promise","resolve","create","then","update","where","Object","freeze","restStatusHandler","config","auth","Auth","master","rest","response","assign","objectId","jobStatus","objectIdSize","handler","setRunning","jobName","params","now","Date","status","source","createdAt","ACL","setMessage","message","setSucceeded","setFinalStatus","setFailed","undefined","finishedAt","existingObjectId","pushStatus","setInitial","body","options","pushTime","toISOString","hasOwnProperty","hasPushScheduledSupport","push_time","logger","warn","data","payloadString","JSON","stringify","pushHash","alert","query","payload","title","expiry","expiration_time","expiration_interval","numSent","result","batches","verbose","count","trackSent","results","UTCOffset","cleanupInstallations","process","env","PARSE_SERVER_CLEANUP_INVALID_INSTALLATIONS","numFailed","devicesToRemove","reduce","memo","device","deviceType","transmitted","offsetKey","error","deviceToken","token","forEach","info","acl","many","res","complete","fail","err","errorMessage","rval","defineProperty","get"],"mappings":";;;;;QAiBgBA,O,GAAAA,O;QAqEAC,gB,GAAAA,gB;QAqDAC,iB,GAAAA,iB;;AA3IhB;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAMC,yBAAyB,aAA/B;AACA,MAAMC,wBAAwB,YAA9B;;AAEA,MAAMC,cAAc,UAASC,SAAS,EAAlB,EAAsBC,GAAtB,EAA2BC,SAAS,CAApC,EAAuC;AACzD,MAAI,CAACF,OAAOC,GAAP,CAAL,EAAkB;AAChBD,WAAOC,GAAP,IAAc,EAACE,MAAM,WAAP,EAAoBD,QAAQA,MAA5B,EAAd;AACD,GAFD,MAEO;AACLF,WAAOC,GAAP,EAAYC,MAAZ,IAAsBA,MAAtB;AACD;AACD,SAAOF,OAAOC,GAAP,CAAP;AACD,CAPD;;AASO,SAASP,OAAT,CAAiBU,KAAjB,EAAwB;AAC7B,MAAIC,YAAY,EAAhB;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIF,MAAMG,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,QAAGE,MAAMC,OAAN,CAAcL,MAAME,CAAN,CAAd,CAAH,EAA4B;AAC1BD,kBAAYA,UAAUK,MAAV,CAAiBhB,QAAQU,MAAME,CAAN,CAAR,CAAjB,CAAZ;AACD,KAFD,MAEO;AACLD,gBAAUM,IAAV,CAAeP,MAAME,CAAN,CAAf;AACD;AACF;AACD,SAAOD,SAAP;AACD;;AAED,SAASO,aAAT,CAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAIC,cAAcC,QAAQC,OAAR,EAAlB;;AAEA,WAASC,MAAT,CAAgBlB,MAAhB,EAAwB;AACtBe,kBAAcA,YAAYI,IAAZ,CAAiB,MAAM;AACnC,aAAOL,SAASI,MAAT,CAAgBL,SAAhB,EAA2Bb,MAA3B,EAAmCmB,IAAnC,CAAwC,MAAM;AACnD,eAAOH,QAAQC,OAAR,CAAgBjB,MAAhB,CAAP;AACD,OAFM,CAAP;AAGD,KAJa,CAAd;AAKA,WAAOe,WAAP;AACD;;AAED,WAASK,MAAT,CAAgBC,KAAhB,EAAuBrB,MAAvB,EAA+B;AAC7Be,kBAAcA,YAAYI,IAAZ,CAAiB,MAAM;AACnC,aAAOL,SAASM,MAAT,CAAgBP,SAAhB,EAA2BQ,KAA3B,EAAkCrB,MAAlC,CAAP;AACD,KAFa,CAAd;AAGA,WAAOe,WAAP;AACD;;AAED,SAAOO,OAAOC,MAAP,CAAc;AACnBL,UADmB;AAEnBE;AAFmB,GAAd,CAAP;AAID;;AAED,SAASI,iBAAT,CAA2BX,SAA3B,EAAsCY,MAAtC,EAA8C;AAC5C,MAAIV,cAAcC,QAAQC,OAAR,EAAlB;AACA,QAAMS,OAAOC,eAAKC,MAAL,CAAYH,MAAZ,CAAb;AACA,WAASP,MAAT,CAAgBlB,MAAhB,EAAwB;AACtBe,kBAAcA,YAAYI,IAAZ,CAAiB,MAAM;AACnC,aAAOU,eAAKX,MAAL,CAAYO,MAAZ,EAAoBC,IAApB,EAA0Bb,SAA1B,EAAqCb,MAArC,EACJmB,IADI,CACC,CAAC,EAAEW,QAAF,EAAD,KAAkB;AACtB;AACA,eAAOd,QAAQC,OAAR,CAAgBK,OAAOS,MAAP,CAAc,EAAd,EAAkB/B,MAAlB,EAA0B8B,QAA1B,CAAhB,CAAP;AACD,OAJI,CAAP;AAKD,KANa,CAAd;AAOA,WAAOf,WAAP;AACD;;AAED,WAASK,MAAT,CAAgBC,KAAhB,EAAuBrB,MAAvB,EAA+B;AAC7B;AACAe,kBAAcA,YAAYI,IAAZ,CAAiB,MAAM;AACnC,aAAOU,eAAKT,MAAL,CAAYK,MAAZ,EAAoBC,IAApB,EAA0Bb,SAA1B,EAAqC,EAAEmB,UAAUX,MAAMW,QAAlB,EAArC,EAAmEhC,MAAnE,EACJmB,IADI,CACC,CAAC,EAAEW,QAAF,EAAD,KAAkB;AACtB;AACA,eAAOd,QAAQC,OAAR,CAAgBK,OAAOS,MAAP,CAAc,EAAd,EAAkB/B,MAAlB,EAA0B8B,QAA1B,CAAhB,CAAP;AACD,OAJI,CAAP;AAKD,KANa,CAAd;AAOA,WAAOf,WAAP;AACD;;AAED,SAAOO,OAAOC,MAAP,CAAc;AACnBL,UADmB;AAEnBE;AAFmB,GAAd,CAAP;AAID;;AAEM,SAASzB,gBAAT,CAA0B8B,MAA1B,EAAkC;AACvC,MAAIQ,SAAJ;AACA,QAAMD,WAAW,8BAAYP,OAAOS,YAAnB,CAAjB;AACA,QAAMpB,WAAWW,OAAOX,QAAxB;AACA,QAAMqB,UAAUvB,cAAcd,qBAAd,EAAqCgB,QAArC,CAAhB;AACA,QAAMsB,aAAa,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAMC,MAAM,IAAIC,IAAJ,EAAZ;AACAP,gBAAY;AACVD,cADU;AAEVK,aAFU;AAGVC,YAHU;AAIVG,cAAQ,SAJE;AAKVC,cAAQ,KALE;AAMVC,iBAAWJ,GAND;AAOV;AACAK,WAAK;AARK,KAAZ;;AAWA,WAAOT,QAAQjB,MAAR,CAAee,SAAf,CAAP;AACD,GAdD;;AAgBA,QAAMY,aAAa,UAASC,OAAT,EAAkB;AACnC,QAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,aAAO9B,QAAQC,OAAR,EAAP;AACD;AACD,WAAOkB,QAAQf,MAAR,CAAe,EAAEY,QAAF,EAAf,EAA6B,EAAEc,OAAF,EAA7B,CAAP;AACD,GALD;;AAOA,QAAMC,eAAe,UAASD,OAAT,EAAkB;AACrC,WAAOE,eAAe,WAAf,EAA4BF,OAA5B,CAAP;AACD,GAFD;;AAIA,QAAMG,YAAY,UAASH,OAAT,EAAkB;AAClC,WAAOE,eAAe,QAAf,EAAyBF,OAAzB,CAAP;AACD,GAFD;;AAIA,QAAME,iBAAiB,UAASP,MAAT,EAAiBK,UAAUI,SAA3B,EAAsC;AAC3D,UAAMC,aAAa,IAAIX,IAAJ,EAAnB;AACA,UAAMpB,SAAS,EAAEqB,MAAF,EAAUU,UAAV,EAAf;AACA,QAAIL,WAAW,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;AAC1C1B,aAAO0B,OAAP,GAAiBA,OAAjB;AACD;AACD,WAAOX,QAAQf,MAAR,CAAe,EAAEY,QAAF,EAAf,EAA6BZ,MAA7B,CAAP;AACD,GAPD;;AASA,SAAOE,OAAOC,MAAP,CAAc;AACnBa,cADmB;AAEnBW,gBAFmB;AAGnBF,cAHmB;AAInBI;AAJmB,GAAd,CAAP;AAMD;;AAEM,SAASrD,iBAAT,CAA2B6B,MAA3B,EAAmC2B,gBAAnC,EAAqD;;AAE1D,MAAIC,UAAJ;AACA,QAAMvC,WAAWW,OAAOX,QAAxB;AACA,QAAMqB,UAAUX,kBAAkB3B,sBAAlB,EAA0C4B,MAA1C,CAAhB;AACA,MAAIO,WAAWoB,gBAAf;AACA,QAAME,aAAa,UAASC,OAAO,EAAhB,EAAoBlC,KAApB,EAA2BmC,UAAU,EAACd,QAAQ,MAAT,EAArC,EAAuD;AACxE,UAAMH,MAAM,IAAIC,IAAJ,EAAZ;AACA,QAAIiB,WAAWlB,IAAImB,WAAJ,EAAf;AACA,QAAIjB,SAAS,SAAb;AACA,QAAIc,KAAKI,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AACpC,UAAIlC,OAAOmC,uBAAX,EAAoC;AAClCH,mBAAWF,KAAKM,SAAhB;AACApB,iBAAS,WAAT;AACD,OAHD,MAGO;AACLqB,uBAAOC,IAAP,CAAY,2DAAZ;AACAD,uBAAOC,IAAP,CAAY,+BAAZ;AACD;AACF;;AAED,UAAMC,OAAQT,KAAKS,IAAL,IAAa,EAA3B;AACA,UAAMC,gBAAgBC,KAAKC,SAAL,CAAeH,IAAf,CAAtB;AACA,QAAII,QAAJ;AACA,QAAI,OAAOJ,KAAKK,KAAZ,KAAsB,QAA1B,EAAoC;AAClCD,iBAAW,0BAAQJ,KAAKK,KAAb,CAAX;AACD,KAFD,MAEO,IAAI,OAAOL,KAAKK,KAAZ,KAAsB,QAA1B,EAAoC;AACzCD,iBAAW,0BAAQF,KAAKC,SAAL,CAAeH,KAAKK,KAApB,CAAR,CAAX;AACD,KAFM,MAEA;AACLD,iBAAW,kCAAX;AACD;AACD,UAAMpE,SAAS;AACbyD,cADa;AAEba,aAAOJ,KAAKC,SAAL,CAAe9C,KAAf,CAFM;AAGbkD,eAASN,aAHI;AAIbvB,cAAQc,QAAQd,MAJH;AAKb8B,aAAOhB,QAAQgB,KALF;AAMbC,cAAQlB,KAAKmB,eANA;AAObC,2BAAqBpB,KAAKoB,mBAPb;AAQblC,cAAQA,MARK;AASbmC,eAAS,CATI;AAUbR,cAVa;AAWb;AACAxB,WAAK;AAZQ,KAAf;AAcA,WAAOT,QAAQjB,MAAR,CAAelB,MAAf,EAAuBmB,IAAvB,CAA6B0D,MAAD,IAAY;AAC7C7C,iBAAW6C,OAAO7C,QAAlB;AACAqB,mBAAa;AACXrB;AADW,OAAb;AAGA,aAAOhB,QAAQC,OAAR,CAAgBoC,UAAhB,CAAP;AACD,KANM,CAAP;AAOD,GA7CD;;AA+CA,QAAMjB,aAAa,UAAS0C,OAAT,EAAkB;AACnChB,mBAAOiB,OAAP,CAAgB,eAAc/C,QAAS,iDAAvC,EAAyF8C,OAAzF;AACA,WAAO3C,QAAQf,MAAR,CACL;AACEqB,cAAO,SADT;AAEET,gBAAUA;AAFZ,KADK,EAKL;AACES,cAAQ,SADV;AAEEuC,aAAOF;AAFT,KALK,CAAP;AAUD,GAZD;;AAcA,QAAMG,YAAY,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,uBAAuBC,QAAQC,GAAR,CAAYC,0CAAhE,EAA4G;AAC5H,UAAMnE,SAAS;AACbwD,eAAS,CADI;AAEbY,iBAAW;AAFE,KAAf;AAIA,UAAMC,kBAAkB,EAAxB;AACA,QAAIjF,MAAMC,OAAN,CAAcyE,OAAd,CAAJ,EAA4B;AAC1BA,gBAAUxF,QAAQwF,OAAR,CAAV;AACAA,cAAQQ,MAAR,CAAe,CAACC,IAAD,EAAOd,MAAP,KAAkB;AAC/B;AACA,YAAI,CAACA,MAAD,IAAW,CAACA,OAAOe,MAAnB,IAA6B,CAACf,OAAOe,MAAP,CAAcC,UAAhD,EAA4D;AAC1D,iBAAOF,IAAP;AACD;AACD,cAAME,aAAahB,OAAOe,MAAP,CAAcC,UAAjC;AACA,cAAM5F,MAAM4E,OAAOiB,WAAP,GAAsB,eAAcD,UAAW,EAA/C,GAAoD,iBAAgBA,UAAW,EAA3F;AACAF,aAAK1F,GAAL,IAAYF,YAAY4F,IAAZ,EAAkB1F,GAAlB,CAAZ;AACA,YAAI,OAAOkF,SAAP,KAAqB,WAAzB,EAAsC;AACpC,gBAAMY,YAAYlB,OAAOiB,WAAP,GAAsB,oBAAmBX,SAAU,EAAnD,GAAwD,sBAAqBA,SAAU,EAAzG;AACAQ,eAAKI,SAAL,IAAkBhG,YAAY4F,IAAZ,EAAkBI,SAAlB,CAAlB;AACD;AACD,YAAIlB,OAAOiB,WAAX,EAAwB;AACtBH,eAAKf,OAAL;AACD,SAFD,MAEO;AACL,cAAIC,UAAUA,OAAO/C,QAAjB,IAA6B+C,OAAO/C,QAAP,CAAgBkE,KAA7C,IAAsDnB,OAAOe,MAA7D,IAAuEf,OAAOe,MAAP,CAAcK,WAAzF,EAAsG;AACpG,kBAAMC,QAAQrB,OAAOe,MAAP,CAAcK,WAA5B;AACA,kBAAMD,QAAQnB,OAAO/C,QAAP,CAAgBkE,KAA9B;AACA;AACA,gBAAIA,UAAU,eAAV,IAA6BA,UAAU,qBAA3C,EAAkE;AAChEP,8BAAgB9E,IAAhB,CAAqBuF,KAArB;AACD;AACD;AACA,gBAAIF,UAAU,cAAV,IAA4BA,UAAU,gBAA1C,EAA4D;AAC1DP,8BAAgB9E,IAAhB,CAAqBuF,KAArB;AACD;AACF;AACDP,eAAKH,SAAL;AACD;AACD,eAAOG,IAAP;AACD,OA9BD,EA8BGvE,MA9BH;AA+BD;;AAED0C,mBAAOiB,OAAP,CAAgB,eAAc/C,QAAS,sCAAvC,EAA8EZ,OAAOwD,OAArF,EAA8FxD,OAAOoE,SAArG;AACA1B,mBAAOiB,OAAP,CAAgB,eAAc/C,QAAS,iBAAvC,EAAyD,EAAEyD,eAAF,EAAzD;AACA,KAAC,SAAD,EAAY,WAAZ,EAAyBU,OAAzB,CAAkClG,GAAD,IAAS;AACxC,UAAImB,OAAOnB,GAAP,IAAc,CAAlB,EAAqB;AACnBmB,eAAOnB,GAAP,IAAc;AACZE,gBAAM,WADM;AAEZD,kBAAQkB,OAAOnB,GAAP;AAFI,SAAd;AAID,OALD,MAKO;AACL,eAAOmB,OAAOnB,GAAP,CAAP;AACD;AACF,KATD;;AAWA,QAAIwF,gBAAgBlF,MAAhB,GAAyB,CAAzB,IAA8B6E,oBAAlC,EAAwD;AACtDtB,qBAAOsC,IAAP,CAAa,6BAA4BX,gBAAgBlF,MAAO,iBAAhE;AACAO,eAASM,MAAT,CAAgB,eAAhB,EAAiC,EAAE6E,aAAa,EAAE,OAAOR,eAAT,EAAf,EAAjC,EAA6E,EAAEQ,aAAa,EAAC,QAAQ,QAAT,EAAf,EAA7E,EAAkH;AAChHI,aAAKnD,SAD2G;AAEhHoD,cAAM;AAF0G,OAAlH;AAID;;AAED;AACAvG,gBAAYqB,MAAZ,EAAoB,OAApB,EAA6B,CAAC,CAA9B;;AAEA,WAAOe,QAAQf,MAAR,CAAe,EAAEY,QAAF,EAAf,EAA6BZ,MAA7B,EAAqCD,IAArC,CAA2CoF,GAAD,IAAS;AACxD,UAAIA,OAAOA,IAAIvB,KAAJ,KAAc,CAAzB,EAA4B;AAC1B,eAAO,KAAKwB,QAAL,EAAP;AACD;AACF,KAJM,CAAP;AAKD,GAtED;;AAwEA,QAAMA,WAAW,YAAW;AAC1B,WAAOrE,QAAQf,MAAR,CAAe,EAAEY,QAAF,EAAf,EAA6B;AAClCS,cAAQ,WAD0B;AAElCuC,aAAO,EAAC7E,MAAM,QAAP;AAF2B,KAA7B,CAAP;AAID,GALD;;AAOA,QAAMsG,OAAO,UAASC,GAAT,EAAc;AACzB,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,YAAM,EAAE5D,SAAS4D,GAAX,EAAN;AACD;AACD,UAAMtF,SAAS;AACbuF,oBAAcD,GADD;AAEbjE,cAAQ;AAFK,KAAf;AAIA,WAAON,QAAQf,MAAR,CAAe,EAAEY,QAAF,EAAf,EAA6BZ,MAA7B,CAAP;AACD,GATD;;AAWA,QAAMwF,OAAO;AACXtD,cADW;AAEXlB,cAFW;AAGX6C,aAHW;AAIXuB,YAJW;AAKXC;AALW,GAAb;;AAQA;AACAnF,SAAOuF,cAAP,CAAsBD,IAAtB,EAA4B,UAA5B,EAAwC;AACtCE,SAAK,MAAM9E;AAD2B,GAAxC;;AAIA,SAAOV,OAAOC,MAAP,CAAcqF,IAAd,CAAP;AACD","file":"StatusHandler.js","sourcesContent":["import { md5Hash, newObjectId } from './cryptoUtils';\nimport { logger }               from './logger';\nimport rest                     from './rest';\nimport Auth                     from './Auth';\n\nconst PUSH_STATUS_COLLECTION = '_PushStatus';\nconst JOB_STATUS_COLLECTION = '_JobStatus';\n\nconst incrementOp = function(object = {}, key, amount = 1) {\n  if (!object[key]) {\n    object[key] = {__op: 'Increment', amount: amount}\n  } else {\n    object[key].amount += amount;\n  }\n  return object[key];\n}\n\nexport function flatten(array) {\n  var flattened = [];\n  for(var i = 0; i < array.length; i++) {\n    if(Array.isArray(array[i])) {\n      flattened = flattened.concat(flatten(array[i]));\n    } else {\n      flattened.push(array[i]);\n    }\n  }\n  return flattened;\n}\n\nfunction statusHandler(className, database) {\n  let lastPromise = Promise.resolve();\n\n  function create(object) {\n    lastPromise = lastPromise.then(() => {\n      return database.create(className, object).then(() => {\n        return Promise.resolve(object);\n      });\n    });\n    return lastPromise;\n  }\n\n  function update(where, object) {\n    lastPromise = lastPromise.then(() => {\n      return database.update(className, where, object);\n    });\n    return lastPromise;\n  }\n\n  return Object.freeze({\n    create,\n    update\n  })\n}\n\nfunction restStatusHandler(className, config) {\n  let lastPromise = Promise.resolve();\n  const auth = Auth.master(config);\n  function create(object) {\n    lastPromise = lastPromise.then(() => {\n      return rest.create(config, auth, className, object)\n        .then(({ response }) => {\n          // merge the objects\n          return Promise.resolve(Object.assign({}, object, response));\n        });\n    });\n    return lastPromise;\n  }\n\n  function update(where, object) {\n    // TODO: when we have updateWhere, use that for proper interfacing\n    lastPromise = lastPromise.then(() => {\n      return rest.update(config, auth, className, { objectId: where.objectId }, object)\n        .then(({ response }) => {\n          // merge the objects\n          return Promise.resolve(Object.assign({}, object, response));\n        });\n    });\n    return lastPromise;\n  }\n\n  return Object.freeze({\n    create,\n    update\n  })\n}\n\nexport function jobStatusHandler(config) {\n  let jobStatus;\n  const objectId = newObjectId(config.objectIdSize);\n  const database = config.database;\n  const handler = statusHandler(JOB_STATUS_COLLECTION, database);\n  const setRunning = function(jobName, params) {\n    const now = new Date();\n    jobStatus = {\n      objectId,\n      jobName,\n      params,\n      status: 'running',\n      source: 'api',\n      createdAt: now,\n      // lockdown!\n      ACL: {}\n    }\n\n    return handler.create(jobStatus);\n  }\n\n  const setMessage = function(message) {\n    if (!message || typeof message !== 'string') {\n      return Promise.resolve();\n    }\n    return handler.update({ objectId }, { message });\n  }\n\n  const setSucceeded = function(message) {\n    return setFinalStatus('succeeded', message);\n  }\n\n  const setFailed = function(message) {\n    return setFinalStatus('failed', message);\n  }\n\n  const setFinalStatus = function(status, message = undefined) {\n    const finishedAt = new Date();\n    const update = { status, finishedAt };\n    if (message && typeof message === 'string') {\n      update.message = message;\n    }\n    return handler.update({ objectId }, update);\n  }\n\n  return Object.freeze({\n    setRunning,\n    setSucceeded,\n    setMessage,\n    setFailed\n  });\n}\n\nexport function pushStatusHandler(config, existingObjectId) {\n\n  let pushStatus;\n  const database = config.database;\n  const handler = restStatusHandler(PUSH_STATUS_COLLECTION, config);\n  let objectId = existingObjectId;\n  const setInitial = function(body = {}, where, options = {source: 'rest'}) {\n    const now = new Date();\n    let pushTime = now.toISOString();\n    let status = 'pending';\n    if (body.hasOwnProperty('push_time')) {\n      if (config.hasPushScheduledSupport) {\n        pushTime = body.push_time;\n        status = 'scheduled';\n      } else {\n        logger.warn('Trying to schedule a push while server is not configured.');\n        logger.warn('Push will be sent immediately');\n      }\n    }\n\n    const data =  body.data || {};\n    const payloadString = JSON.stringify(data);\n    let pushHash;\n    if (typeof data.alert === 'string') {\n      pushHash = md5Hash(data.alert);\n    } else if (typeof data.alert === 'object') {\n      pushHash = md5Hash(JSON.stringify(data.alert));\n    } else {\n      pushHash = 'd41d8cd98f00b204e9800998ecf8427e';\n    }\n    const object = {\n      pushTime,\n      query: JSON.stringify(where),\n      payload: payloadString,\n      source: options.source,\n      title: options.title,\n      expiry: body.expiration_time,\n      expiration_interval: body.expiration_interval,\n      status: status,\n      numSent: 0,\n      pushHash,\n      // lockdown!\n      ACL: {}\n    }\n    return handler.create(object).then((result) => {\n      objectId = result.objectId;\n      pushStatus = {\n        objectId\n      };\n      return Promise.resolve(pushStatus);\n    });\n  }\n\n  const setRunning = function(batches) {\n    logger.verbose(`_PushStatus ${objectId}: sending push to installations with %d batches`, batches);\n    return handler.update(\n      {\n        status:\"pending\",\n        objectId: objectId\n      },\n      {\n        status: \"running\",\n        count: batches\n      }\n    );\n  }\n\n  const trackSent = function(results, UTCOffset, cleanupInstallations = process.env.PARSE_SERVER_CLEANUP_INVALID_INSTALLATIONS) {\n    const update = {\n      numSent: 0,\n      numFailed: 0\n    };\n    const devicesToRemove = [];\n    if (Array.isArray(results)) {\n      results = flatten(results);\n      results.reduce((memo, result) => {\n        // Cannot handle that\n        if (!result || !result.device || !result.device.deviceType) {\n          return memo;\n        }\n        const deviceType = result.device.deviceType;\n        const key = result.transmitted ? `sentPerType.${deviceType}` : `failedPerType.${deviceType}`;\n        memo[key] = incrementOp(memo, key);\n        if (typeof UTCOffset !== 'undefined') {\n          const offsetKey = result.transmitted ? `sentPerUTCOffset.${UTCOffset}` : `failedPerUTCOffset.${UTCOffset}`;\n          memo[offsetKey] = incrementOp(memo, offsetKey);\n        }\n        if (result.transmitted) {\n          memo.numSent++;\n        } else {\n          if (result && result.response && result.response.error && result.device && result.device.deviceToken) {\n            const token = result.device.deviceToken;\n            const error = result.response.error;\n            // GCM errors\n            if (error === 'NotRegistered' || error === 'InvalidRegistration') {\n              devicesToRemove.push(token);\n            }\n            // APNS errors\n            if (error === 'Unregistered' || error === 'BadDeviceToken') {\n              devicesToRemove.push(token);\n            }\n          }\n          memo.numFailed++;\n        }\n        return memo;\n      }, update);\n    }\n\n    logger.verbose(`_PushStatus ${objectId}: sent push! %d success, %d failures`, update.numSent, update.numFailed);\n    logger.verbose(`_PushStatus ${objectId}: needs cleanup`, { devicesToRemove });\n    ['numSent', 'numFailed'].forEach((key) => {\n      if (update[key] > 0) {\n        update[key] = {\n          __op: 'Increment',\n          amount: update[key]\n        };\n      } else {\n        delete update[key];\n      }\n    });\n\n    if (devicesToRemove.length > 0 && cleanupInstallations) {\n      logger.info(`Removing device tokens on ${devicesToRemove.length} _Installations`);\n      database.update('_Installation', { deviceToken: { '$in': devicesToRemove }}, { deviceToken: {\"__op\": \"Delete\"} }, {\n        acl: undefined,\n        many: true\n      });\n    }\n\n    // indicate this batch is complete\n    incrementOp(update, 'count', -1);\n\n    return handler.update({ objectId }, update).then((res) => {\n      if (res && res.count === 0) {\n        return this.complete();\n      }\n    })\n  }\n\n  const complete = function() {\n    return handler.update({ objectId }, {\n      status: 'succeeded',\n      count: {__op: 'Delete'}\n    });\n  }\n\n  const fail = function(err) {\n    if (typeof err === 'string') {\n      err = { message: err };\n    }\n    const update = {\n      errorMessage: err,\n      status: 'failed'\n    }\n    return handler.update({ objectId }, update);\n  }\n\n  const rval = {\n    setInitial,\n    setRunning,\n    trackSent,\n    complete,\n    fail\n  };\n\n  // define objectId to be dynamic\n  Object.defineProperty(rval, \"objectId\", {\n    get: () => objectId\n  });\n\n  return Object.freeze(rval);\n}\n"]}