{"version":3,"sources":["../src/ParseServerRESTController.js"],"names":["Config","require","Auth","RESTController","URL","Parse","getSessionToken","options","sessionToken","Promise","as","getAuth","config","installationId","useMasterKey","isMaster","then","getAuthForSessionToken","ParseServerRESTController","applicationId","router","handleRequest","method","path","data","args","arguments","get","serverURL","parse","indexOf","slice","length","promises","requests","map","request","body","response","success","error","code","message","all","query","resolve","reject","auth","info","tryRouteRequest","status","err","Error","INVALID_JSON","apply","ajax"],"mappings":"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","file":"ParseServerRESTController.js","sourcesContent":["const Config = require('./Config');\nconst Auth = require('./Auth');\nconst RESTController = require('parse/lib/node/RESTController');\nconst URL = require('url');\nconst Parse = require('parse/node');\n\nfunction getSessionToken(options) {\n  if (options && typeof options.sessionToken === 'string') {\n    return Parse.Promise.as(options.sessionToken);\n  }\n  return Parse.Promise.as(null);\n}\n\nfunction getAuth(options = {}, config) {\n  const installationId = options.installationId || 'cloud';\n  if (options.useMasterKey) {\n    return Parse.Promise.as(new Auth.Auth({config, isMaster: true, installationId }));\n  }\n  return getSessionToken(options).then((sessionToken) => {\n    if (sessionToken) {\n      options.sessionToken = sessionToken;\n      return Auth.getAuthForSessionToken({\n        config,\n        sessionToken: sessionToken,\n        installationId\n      });\n    } else {\n      return Parse.Promise.as(new Auth.Auth({ config, installationId }));\n    }\n  })\n}\n\nfunction ParseServerRESTController(applicationId, router) {\n  function handleRequest(method, path, data = {}, options = {}) {\n    // Store the arguments, for later use if internal fails\n    const args = arguments;\n\n    const config = Config.get(applicationId);\n    const serverURL = URL.parse(config.serverURL);\n    if (path.indexOf(serverURL.path) === 0) {\n      path = path.slice(serverURL.path.length, path.length);\n    }\n\n    if (path[0] !== \"/\") {\n      path = \"/\" + path;\n    }\n\n    if (path === '/batch') {\n      const promises = data.requests.map((request) => {\n        return handleRequest(request.method, request.path, request.body, options).then((response) => {\n          return Parse.Promise.as({success: response});\n        }, (error) => {\n          return Parse.Promise.as({error: {code: error.code, error: error.message}});\n        });\n      });\n      return Parse.Promise.all(promises);\n    }\n\n    let query;\n    if (method === 'GET') {\n      query = data;\n    }\n\n    return new Parse.Promise((resolve, reject) => {\n      getAuth(options, config).then((auth) => {\n        const request = {\n          body: data,\n          config,\n          auth,\n          info: {\n            applicationId: applicationId,\n            sessionToken: options.sessionToken\n          },\n          query\n        };\n        return Promise.resolve().then(() => {\n          return router.tryRouteRequest(method, path, request);\n        }).then((response) => {\n          resolve(response.response, response.status, response);\n        }, (err) => {\n          if (err instanceof Parse.Error &&\n              err.code == Parse.Error.INVALID_JSON &&\n              err.message == `cannot route ${method} ${path}`) {\n            RESTController.request.apply(null, args).then(resolve, reject);\n          } else {\n            reject(err);\n          }\n        });\n      }, reject);\n    });\n  }\n\n  return  {\n    request: handleRequest,\n    ajax: RESTController.ajax\n  };\n}\n\nexport default ParseServerRESTController;\nexport { ParseServerRESTController };\n"]}