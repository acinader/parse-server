{"version":3,"sources":["../../../../src/Adapters/Storage/Postgres/PostgresConfigParser.js"],"names":["url","require","getDatabaseOptionsFromURI","uri","databaseOptions","parsedURI","parse","queryParams","parseQueryParams","query","authParts","auth","split","host","hostname","port","parseInt","database","pathname","substr","undefined","user","length","password","ssl","toLowerCase","binary","client_encoding","application_name","fallback_application_name","poolSize","queryString","reduce","p","c","parts","decodeURIComponent","slice","join","module","exports"],"mappings":";;AAAA,MAAMA,MAAMC,QAAQ,KAAR,CAAZ;;AAEA,SAASC,yBAAT,CAAmCC,GAAnC,EAAwC;AACtC,QAAMC,kBAAkB,EAAxB;;AAEA,QAAMC,YAAYL,IAAIM,KAAJ,CAAUH,GAAV,CAAlB;AACA,QAAMI,cAAcC,iBAAiBH,UAAUI,KAA3B,CAApB;AACA,QAAMC,YAAYL,UAAUM,IAAV,GAAiBN,UAAUM,IAAV,CAAeC,KAAf,CAAqB,GAArB,CAAjB,GAA6C,EAA/D;;AAEAR,kBAAgBS,IAAhB,GAAuBR,UAAUS,QAAV,IAAsB,WAA7C;AACAV,kBAAgBW,IAAhB,GAAuBV,UAAUU,IAAV,GAAiBC,SAASX,UAAUU,IAAnB,CAAjB,GAA4C,IAAnE;AACAX,kBAAgBa,QAAhB,GAA2BZ,UAAUa,QAAV,GACvBb,UAAUa,QAAV,CAAmBC,MAAnB,CAA0B,CAA1B,CADuB,GAEvBC,SAFJ;;AAIAhB,kBAAgBiB,IAAhB,GAAuBX,UAAUY,MAAV,GAAmB,CAAnB,GAAuBZ,UAAU,CAAV,CAAvB,GAAsC,EAA7D;AACAN,kBAAgBmB,QAAhB,GAA2Bb,UAAUY,MAAV,GAAmB,CAAnB,GAAuBZ,UAAU,CAAV,CAAvB,GAAsC,EAAjE;;AAEAN,kBAAgBoB,GAAhB,GACEjB,YAAYiB,GAAZ,IAAmBjB,YAAYiB,GAAZ,CAAgBC,WAAhB,OAAkC,MAArD,GAA8D,IAA9D,GAAqE,KADvE;AAEArB,kBAAgBsB,MAAhB,GACEnB,YAAYmB,MAAZ,IAAsBnB,YAAYmB,MAAZ,CAAmBD,WAAnB,OAAqC,MAA3D,GAAoE,IAApE,GAA2E,KAD7E;;AAGArB,kBAAgBuB,eAAhB,GAAkCpB,YAAYoB,eAA9C;AACAvB,kBAAgBwB,gBAAhB,GAAmCrB,YAAYqB,gBAA/C;AACAxB,kBAAgByB,yBAAhB,GAA4CtB,YAAYsB,yBAAxD;;AAEA,MAAItB,YAAYuB,QAAhB,EAA0B;AACxB1B,oBAAgB0B,QAAhB,GAA2Bd,SAAST,YAAYuB,QAArB,KAAkC,EAA7D;AACD;;AAED,SAAO1B,eAAP;AACD;;AAED,SAASI,gBAAT,CAA0BuB,WAA1B,EAAuC;AACrCA,gBAAcA,eAAe,EAA7B;;AAEA,SAAOA,YACJnB,KADI,CACE,GADF,EAEJoB,MAFI,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,UAAMC,QAAQD,EAAEtB,KAAF,CAAQ,GAAR,CAAd;AACAqB,MAAEG,mBAAmBD,MAAM,CAAN,CAAnB,CAAF,IACEA,MAAMb,MAAN,GAAe,CAAf,GACIc,mBAAmBD,MAAME,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB,CAAnB,CADJ,GAEI,EAHN;AAIA,WAAOL,CAAP;AACD,GATI,EASF,EATE,CAAP;AAUD;;AAEDM,OAAOC,OAAP,GAAiB;AACfhC,oBAAkBA,gBADH;AAEfN,6BAA2BA;AAFZ,CAAjB","file":"PostgresConfigParser.js","sourcesContent":["const url = require('url');\n\nfunction getDatabaseOptionsFromURI(uri) {\n  const databaseOptions = {};\n\n  const parsedURI = url.parse(uri);\n  const queryParams = parseQueryParams(parsedURI.query);\n  const authParts = parsedURI.auth ? parsedURI.auth.split(':') : [];\n\n  databaseOptions.host = parsedURI.hostname || 'localhost';\n  databaseOptions.port = parsedURI.port ? parseInt(parsedURI.port) : 5432;\n  databaseOptions.database = parsedURI.pathname\n    ? parsedURI.pathname.substr(1)\n    : undefined;\n\n  databaseOptions.user = authParts.length > 0 ? authParts[0] : '';\n  databaseOptions.password = authParts.length > 1 ? authParts[1] : '';\n\n  databaseOptions.ssl =\n    queryParams.ssl && queryParams.ssl.toLowerCase() === 'true' ? true : false;\n  databaseOptions.binary =\n    queryParams.binary && queryParams.binary.toLowerCase() === 'true' ? true : false;\n\n  databaseOptions.client_encoding = queryParams.client_encoding;\n  databaseOptions.application_name = queryParams.application_name;\n  databaseOptions.fallback_application_name = queryParams.fallback_application_name;\n\n  if (queryParams.poolSize) {\n    databaseOptions.poolSize = parseInt(queryParams.poolSize) || 10;\n  }\n\n  return databaseOptions;\n}\n\nfunction parseQueryParams(queryString) {\n  queryString = queryString || '';\n\n  return queryString\n    .split('&')\n    .reduce((p, c) => {\n      const parts = c.split('=');\n      p[decodeURIComponent(parts[0])] =\n        parts.length > 1\n          ? decodeURIComponent(parts.slice(1).join('='))\n          : '';\n      return p;\n    }, {});\n}\n\nmodule.exports = {\n  parseQueryParams: parseQueryParams,\n  getDatabaseOptionsFromURI: getDatabaseOptionsFromURI\n};\n"]}