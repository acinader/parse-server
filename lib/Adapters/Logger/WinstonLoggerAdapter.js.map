{"version":3,"sources":["../../../src/Adapters/Logger/WinstonLoggerAdapter.js"],"names":["MILLISECONDS_IN_A_DAY","WinstonLoggerAdapter","LoggerAdapter","constructor","options","log","logger","apply","arguments","addTransport","transport","query","callback","from","Date","now","until","limit","size","order","level","queryOptions","Promise","resolve","reject","err","res"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,wBAAwB,KAAK,EAAL,GAAU,EAAV,GAAe,IAA7C;;AAEO,MAAMC,oBAAN,SAAmCC,4BAAnC,CAAiD;AACtDC,cAAYC,OAAZ,EAAqB;AACnB;AACA,QAAIA,OAAJ,EAAa;AACX,0CAAgBA,OAAhB;AACD;AACF;;AAEDC,QAAM;AACJ,WAAOC,sBAAOD,GAAP,CAAWE,KAAX,CAAiBD,qBAAjB,EAAyBE,SAAzB,CAAP;AACD;;AAEDC,eAAaC,SAAb,EAAwB;AACtB;AACA;AACA;AACA,qCAAaA,SAAb;AACD;;AAED;AACAC,QAAMP,OAAN,EAAeQ,WAAW,MAAM,CAAE,CAAlC,EAAoC;AAClC,QAAI,CAACR,OAAL,EAAc;AACZA,gBAAU,EAAV;AACD;AACD;AACA,UAAMS,OAAOT,QAAQS,IAAR,IAAgB,IAAIC,IAAJ,CAASA,KAAKC,GAAL,KAAc,IAAIf,qBAA3B,CAA7B;AACA,UAAMgB,QAAQZ,QAAQY,KAAR,IAAiB,IAAIF,IAAJ,EAA/B;AACA,UAAMG,QAAQb,QAAQc,IAAR,IAAgB,EAA9B;AACA,UAAMC,QAAQf,QAAQe,KAAR,IAAiB,MAA/B;AACA,UAAMC,QAAQhB,QAAQgB,KAAR,IAAiB,MAA/B;;AAEA,UAAMC,eAAe;AACnBR,UADmB;AAEnBG,WAFmB;AAGnBC,WAHmB;AAInBE;AAJmB,KAArB;;AAOA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,4BAAOK,KAAP,CAAaU,YAAb,EAA2B,CAACI,GAAD,EAAMC,GAAN,KAAc;AACvC,YAAID,GAAJ,EAAS;AACPb,mBAASa,GAAT;AACA,iBAAOD,OAAOC,GAAP,CAAP;AACD;AACD,YAAIL,SAAS,OAAb,EAAsB;AACpBR,mBAASc,IAAI,oBAAJ,CAAT;AACAH,kBAAQG,IAAI,oBAAJ,CAAR;AACD,SAHD,MAGO;AACLd,mBAASc,IAAI,cAAJ,CAAT;AACAH,kBAAQG,IAAI,cAAJ,CAAR;AACD;AACF,OAZD;AAaD,KAdM,CAAP;AAeD;AArDqD;;QAA3CzB,oB,GAAAA,oB;kBAwDEA,oB","file":"WinstonLoggerAdapter.js","sourcesContent":["import { LoggerAdapter } from './LoggerAdapter';\nimport { logger, addTransport, configureLogger } from './WinstonLogger';\n\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nexport class WinstonLoggerAdapter extends LoggerAdapter {\n  constructor(options) {\n    super();\n    if (options) {\n      configureLogger(options);\n    }\n  }\n\n  log() {\n    return logger.log.apply(logger, arguments);\n  }\n\n  addTransport(transport) {\n    // Note that this is calling addTransport\n    // from logger.  See import - confusing.\n    // but this is not recursive.\n    addTransport(transport);\n  }\n\n  // custom query as winston is currently limited\n  query(options, callback = () => {}) {\n    if (!options) {\n      options = {};\n    }\n    // defaults to 7 days prior\n    const from = options.from || new Date(Date.now() - (7 * MILLISECONDS_IN_A_DAY));\n    const until = options.until || new Date();\n    const limit = options.size || 10;\n    const order = options.order || 'desc';\n    const level = options.level || 'info';\n\n    const queryOptions = {\n      from,\n      until,\n      limit,\n      order\n    };\n\n    return new Promise((resolve, reject) => {\n      logger.query(queryOptions, (err, res) => {\n        if (err) {\n          callback(err);\n          return reject(err);\n        }\n        if (level == 'error') {\n          callback(res['parse-server-error']);\n          resolve(res['parse-server-error']);\n        } else {\n          callback(res['parse-server']);\n          resolve(res['parse-server']);\n        }\n      })\n    });\n  }\n}\n\nexport default WinstonLoggerAdapter;\n"]}