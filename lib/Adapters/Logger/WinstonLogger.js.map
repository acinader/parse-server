{"version":3,"sources":["../../../src/Adapters/Logger/WinstonLogger.js"],"names":["configureLogger","addTransport","removeTransport","logger","winston","Logger","additionalTransports","updateTransports","options","transports","Object","assign","silent","_","isNull","dirname","isUndefined","DailyRotateFile","filename","name","timestamp","level","console","Console","colorize","forEach","transport","configure","values","logsFolder","defaults","jsonLogs","logLevel","verbose","path","isAbsolute","resolve","process","cwd","fs","mkdirSync","e","json","stringify","push","transportName","remove"],"mappings":";;;;;;QA+CgBA,e,GAAAA,e;QAiCAC,Y,GAAAA,Y;QAKAC,e,GAAAA,e;;AArFhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMC,SAAS,IAAIC,kBAAQC,MAAZ,EAAf;AACA,MAAMC,uBAAuB,EAA7B;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,QAAMC,aAAaC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,OAAOM,UAAzB,CAAnB;AACA,MAAID,OAAJ,EAAa;AACX,UAAMI,SAASJ,QAAQI,MAAvB;AACA,WAAOJ,QAAQI,MAAf;AACA,QAAIC,iBAAEC,MAAF,CAASN,QAAQO,OAAjB,CAAJ,EAA+B;AAC7B,aAAON,WAAW,cAAX,CAAP;AACA,aAAOA,WAAW,oBAAX,CAAP;AACD,KAHD,MAGO,IAAI,CAACI,iBAAEG,WAAF,CAAcR,QAAQO,OAAtB,CAAL,EAAqC;AAC1CN,iBAAW,cAAX,IAA6B,IAAKQ,gCAAL,CAC3BP,OAAOC,MAAP,CAAc,EAAd,EAAkB;AAChBO,kBAAU,mBADM;AAEhBC,cAAM;AAFU,OAAlB,EAGGX,OAHH,EAGY,EAAEY,WAAW,IAAb,EAHZ,CAD2B,CAA7B;AAKAX,iBAAW,oBAAX,IAAmC,IAAKQ,gCAAL,CACjCP,OAAOC,MAAP,CAAc,EAAd,EAAkB;AAChBO,kBAAU,kBADM;AAEhBC,cAAM;AAFU,OAAlB,EAGGX,OAHH,EAGY,EAAEa,OAAO,OAAT,EAAkBD,WAAW,IAA7B,EAHZ,CADiC,CAAnC;AAKD;;AAEDX,eAAWa,OAAX,GAAqB,IAAKlB,kBAAQK,UAAR,CAAmBc,OAAxB,CACnBb,OAAOC,MAAP,CAAc;AACZa,gBAAU,IADE;AAEZL,YAAM,SAFM;AAGZP;AAHY,KAAd,EAIGJ,OAJH,CADmB,CAArB;AAMD;AACD;AACAF,uBAAqBmB,OAArB,CAA8BC,SAAD,IAAe;AAC1CjB,eAAWiB,UAAUP,IAArB,IAA6BO,SAA7B;AACD,GAFD;AAGAvB,SAAOwB,SAAP,CAAiB;AACflB,gBAAYI,iBAAEe,MAAF,CAASnB,UAAT;AADG,GAAjB;AAGD;;AAEM,SAAST,eAAT,CAAyB;AAC9B6B,eAAaC,mBAASD,UADQ;AAE9BE,aAAWD,mBAASC,QAFU;AAG9BC,aAAW5B,kBAAQiB,KAHW;AAI9BY,YAAUH,mBAASG,OAJW;AAK9BrB,WAASkB,mBAASlB,MALY,KAKD,EALxB,EAK4B;;AAEjC,MAAIqB,OAAJ,EAAa;AACXD,eAAW,SAAX;AACD;;AAED5B,oBAAQiB,KAAR,GAAgBW,QAAhB;AACA,QAAMxB,UAAU,EAAhB;;AAEA,MAAIqB,UAAJ,EAAgB;AACd,QAAI,CAACK,eAAKC,UAAL,CAAgBN,UAAhB,CAAL,EAAkC;AAChCA,mBAAaK,eAAKE,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BT,UAA5B,CAAb;AACD;AACD,QAAI;AACFU,mBAAGC,SAAH,CAAaX,UAAb;AACD,KAFD,CAEE,OAAOY,CAAP,EAAU,CAAE,KAAO;AACtB;AACDjC,UAAQO,OAAR,GAAkBc,UAAlB;AACArB,UAAQa,KAAR,GAAgBW,QAAhB;AACAxB,UAAQI,MAAR,GAAiBA,MAAjB;;AAEA,MAAImB,QAAJ,EAAc;AACZvB,YAAQkC,IAAR,GAAe,IAAf;AACAlC,YAAQmC,SAAR,GAAoB,IAApB;AACD;AACDpC,mBAAiBC,OAAjB;AACD;;AAEM,SAASP,YAAT,CAAsByB,SAAtB,EAAiC;AACtCpB,uBAAqBsC,IAArB,CAA0BlB,SAA1B;AACAnB;AACD;;AAEM,SAASL,eAAT,CAAyBwB,SAAzB,EAAoC;AACzC,QAAMmB,gBAAgB,OAAOnB,SAAP,IAAoB,QAApB,GAA+BA,SAA/B,GAA2CA,UAAUP,IAA3E;AACA,QAAMV,aAAaC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,OAAOM,UAAzB,CAAnB;AACA,SAAOA,WAAWoC,aAAX,CAAP;AACA1C,SAAOwB,SAAP,CAAiB;AACflB,gBAAYI,iBAAEe,MAAF,CAASnB,UAAT;AADG,GAAjB;AAGAI,mBAAEiC,MAAF,CAASxC,oBAAT,EAAgCoB,SAAD,IAAe;AAC5C,WAAOA,UAAUP,IAAV,KAAmB0B,aAA1B;AACD,GAFD;AAGD;;QAEQ1C,M,GAAAA,M;kBACMA,M","file":"WinstonLogger.js","sourcesContent":["import winston from 'winston';\nimport fs from 'fs';\nimport path from 'path';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport _ from 'lodash';\nimport defaults  from '../../defaults';\n\nconst logger = new winston.Logger();\nconst additionalTransports = [];\n\nfunction updateTransports(options) {\n  const transports = Object.assign({}, logger.transports);\n  if (options) {\n    const silent = options.silent;\n    delete options.silent;\n    if (_.isNull(options.dirname)) {\n      delete transports['parse-server'];\n      delete transports['parse-server-error'];\n    } else if (!_.isUndefined(options.dirname)) {\n      transports['parse-server'] = new (DailyRotateFile)(\n        Object.assign({}, {\n          filename: 'parse-server.info',\n          name: 'parse-server',\n        }, options, { timestamp: true }));\n      transports['parse-server-error'] = new (DailyRotateFile)(\n        Object.assign({}, {\n          filename: 'parse-server.err',\n          name: 'parse-server-error',\n        }, options, { level: 'error', timestamp: true  }));\n    }\n\n    transports.console = new (winston.transports.Console)(\n      Object.assign({\n        colorize: true,\n        name: 'console',\n        silent\n      }, options));\n  }\n  // Mount the additional transports\n  additionalTransports.forEach((transport) => {\n    transports[transport.name] = transport;\n  });\n  logger.configure({\n    transports: _.values(transports)\n  });\n}\n\nexport function configureLogger({\n  logsFolder = defaults.logsFolder,\n  jsonLogs = defaults.jsonLogs,\n  logLevel = winston.level,\n  verbose = defaults.verbose,\n  silent = defaults.silent } = {}) {\n\n  if (verbose) {\n    logLevel = 'verbose';\n  }\n\n  winston.level = logLevel;\n  const options = {};\n\n  if (logsFolder) {\n    if (!path.isAbsolute(logsFolder)) {\n      logsFolder = path.resolve(process.cwd(), logsFolder);\n    }\n    try {\n      fs.mkdirSync(logsFolder);\n    } catch (e) { /* */ }\n  }\n  options.dirname = logsFolder;\n  options.level = logLevel;\n  options.silent = silent;\n\n  if (jsonLogs) {\n    options.json = true;\n    options.stringify = true;\n  }\n  updateTransports(options);\n}\n\nexport function addTransport(transport) {\n  additionalTransports.push(transport);\n  updateTransports();\n}\n\nexport function removeTransport(transport) {\n  const transportName = typeof transport == 'string' ? transport : transport.name;\n  const transports = Object.assign({}, logger.transports);\n  delete transports[transportName];\n  logger.configure({\n    transports: _.values(transports)\n  });\n  _.remove(additionalTransports, (transport) => {\n    return transport.name === transportName;\n  });\n}\n\nexport { logger };\nexport default logger;\n"]}