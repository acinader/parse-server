{"version":3,"sources":["../../../src/Adapters/Auth/facebook.js"],"names":["https","require","Parse","validateAuthData","authData","graphRequest","access_token","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","appIds","length","indexOf","path","Promise","resolve","reject","get","res","on","chunk","JSON","parse","e","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;;AAEA;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,aAAa,+BAA+BD,SAASE,YAArD,EACJC,IADI,CACEC,IAAD,IAAU;AACd,QAAIA,QAAQA,KAAKC,EAAL,IAAWL,SAASK,EAAhC,EAAoC;AAClC;AACD;AACD,UAAM,IAAIP,MAAMQ,KAAV,CACJR,MAAMQ,KAAN,CAAYC,gBADR,EAEJ,yCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BT,QAA/B,EAAyC;AACvC,MAAIE,eAAeF,SAASE,YAA5B;AACA,MAAI,CAACO,OAAOC,MAAZ,EAAoB;AAClB,UAAM,IAAIZ,MAAMQ,KAAV,CACJR,MAAMQ,KAAN,CAAYC,gBADR,EAEJ,kCAFI,CAAN;AAGD;AACD,SAAON,aAAa,sBAAsBC,YAAnC,EACJC,IADI,CACEC,IAAD,IAAU;AACd,QAAIA,QAAQK,OAAOE,OAAP,CAAeP,KAAKC,EAApB,KAA2B,CAAC,CAAxC,EAA2C;AACzC;AACD;AACD,UAAM,IAAIP,MAAMQ,KAAV,CACJR,MAAMQ,KAAN,CAAYC,gBADR,EAEJ,yCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED;AACA,SAASN,YAAT,CAAsBW,IAAtB,EAA4B;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CnB,UAAMoB,GAAN,CAAU,gCAAgCJ,IAA1C,EAAgD,UAASK,GAAT,EAAc;AAC5D,UAAIb,OAAO,EAAX;AACAa,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7Bf,gBAAQe,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,YAAI;AACFd,iBAAOgB,KAAKC,KAAL,CAAWjB,IAAX,CAAP;AACD,SAFD,CAEE,OAAMkB,CAAN,EAAS;AACT,iBAAOP,OAAOO,CAAP,CAAP;AACD;AACDR,gBAAQV,IAAR;AACD,OAPD;AAQD,KAbD,EAaGc,EAbH,CAaM,OAbN,EAae,YAAW;AACxBH,aAAO,qDAAP;AACD,KAfD;AAgBD,GAjBM,CAAP;AAkBD;;AAEDQ,OAAOC,OAAP,GAAiB;AACfhB,iBAAeA,aADA;AAEfT,oBAAkBA;AAFH,CAAjB","file":"facebook.js","sourcesContent":["// Helper functions for accessing the Facebook Graph API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return graphRequest('me?fields=id&access_token=' + authData.access_token)\n    .then((data) => {\n      if (data && data.id == authData.id) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Facebook auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId(appIds, authData) {\n  var access_token = authData.access_token;\n  if (!appIds.length) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Facebook auth is not configured.');\n  }\n  return graphRequest('app?access_token=' + access_token)\n    .then((data) => {\n      if (data && appIds.indexOf(data.id) != -1) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Facebook auth is invalid for this user.');\n    });\n}\n\n// A promisey wrapper for FB graph requests.\nfunction graphRequest(path) {\n  return new Promise(function(resolve, reject) {\n    https.get('https://graph.facebook.com/' + path, function(res) {\n      var data = '';\n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function() {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    }).on('error', function() {\n      reject('Failed to validate this access token with Facebook.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}