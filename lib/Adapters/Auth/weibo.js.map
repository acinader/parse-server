{"version":3,"sources":["../../../src/Adapters/Auth/weibo.js"],"names":["https","require","Parse","querystring","validateAuthData","authData","graphRequest","access_token","then","data","uid","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","reject","postData","stringify","options","hostname","path","method","headers","Buffer","byteLength","req","request","res","on","chunk","JSON","parse","e","write","end","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;AACA,IAAIC,cAAcF,QAAQ,aAAR,CAAlB;;AAEA;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,aAAaD,SAASE,YAAtB,EAAoCC,IAApC,CAAyC,UAAUC,IAAV,EAAgB;AAC9D,QAAIA,QAAQA,KAAKC,GAAL,IAAYL,SAASM,EAAjC,EAAqC;AACnC;AACD;AACD,UAAM,IAAIT,MAAMU,KAAV,CAAgBV,MAAMU,KAAN,CAAYC,gBAA5B,EAA8C,sCAA9C,CAAN;AACD,GALM,CAAP;AAMD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASV,YAAT,CAAsBC,YAAtB,EAAoC;AAClC,SAAO,IAAIQ,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,WAAWf,YAAYgB,SAAZ,CAAsB;AACnC,sBAAeZ;AADoB,KAAtB,CAAf;AAGA,QAAIa,UAAU;AACZC,gBAAU,eADE;AAEZC,YAAM,wBAFM;AAGZC,cAAQ,MAHI;AAIZC,eAAS;AACP,wBAAgB,mCADT;AAEP,0BAAkBC,OAAOC,UAAP,CAAkBR,QAAlB;AAFX;AAJG,KAAd;AASA,QAAIS,MAAM3B,MAAM4B,OAAN,CAAcR,OAAd,EAAuB,UAASS,GAAT,EAAa;AAC5C,UAAIpB,OAAO,EAAX;AACAoB,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC9BtB,gBAAQsB,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAY;AACxB,YAAI;AACFrB,iBAAOuB,KAAKC,KAAL,CAAWxB,IAAX,CAAP;AACD,SAFD,CAEE,OAAMyB,CAAN,EAAS;AACT,iBAAOjB,OAAOiB,CAAP,CAAP;AACD;AACDlB,gBAAQP,IAAR;AACD,OAPD;AAQAoB,UAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAY;AAC1Bb,eAAO,kDAAP;AACD,OAFD;AAGD,KAhBS,CAAV;AAiBAU,QAAIG,EAAJ,CAAO,OAAP,EAAgB,YAAY;AAC1Bb,aAAO,kDAAP;AACD,KAFD;AAGAU,QAAIQ,KAAJ,CAAUjB,QAAV;AACAS,QAAIS,GAAJ;AACD,GAnCM,CAAP;AAoCD;;AAEDC,OAAOC,OAAP,GAAiB;AACfxB,eADe;AAEfV;AAFe,CAAjB","file":"weibo.js","sourcesContent":["// Helper functions for accessing the weibo Graph API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return graphRequest(authData.access_token).then(function (data) {\n    if (data && data.uid == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'weibo auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for weibo graph requests.\nfunction graphRequest(access_token) {\n  return new Promise(function (resolve, reject) {\n    var postData = querystring.stringify({\n      \"access_token\":access_token\n    });\n    var options = {\n      hostname: 'api.weibo.com',\n      path: '/oauth2/get_token_info',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(postData)\n      }\n    };\n    var req = https.request(options, function(res){\n      var data = '';\n      res.on('data', function (chunk) {\n        data += chunk;\n      });\n      res.on('end', function () {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n      res.on('error', function () {\n        reject('Failed to validate this access token with weibo.');\n      });\n    });\n    req.on('error', function () {\n      reject('Failed to validate this access token with weibo.');\n    });\n    req.write(postData);\n    req.end();\n  });\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData\n};\n"]}