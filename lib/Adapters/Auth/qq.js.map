{"version":3,"sources":["../../../src/Adapters/Auth/qq.js"],"names":["https","require","Parse","validateAuthData","authData","graphRequest","access_token","then","data","openid","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","reject","get","res","on","chunk","starPos","indexOf","endPos","substring","JSON","parse","e","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;;AAEA;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,aAAa,qBAAqBD,SAASE,YAA3C,EAAyDC,IAAzD,CAA8D,UAAUC,IAAV,EAAgB;AACnF,QAAIA,QAAQA,KAAKC,MAAL,IAAeL,SAASM,EAApC,EAAwC;AACtC;AACD;AACD,UAAM,IAAIR,MAAMS,KAAV,CAAgBT,MAAMS,KAAN,CAAYC,gBAA5B,EAA8C,mCAA9C,CAAN;AACD,GALM,CAAP;AAMD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASV,YAAT,CAAsBW,IAAtB,EAA4B;AAC1B,SAAO,IAAIF,OAAJ,CAAY,UAAUC,OAAV,EAAmBE,MAAnB,EAA2B;AAC5CjB,UAAMkB,GAAN,CAAU,mCAAmCF,IAA7C,EAAmD,UAAUG,GAAV,EAAe;AAChE,UAAIX,OAAO,EAAX;AACAW,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC9Bb,gBAAQa,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAY;AACxB,YAAIE,UAAUd,KAAKe,OAAL,CAAa,GAAb,CAAd;AACA,YAAIC,SAAShB,KAAKe,OAAL,CAAa,GAAb,CAAb;AACA,YAAGD,WAAW,CAAC,CAAZ,IAAiBE,UAAU,CAAC,CAA/B,EAAiC;AAC/B,gBAAM,IAAItB,MAAMS,KAAV,CAAgBT,MAAMS,KAAN,CAAYC,gBAA5B,EAA8C,mCAA9C,CAAN;AACD;AACDJ,eAAOA,KAAKiB,SAAL,CAAeH,UAAU,CAAzB,EAA2BE,SAAS,CAApC,CAAP;AACA,YAAI;AACFhB,iBAAOkB,KAAKC,KAAL,CAAWnB,IAAX,CAAP;AACD,SAFD,CAEE,OAAMoB,CAAN,EAAS;AACT,iBAAOX,OAAOW,CAAP,CAAP;AACD;AACDb,gBAAQP,IAAR;AACD,OAbD;AAcD,KAnBD,EAmBGY,EAnBH,CAmBM,OAnBN,EAmBe,YAAY;AACzBH,aAAO,+CAAP;AACD,KArBD;AAsBD,GAvBM,CAAP;AAwBD;;AAEDY,OAAOC,OAAP,GAAiB;AACfjB,eADe;AAEfV;AAFe,CAAjB","file":"qq.js","sourcesContent":["// Helper functions for accessing the qq Graph API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return graphRequest('me?access_token=' + authData.access_token).then(function (data) {\n    if (data && data.openid == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'qq auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for qq graph requests.\nfunction graphRequest(path) {\n  return new Promise(function (resolve, reject) {\n    https.get('https://graph.qq.com/oauth2.0/' + path, function (res) {\n      var data = '';\n      res.on('data', function (chunk) {\n        data += chunk;\n      });\n      res.on('end', function () {\n        var starPos = data.indexOf(\"(\");\n        var endPos = data.indexOf(\")\");\n        if(starPos == -1 || endPos == -1){\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'qq auth is invalid for this user.');\n        }\n        data = data.substring(starPos + 1,endPos - 1);\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    }).on('error', function () {\n      reject('Failed to validate this access token with qq.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData\n};\n"]}