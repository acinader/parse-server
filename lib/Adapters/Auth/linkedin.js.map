{"version":3,"sources":["../../../src/Adapters/Auth/linkedin.js"],"names":["https","require","Parse","validateAuthData","authData","request","access_token","is_mobile_sdk","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","headers","reject","get","host","res","on","chunk","JSON","parse","e","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;;AAEA;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,QAAQ,eAAR,EAAyBD,SAASE,YAAlC,EAAgDF,SAASG,aAAzD,EACJC,IADI,CACEC,IAAD,IAAU;AACd,QAAIA,QAAQA,KAAKC,EAAL,IAAWN,SAASM,EAAhC,EAAoC;AAClC;AACD;AACD,UAAM,IAAIR,MAAMS,KAAV,CACJT,MAAMS,KAAN,CAAYC,gBADR,EAEJ,yCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASV,OAAT,CAAiBW,IAAjB,EAAuBV,YAAvB,EAAqCC,aAArC,EAAoD;AAClD,MAAIU,UAAU;AACZ,qBAAiB,YAAYX,YADjB;AAEZ,mBAAe;AAFH,GAAd;;AAKA,MAAGC,aAAH,EAAkB;AAChBU,YAAQ,UAAR,IAAsB,MAAtB;AACD;;AAED,SAAO,IAAIH,OAAJ,CAAY,UAASC,OAAT,EAAkBG,MAAlB,EAA0B;AAC3ClB,UAAMmB,GAAN,CAAU;AACRC,YAAM,kBADE;AAERJ,YAAM,SAASA,IAFP;AAGRC,eAASA;AAHD,KAAV,EAIG,UAASI,GAAT,EAAc;AACf,UAAIZ,OAAO,EAAX;AACAY,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7Bd,gBAAQc,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,YAAI;AACFb,iBAAOe,KAAKC,KAAL,CAAWhB,IAAX,CAAP;AACD,SAFD,CAEE,OAAMiB,CAAN,EAAS;AACT,iBAAOR,OAAOQ,CAAP,CAAP;AACD;AACDX,gBAAQN,IAAR;AACD,OAPD;AAQD,KAjBD,EAiBGa,EAjBH,CAiBM,OAjBN,EAiBe,YAAW;AACxBJ,aAAO,qDAAP;AACD,KAnBD;AAoBD,GArBM,CAAP;AAsBD;;AAEDS,OAAOC,OAAP,GAAiB;AACff,iBAAeA,aADA;AAEfV,oBAAkBA;AAFH,CAAjB","file":"linkedin.js","sourcesContent":["// Helper functions for accessing the linkedin API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return request('people/~:(id)', authData.access_token, authData.is_mobile_sdk)\n    .then((data) => {\n      if (data && data.id == authData.id) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Linkedin auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token, is_mobile_sdk) {\n  var headers = {\n    'Authorization': 'Bearer ' + access_token,\n    'x-li-format': 'json',\n  }\n\n  if(is_mobile_sdk) {\n    headers['x-li-src'] = 'msdk';\n  }\n\n  return new Promise(function(resolve, reject) {\n    https.get({\n      host: 'api.linkedin.com',\n      path: '/v1/' + path,\n      headers: headers\n    }, function(res) {\n      var data = '';\n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function() {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    }).on('error', function() {\n      reject('Failed to validate this access token with Linkedin.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}