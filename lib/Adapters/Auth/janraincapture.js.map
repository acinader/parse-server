{"version":3,"sources":["../../../src/Adapters/Auth/janraincapture.js"],"names":["https","require","Parse","querystring","validateAuthData","authData","options","request","janrain_capture_host","access_token","then","data","stat","result","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","host","query_string_data","stringify","reject","get","path","res","on","chunk","JSON","parse","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;AACA,IAAIC,cAAcF,QAAQ,aAAR,CAAlB;;AAEA;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,QAAQD,QAAQE,oBAAhB,EAAsCH,SAASI,YAA/C,EACJC,IADI,CACEC,IAAD,IAAU;AACd;AACA;AACA,QAAIA,QAAQA,KAAKC,IAAL,IAAa,IAArB,IAA6BD,KAAKE,MAAL,IAAeR,SAASS,EAAzD,EAA6D;AAC3D;AACD;AACD,UAAM,IAAIZ,MAAMa,KAAV,CAAgBb,MAAMa,KAAN,CAAYC,gBAA5B,EAA8C,gDAA9C,CAAN;AACD,GARI,CAAP;AASD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASZ,OAAT,CAAiBa,IAAjB,EAAuBX,YAAvB,EAAqC;;AAEnC,MAAIY,oBAAoBlB,YAAYmB,SAAZ,CAAsB;AAC5C,oBAAgBb,YAD4B;AAE5C,sBAAkB,MAF0B,CAEnB;AAFmB,GAAtB,CAAxB;;AAKA,SAAO,IAAIS,OAAJ,CAAY,UAASC,OAAT,EAAkBI,MAAlB,EAA0B;AAC3CvB,UAAMwB,GAAN,CAAU;AACRJ,YAAMA,IADE;AAERK,YAAM,aAAaJ;AAFX,KAAV,EAGG,UAASK,GAAT,EAAc;AACf,UAAIf,OAAO,EAAX;AACAe,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7BjB,gBAAQiB,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAY;AACxBR,gBAAQU,KAAKC,KAAL,CAAWnB,IAAX,CAAR;AACD,OAFD;AAGD,KAXD,EAWGgB,EAXH,CAWM,OAXN,EAWe,YAAW;AACxBJ,aAAO,4DAAP;AACD,KAbD;AAcD,GAfM,CAAP;AAgBD;;AAEDQ,OAAOC,OAAP,GAAiB;AACff,iBAAeA,aADA;AAEfb,oBAAkBA;AAFH,CAAjB","file":"janraincapture.js","sourcesContent":["// Helper functions for accessing the Janrain Capture API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return request(options.janrain_capture_host, authData.access_token)\n    .then((data) => {\n      //successful response will have a \"stat\" (status) of 'ok' and a result node that stores the uuid, because that's all we asked for\n      //see: https://docs.janrain.com/api/registration/entity/#entity\n      if (data && data.stat == 'ok' && data.result == authData.id) {\n        return;\n      }\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Janrain capture auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(host, access_token) {\n\n  var query_string_data = querystring.stringify({\n    'access_token': access_token,\n    'attribute_name': 'uuid' // we only need to pull the uuid for this access token to make sure it matches\n  });\n\n  return new Promise(function(resolve, reject) {\n    https.get({\n      host: host,\n      path: '/entity?' + query_string_data\n    }, function(res) {\n      var data = '';\n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function () {\n        resolve(JSON.parse(data));\n      });\n    }).on('error', function() {\n      reject('Failed to validate this access token with Janrain capture.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}