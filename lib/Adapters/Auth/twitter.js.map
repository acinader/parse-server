{"version":3,"sources":["../../../src/Adapters/Auth/twitter.js"],"names":["OAuth","require","Parse","logger","default","validateAuthData","authData","options","Error","INTERNAL_SERVER_ERROR","handleMultipleConfigurations","client","host","auth_token","auth_token_secret","get","then","data","id_str","id","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","Array","isArray","consumer_key","error","filter","option","length","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,gBAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;AACA,IAAIC,SAASF,QAAQ,cAAR,EAAwBG,OAArC;;AAEA;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,MAAG,CAACA,OAAJ,EAAa;AACX,UAAM,IAAIL,MAAMM,KAAV,CAAgBN,MAAMM,KAAN,CAAYC,qBAA5B,EAAmD,oCAAnD,CAAN;AACD;AACDF,YAAUG,6BAA6BJ,QAA7B,EAAuCC,OAAvC,CAAV;AACA,MAAII,SAAS,IAAIX,KAAJ,CAAUO,OAAV,CAAb;AACAI,SAAOC,IAAP,GAAc,iBAAd;AACAD,SAAOE,UAAP,GAAoBP,SAASO,UAA7B;AACAF,SAAOG,iBAAP,GAA2BR,SAASQ,iBAApC;;AAEA,SAAOH,OAAOI,GAAP,CAAW,sCAAX,EAAmDC,IAAnD,CAAyDC,IAAD,IAAU;AACvE,QAAIA,QAAQA,KAAKC,MAAL,IAAe,KAAKZ,SAASa,EAAzC,EAA6C;AAC3C;AACD;AACD,UAAM,IAAIjB,MAAMM,KAAV,CACJN,MAAMM,KAAN,CAAYY,gBADR,EAEJ,wCAFI,CAAN;AAGD,GAPM,CAAP;AAQD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED,SAASb,4BAAT,CAAsCJ,QAAtC,EAAgDC,OAAhD,EAAyD;AACvD,MAAIiB,MAAMC,OAAN,CAAclB,OAAd,CAAJ,EAA4B;AAC1B,UAAMmB,eAAepB,SAASoB,YAA9B;AACA,QAAI,CAACA,YAAL,EAAmB;AACjBvB,aAAOwB,KAAP,CAAa,cAAb,EAA6B,2FAA7B;AACA,YAAM,IAAIzB,MAAMM,KAAV,CAAgBN,MAAMM,KAAN,CAAYY,gBAA5B,EAA8C,wCAA9C,CAAN;AACD;AACDb,cAAUA,QAAQqB,MAAR,CAAgBC,MAAD,IAAY;AACnC,aAAOA,OAAOH,YAAP,IAAuBA,YAA9B;AACD,KAFS,CAAV;;AAIA,QAAInB,QAAQuB,MAAR,IAAkB,CAAtB,EAAyB;AACvB3B,aAAOwB,KAAP,CAAa,cAAb,EAA4B,2DAA5B;AACA,YAAM,IAAIzB,MAAMM,KAAV,CAAgBN,MAAMM,KAAN,CAAYY,gBAA5B,EAA8C,wCAA9C,CAAN;AACD;AACDb,cAAUA,QAAQ,CAAR,CAAV;AACD;AACD,SAAOA,OAAP;AACD;;AAEDwB,OAAOC,OAAP,GAAiB;AACfX,eADe;AAEfhB,kBAFe;AAGfK;AAHe,CAAjB","file":"twitter.js","sourcesContent":["// Helper functions for accessing the twitter API.\nvar OAuth = require('./OAuth1Client');\nvar Parse = require('parse/node').Parse;\nvar logger = require('../../logger').default;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  if(!options) {\n    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Twitter auth configuration missing');\n  }\n  options = handleMultipleConfigurations(authData, options);\n  var client = new OAuth(options);\n  client.host = \"api.twitter.com\";\n  client.auth_token = authData.auth_token;\n  client.auth_token_secret = authData.auth_token_secret;\n\n  return client.get(\"/1.1/account/verify_credentials.json\").then((data) => {\n    if (data && data.id_str == '' + authData.id) {\n      return;\n    }\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Twitter auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nfunction handleMultipleConfigurations(authData, options) {\n  if (Array.isArray(options)) {\n    const consumer_key = authData.consumer_key;\n    if (!consumer_key) {\n      logger.error('Twitter Auth', 'Multiple twitter configurations are available, by no consumer_key was sent by the client.');\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Twitter auth is invalid for this user.');\n    }\n    options = options.filter((option) => {\n      return option.consumer_key == consumer_key;\n    });\n\n    if (options.length == 0) {\n      logger.error('Twitter Auth','Cannot find a configuration for the provided consumer_key');\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Twitter auth is invalid for this user.');\n    }\n    options = options[0];\n  }\n  return options;\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n  handleMultipleConfigurations\n};\n"]}