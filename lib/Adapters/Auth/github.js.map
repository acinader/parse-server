{"version":3,"sources":["../../../src/Adapters/Auth/github.js"],"names":["https","require","Parse","validateAuthData","authData","request","access_token","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","reject","get","host","headers","res","on","chunk","JSON","parse","e","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;;AAEA;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,QAAQ,MAAR,EAAgBD,SAASE,YAAzB,EACJC,IADI,CACEC,IAAD,IAAU;AACd,QAAIA,QAAQA,KAAKC,EAAL,IAAWL,SAASK,EAAhC,EAAoC;AAClC;AACD;AACD,UAAM,IAAIP,MAAMQ,KAAV,CACJR,MAAMQ,KAAN,CAAYC,gBADR,EAEJ,uCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAAST,OAAT,CAAiBU,IAAjB,EAAuBT,YAAvB,EAAqC;AACnC,SAAO,IAAIO,OAAJ,CAAY,UAASC,OAAT,EAAkBE,MAAlB,EAA0B;AAC3ChB,UAAMiB,GAAN,CAAU;AACRC,YAAM,gBADE;AAERH,YAAM,MAAMA,IAFJ;AAGRI,eAAS;AACP,yBAAiB,YAAYb,YADtB;AAEP,sBAAc;AAFP;AAHD,KAAV,EAOG,UAASc,GAAT,EAAc;AACf,UAAIZ,OAAO,EAAX;AACAY,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7Bd,gBAAQc,KAAR;AACD,OAFD;AAGAF,UAAIC,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,YAAI;AACFb,iBAAOe,KAAKC,KAAL,CAAWhB,IAAX,CAAP;AACD,SAFD,CAEE,OAAMiB,CAAN,EAAS;AACT,iBAAOT,OAAOS,CAAP,CAAP;AACD;AACDX,gBAAQN,IAAR;AACD,OAPD;AAQD,KApBD,EAoBGa,EApBH,CAoBM,OApBN,EAoBe,YAAW;AACxBL,aAAO,mDAAP;AACD,KAtBD;AAuBD,GAxBM,CAAP;AAyBD;;AAEDU,OAAOC,OAAP,GAAiB;AACff,iBAAeA,aADA;AAEfT,oBAAkBA;AAFH,CAAjB","file":"github.js","sourcesContent":["// Helper functions for accessing the github API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return request('user', authData.access_token)\n    .then((data) => {\n      if (data && data.id == authData.id) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Github auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  return new Promise(function(resolve, reject) {\n    https.get({\n      host: 'api.github.com',\n      path: '/' + path,\n      headers: {\n        'Authorization': 'bearer ' + access_token,\n        'User-Agent': 'parse-server'\n      }\n    }, function(res) {\n      var data = '';\n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function() {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    }).on('error', function() {\n      reject('Failed to validate this access token with Github.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}