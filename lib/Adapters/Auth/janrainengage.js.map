{"version":3,"sources":["../../../src/Adapters/Auth/janrainengage.js"],"names":["https","require","Parse","querystring","validateAuthData","authData","options","request","api_key","auth_token","then","data","stat","profile","identifier","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","post_data","stringify","post_options","host","path","method","headers","length","reject","post_req","res","setEncoding","on","d","JSON","parse","e","write","end","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;AACA,IAAIC,cAAcF,QAAQ,aAAR,CAAlB;;AAEA;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,QAAQD,QAAQE,OAAhB,EAAyBH,SAASI,UAAlC,EACJC,IADI,CACEC,IAAD,IAAU;AACd;AACA;AACA,QAAIA,QAAQA,KAAKC,IAAL,IAAa,IAArB,IAA6BD,KAAKE,OAAL,CAAaC,UAAb,IAA2BT,SAASU,EAArE,EAAyE;AACvE;AACD;AACD,UAAM,IAAIb,MAAMc,KAAV,CAAgBd,MAAMc,KAAN,CAAYC,gBAA5B,EAA8C,+CAA9C,CAAN;AACD,GARI,CAAP;AASD;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASb,OAAT,CAAiBC,OAAjB,EAA0BC,UAA1B,EAAsC;;AAEpC,MAAIY,YAAYlB,YAAYmB,SAAZ,CAAsB;AACpC,aAASb,UAD2B;AAEpC,cAAUD,OAF0B;AAGpC,cAAU;AAH0B,GAAtB,CAAhB;;AAMA,MAAIe,eAAe;AACjBC,UAAM,YADW;AAEjBC,UAAM,mBAFW;AAGjBC,YAAQ,MAHS;AAIjBC,aAAS;AACP,sBAAgB,mCADT;AAEP,wBAAkBN,UAAUO;AAFrB;AAJQ,GAAnB;;AAUA,SAAO,IAAIT,OAAJ,CAAY,UAAUC,OAAV,EAAmBS,MAAnB,EAA2B;AAC5C;AACA,QAAIC,WAAW9B,MAAMO,OAAN,CAAcgB,YAAd,EAA4B,UAAUQ,GAAV,EAAe;AACxD,UAAIpB,OAAO,EAAX;AACAoB,UAAIC,WAAJ,CAAgB,MAAhB;AACA;AACAD,UAAIE,EAAJ,CAAO,MAAP,EAAe,UAAUC,CAAV,EAAa;AAC1BvB,gBAAQuB,CAAR;AACD,OAFD;AAGA;AACAH,UAAIE,EAAJ,CAAO,KAAP,EAAc,YAAY;AACxB,YAAI;AACFtB,iBAAOwB,KAAKC,KAAL,CAAWzB,IAAX,CAAP;AACD,SAFD,CAEE,OAAM0B,CAAN,EAAS;AACT,iBAAOR,OAAOQ,CAAP,CAAP;AACD;AACDjB,gBAAQT,IAAR;AACD,OAPD;AAQD,KAhBc,CAAf;;AAkBAmB,aAASQ,KAAT,CAAejB,SAAf;AACAS,aAASS,GAAT;AACD,GAtBM,CAAP;AAuBD;;AAEDC,OAAOC,OAAP,GAAiB;AACfvB,iBAAeA,aADA;AAEfd,oBAAkBA;AAFH,CAAjB","file":"janrainengage.js","sourcesContent":["// Helper functions for accessing the Janrain Engage API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return request(options.api_key, authData.auth_token)\n    .then((data) => {\n      //successful response will have a \"stat\" (status) of 'ok' and a profile node with an identifier\n      //see: http://developers.janrain.com/overview/social-login/identity-providers/user-profile-data/#normalized-user-profile-data\n      if (data && data.stat == 'ok' && data.profile.identifier == authData.id) {\n        return;\n      }\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Janrain engage auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(api_key, auth_token) {\n\n  var post_data = querystring.stringify({\n    'token': auth_token,\n    'apiKey': api_key,\n    'format': 'json'\n  });\n\n  var post_options = {\n    host: 'rpxnow.com',\n    path: '/api/v2/auth_info',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': post_data.length\n    }\n  };\n\n  return new Promise(function (resolve, reject) {\n    // Create the post request.\n    var post_req = https.request(post_options, function (res) {\n      var data = '';\n      res.setEncoding('utf8');\n      // Append data as we receive it from the Janrain engage server.\n      res.on('data', function (d) {\n        data += d;\n      });\n      // Once we have all the data, we can parse it and return the data we want.\n      res.on('end', function () {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    });\n\n    post_req.write(post_data);\n    post_req.end();\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}