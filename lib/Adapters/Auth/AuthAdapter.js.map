{"version":3,"sources":["../../../src/Adapters/Auth/AuthAdapter.js"],"names":["AuthAdapter","validateAppId","appIds","authData","Promise","resolve","validateAuthData","options"],"mappings":";;;;;AAAA;AACO,MAAMA,WAAN,CAAkB;;AAEvB;;;;;AAKAC,gBAAcC,MAAd,EAAsBC,QAAtB,EAAgC;AAC9B,WAAOC,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED;;;;AAIAC,mBAAiBH,QAAjB,EAA2BI,OAA3B,EAAoC;AAClC,WAAOH,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;AAjBsB;;QAAZL,W,GAAAA,W;kBAoBEA,W","file":"AuthAdapter.js","sourcesContent":["/*eslint no-unused-vars: \"off\"*/\nexport class AuthAdapter {\n\n  /*\n  @param appIds: the specified app ids in the configuration\n  @param authData: the client provided authData\n  @returns a promise that resolves if the applicationId is valid\n   */\n  validateAppId(appIds, authData) {\n    return Promise.resolve({});\n  }\n\n  /*\n  @param authData: the client provided authData\n  @param options: additional options\n   */\n  validateAuthData(authData, options) {\n    return Promise.resolve({});\n  }\n}\n\nexport default AuthAdapter;\n"]}