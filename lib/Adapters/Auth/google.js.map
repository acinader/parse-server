{"version":3,"sources":["../../../src/Adapters/Auth/google.js"],"names":["https","require","Parse","validateIdToken","id","token","request","then","response","sub","user_id","Error","OBJECT_NOT_FOUND","validateAuthToken","validateAuthData","authData","id_token","access_token","validateAppId","Promise","resolve","path","reject","get","res","data","on","chunk","JSON","parse","e","module","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,YAAR,EAAsBC,KAAlC;;AAEA,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,KAA7B,EAAoC;AAClC,SAAOC,QAAQ,wBAAwBD,KAAhC,EACJE,IADI,CACEC,QAAD,IAAc;AAClB,QAAIA,aAAaA,SAASC,GAAT,IAAgBL,EAAhB,IAAsBI,SAASE,OAAT,IAAoBN,EAAvD,CAAJ,EAAgE;AAC9D;AACD;AACD,UAAM,IAAIF,MAAMS,KAAV,CACJT,MAAMS,KAAN,CAAYC,gBADR,EAEJ,uCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED,SAASC,iBAAT,CAA2BT,EAA3B,EAA+BC,KAA/B,EAAsC;AACpC,SAAOC,QAAQ,4BAA4BD,KAApC,EACJE,IADI,CACEC,QAAD,IAAc;AAClB,QAAIA,aAAcA,SAASC,GAAT,IAAgBL,EAAhB,IAAsBI,SAASE,OAAT,IAAoBN,EAAxD,CAAJ,EAAiE;AAC/D;AACD;AACD,UAAM,IAAIF,MAAMS,KAAV,CACJT,MAAMS,KAAN,CAAYC,gBADR,EAEJ,uCAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,MAAIA,SAASC,QAAb,EAAuB;AACrB,WAAOb,gBAAgBY,SAASX,EAAzB,EAA6BW,SAASC,QAAtC,CAAP;AACD,GAFD,MAEO;AACL,WAAOH,kBAAkBE,SAASX,EAA3B,EAA+BW,SAASE,YAAxC,EAAsDV,IAAtD,CAA2D,MAAM;AACtE;AACA;AACD,KAHM,EAGJ,MAAM;AACP;AACA,aAAOJ,gBAAgBY,SAASX,EAAzB,EAA6BW,SAASE,YAAtC,CAAP;AACD,KANM,CAAP;AAOD;AACF;;AAED;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,QAAQC,OAAR,EAAP;AACD;;AAED;AACA,SAASd,OAAT,CAAiBe,IAAjB,EAAuB;AACrB,SAAO,IAAIF,OAAJ,CAAY,UAASC,OAAT,EAAkBE,MAAlB,EAA0B;AAC3CtB,UAAMuB,GAAN,CAAU,0CAA0CF,IAApD,EAA0D,UAASG,GAAT,EAAc;AACtE,UAAIC,OAAO,EAAX;AACAD,UAAIE,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7BF,gBAAQE,KAAR;AACD,OAFD;AAGAH,UAAIE,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,YAAI;AACFD,iBAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACD,SAFD,CAEE,OAAMK,CAAN,EAAS;AACT,iBAAOR,OAAOQ,CAAP,CAAP;AACD;AACDV,gBAAQK,IAAR;AACD,OAPD;AAQD,KAbD,EAaGC,EAbH,CAaM,OAbN,EAae,YAAW;AACxBJ,aAAO,mDAAP;AACD,KAfD;AAgBD,GAjBM,CAAP;AAkBD;;AAEDS,OAAOC,OAAP,GAAiB;AACfd,iBAAeA,aADA;AAEfJ,oBAAkBA;AAFH,CAAjB","file":"google.js","sourcesContent":["// Helper functions for accessing the google API.\nvar https = require('https');\nvar Parse = require('parse/node').Parse;\n\nfunction validateIdToken(id, token) {\n  return request(\"tokeninfo?id_token=\" + token)\n    .then((response) => {\n      if (response && (response.sub == id || response.user_id == id)) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Google auth is invalid for this user.');\n    });\n}\n\nfunction validateAuthToken(id, token) {\n  return request(\"tokeninfo?access_token=\" + token)\n    .then((response) => {\n      if (response &&  (response.sub == id || response.user_id == id)) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Google auth is invalid for this user.');\n    });\n}\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData) {\n  if (authData.id_token) {\n    return validateIdToken(authData.id, authData.id_token);\n  } else {\n    return validateAuthToken(authData.id, authData.access_token).then(() => {\n      // Validation with auth token worked\n      return;\n    }, () => {\n      // Try with the id_token param\n      return validateIdToken(authData.id, authData.access_token);\n    });\n  }\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path) {\n  return new Promise(function(resolve, reject) {\n    https.get(\"https://www.googleapis.com/oauth2/v3/\" + path, function(res) {\n      var data = '';\n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function() {\n        try {\n          data = JSON.parse(data);\n        } catch(e) {\n          return reject(e);\n        }\n        resolve(data);\n      });\n    }).on('error', function() {\n      reject('Failed to validate this access token with Google.');\n    });\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData\n};\n"]}