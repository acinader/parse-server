{"version":3,"sources":["../../../src/Adapters/Auth/facebookaccountkit.js"],"names":["crypto","require","https","Parse","graphRequest","path","Promise","resolve","reject","get","res","data","on","chunk","JSON","parse","error","e","getRequestPath","authData","options","access_token","appSecret","appsecret_proof","createHmac","update","digest","validateAppId","appIds","length","Error","OBJECT_NOT_FOUND","then","application","indexOf","id","validateAuthData","module","exports"],"mappings":";;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,QAASF,QAAQ,YAAR,EAAsBE,KAArC;;AAEA,MAAMC,eAAgBC,IAAD,IAAU;AAC7B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,UAAMO,GAAN,CAAW,qCAAoCJ,IAAK,EAApD,EAAwDK,GAAD,IAAS;AAC9D,UAAIC,OAAO,EAAX;AACAD,UAAIE,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AACxBF,gBAAQE,KAAR;AACD,OAFD;AAGAH,UAAIE,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClB,YAAI;AACFD,iBAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACA,cAAIA,KAAKK,KAAT,EAAgB;AACd;AACA;AACAR,mBAAOG,KAAKK,KAAZ;AACD,WAJD,MAIO;AACLT,oBAAQI,IAAR;AACD;AACF,SATD,CASE,OAAOM,CAAP,EAAU;AACVT,iBAAOS,CAAP;AACD;AACF,OAbD;AAcD,KAnBD,EAmBGL,EAnBH,CAmBM,OAnBN,EAmBe,YAAY;AACzBJ,aAAO,iEAAP;AACD,KArBD;AAsBD,GAvBM,CAAP;AAwBD,CAzBD;;AA2BA,SAASU,cAAT,CAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AACzC,QAAMC,eAAeF,SAASE,YAA9B;AAAA,QAA4CC,YAAYF,WAAWA,QAAQE,SAA3E;AACA,MAAIA,SAAJ,EAAe;AACb,UAAMC,kBAAkBvB,OAAOwB,UAAP,CAAkB,QAAlB,EAA4BF,SAA5B,EAAuCG,MAAvC,CAA8CJ,YAA9C,EAA4DK,MAA5D,CAAmE,KAAnE,CAAxB;AACA,WAAQ,mBAAkBL,YAAa,oBAAmBE,eAAgB,EAA1E;AACD;AACD,SAAQ,mBAAkBF,YAAa,EAAvC;AACD;;AAED,SAASM,aAAT,CAAuBC,MAAvB,EAA+BT,QAA/B,EAAyCC,OAAzC,EAAkD;AAChD,MAAI,CAACQ,OAAOC,MAAZ,EAAoB;AAClB,WAAOvB,QAAQE,MAAR,CACL,IAAIL,MAAM2B,KAAV,CACE3B,MAAM2B,KAAN,CAAYC,gBADd,EAEE,oDAFF,CADK,CAAP;AAKD;AACD,SAAO3B,aAAac,eAAeC,QAAf,EAAyBC,OAAzB,CAAb,EACJY,IADI,CACCrB,QAAQ;AACZ,QAAIA,QAAQA,KAAKsB,WAAb,IAA4BL,OAAOM,OAAP,CAAevB,KAAKsB,WAAL,CAAiBE,EAAhC,KAAuC,CAAC,CAAxE,EAA2E;AACzE;AACD;AACD,UAAM,IAAIhC,MAAM2B,KAAV,CACJ3B,MAAM2B,KAAN,CAAYC,gBADR,EAEJ,2DAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAED,SAASK,gBAAT,CAA0BjB,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOhB,aAAac,eAAeC,QAAf,EAAyBC,OAAzB,CAAb,EACJY,IADI,CACCrB,QAAQ;AACZ,QAAIA,QAAQA,KAAKwB,EAAL,IAAWhB,SAASgB,EAAhC,EAAoC;AAClC;AACD;AACD,UAAM,IAAIhC,MAAM2B,KAAV,CACJ3B,MAAM2B,KAAN,CAAYC,gBADR,EAEJ,qDAFI,CAAN;AAGD,GARI,CAAP;AASD;;AAEDM,OAAOC,OAAP,GAAiB;AACfX,eADe;AAEfS;AAFe,CAAjB","file":"facebookaccountkit.js","sourcesContent":["const crypto = require('crypto');\nconst https = require('https');\nconst Parse  = require('parse/node').Parse;\n\nconst graphRequest = (path) => {\n  return new Promise((resolve, reject) => {\n    https.get(`https://graph.accountkit.com/v1.1/${path}`, (res) => {\n      var data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          data = JSON.parse(data);\n          if (data.error) {\n            // when something wrong with fb graph request (token corrupted etc.)\n            // instead of network issue\n            reject(data.error);\n          } else {\n            resolve(data);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }).on('error', function () {\n      reject('Failed to validate this access token with Facebook Account Kit.');\n    });\n  });\n};\n\nfunction getRequestPath(authData, options) {\n  const access_token = authData.access_token, appSecret = options && options.appSecret;\n  if (appSecret) {\n    const appsecret_proof = crypto.createHmac(\"sha256\", appSecret).update(access_token).digest('hex');\n    return `me?access_token=${access_token}&appsecret_proof=${appsecret_proof}`\n  }\n  return `me?access_token=${access_token}`;\n}\n\nfunction validateAppId(appIds, authData, options) {\n  if (!appIds.length) {\n    return Promise.reject(\n      new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Facebook app id for Account Kit is not configured.')\n    )\n  }\n  return graphRequest(getRequestPath(authData, options))\n    .then(data => {\n      if (data && data.application && appIds.indexOf(data.application.id) != -1) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Facebook app id for Account Kit is invalid for this user.');\n    })\n}\n\nfunction validateAuthData(authData, options) {\n  return graphRequest(getRequestPath(authData, options))\n    .then(data => {\n      if (data && data.id == authData.id) {\n        return;\n      }\n      throw new Parse.Error(\n        Parse.Error.OBJECT_NOT_FOUND,\n        'Facebook Account Kit auth is invalid for this user.');\n    })\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData\n};\n"]}