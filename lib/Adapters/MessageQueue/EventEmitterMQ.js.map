{"version":3,"sources":["../../../src/Adapters/MessageQueue/EventEmitterMQ.js"],"names":["emitter","events","EventEmitter","subscriptions","Map","unsubscribe","channel","has","removeListener","get","delete","Publisher","constructor","publish","message","emit","Consumer","subscribe","handler","set","on","createPublisher","createSubscriber","EventEmitterMQ"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,UAAU,IAAIC,iBAAOC,YAAX,EAAhB;AACA,MAAMC,gBAAgB,IAAIC,GAAJ,EAAtB;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAAsC;AACpC,MAAI,CAACH,cAAcI,GAAd,CAAkBD,OAAlB,CAAL,EAAiC;AAC/B;AACA;AACD;AACD;AACAN,UAAQQ,cAAR,CAAuBF,OAAvB,EAAgCH,cAAcM,GAAd,CAAkBH,OAAlB,CAAhC;AACAH,gBAAcO,MAAd,CAAqBJ,OAArB;AACD;;AAED,MAAMK,SAAN,CAAgB;;AAGdC,cAAYZ,OAAZ,EAA0B;AACxB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDa,UAAQP,OAAR,EAAyBQ,OAAzB,EAAgD;AAC9C,SAAKd,OAAL,CAAae,IAAb,CAAkBT,OAAlB,EAA2BQ,OAA3B;AACD;AATa;;AAYhB,MAAME,QAAN,SAAuBf,iBAAOC,YAA9B,CAA2C;;AAGzCU,cAAYZ,OAAZ,EAA0B;AACxB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDiB,YAAUX,OAAV,EAAiC;AAC/BD,gBAAYC,OAAZ;AACA,UAAMY,UAAWJ,OAAD,IAAa;AAC3B,WAAKC,IAAL,CAAU,SAAV,EAAqBT,OAArB,EAA8BQ,OAA9B;AACD,KAFD;AAGAX,kBAAcgB,GAAd,CAAkBb,OAAlB,EAA2BY,OAA3B;AACA,SAAKlB,OAAL,CAAaoB,EAAb,CAAgBd,OAAhB,EAAyBY,OAAzB;AACD;;AAEDb,cAAYC,OAAZ,EAAmC;AACjCD,gBAAYC,OAAZ;AACD;AAnBwC;;AAsB3C,SAASe,eAAT,GAAgC;AAC9B,SAAO,IAAIV,SAAJ,CAAcX,OAAd,CAAP;AACD;;AAED,SAASsB,gBAAT,GAAiC;AAC/B,SAAO,IAAIN,QAAJ,CAAahB,OAAb,CAAP;AACD;;AAED,MAAMuB,iBAAiB;AACrBF,iBADqB;AAErBC;AAFqB,CAAvB;;QAMEC,c,GAAAA,c","file":"EventEmitterMQ.js","sourcesContent":["import events from 'events';\n\nconst emitter = new events.EventEmitter();\nconst subscriptions = new Map();\n\nfunction unsubscribe(channel: string) {\n  if (!subscriptions.has(channel)) {\n    //console.log('No channel to unsub from');\n    return;\n  }\n  //console.log('unsub ', channel);\n  emitter.removeListener(channel, subscriptions.get(channel));\n  subscriptions.delete(channel);\n}\n\nclass Publisher {\n  emitter: any;\n\n  constructor(emitter: any) {\n    this.emitter = emitter;\n  }\n\n  publish(channel: string, message: string): void {\n    this.emitter.emit(channel, message);\n  }\n}\n\nclass Consumer extends events.EventEmitter {\n  emitter: any;\n\n  constructor(emitter: any) {\n    super();\n    this.emitter = emitter;\n  }\n\n  subscribe(channel: string): void {\n    unsubscribe(channel);\n    const handler = (message) => {\n      this.emit('message', channel, message);\n    }\n    subscriptions.set(channel, handler);\n    this.emitter.on(channel, handler);\n  }\n\n  unsubscribe(channel: string): void {\n    unsubscribe(channel);\n  }\n}\n\nfunction createPublisher(): any {\n  return new Publisher(emitter);\n}\n\nfunction createSubscriber(): any {\n  return new Consumer(emitter);\n}\n\nconst EventEmitterMQ = {\n  createPublisher,\n  createSubscriber\n}\n\nexport {\n  EventEmitterMQ\n}\n"]}