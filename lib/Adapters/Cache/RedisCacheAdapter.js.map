{"version":3,"sources":["../../../src/Adapters/Cache/RedisCacheAdapter.js"],"names":["DEFAULT_REDIS_TTL","debug","logger","apply","arguments","RedisCacheAdapter","constructor","redisCtx","ttl","client","redis","createClient","p","Promise","resolve","get","key","then","err","res","JSON","parse","put","value","stringify","isNaN","Infinity","set","psetex","del","clear","flushdb"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,oBAAoB,KAAK,IAA/B,C,CAAqC;;AAErC,SAASC,KAAT,GAAiB;AACfC,mBAAOD,KAAP,CAAaE,KAAb,CAAmBD,gBAAnB,EAA2B,CAAC,mBAAD,EAAsB,GAAGE,SAAzB,CAA3B;AACD;;AAEM,MAAMC,iBAAN,CAAwB;;AAE7BC,cAAYC,QAAZ,EAAsBC,MAAMR,iBAA5B,EAA+C;AAC7C,SAAKS,MAAL,GAAcC,gBAAMC,YAAN,CAAmBJ,QAAnB,CAAd;AACA,SAAKK,CAAL,GAASC,QAAQC,OAAR,EAAT;AACA,SAAKN,GAAL,GAAWA,GAAX;AACD;;AAEDO,MAAIC,GAAJ,EAAS;AACPf,UAAM,KAAN,EAAae,GAAb;AACA,SAAKJ,CAAL,GAAS,KAAKA,CAAL,CAAOK,IAAP,CAAY,MAAM;AACzB,aAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,aAAKL,MAAL,CAAYM,GAAZ,CAAgBC,GAAhB,EAAqB,UAASE,GAAT,EAAcC,GAAd,EAAmB;AACtClB,gBAAM,QAAN,EAAgBe,GAAhB,EAAqBG,GAArB;AACA,cAAG,CAACA,GAAJ,EAAS;AACP,mBAAOL,QAAQ,IAAR,CAAP;AACD;AACDA,kBAAQM,KAAKC,KAAL,CAAWF,GAAX,CAAR;AACD,SAND;AAOD,OARM,CAAP;AASD,KAVQ,CAAT;AAWA,WAAO,KAAKP,CAAZ;AACD;;AAEDU,MAAIN,GAAJ,EAASO,KAAT,EAAgBf,MAAM,KAAKA,GAA3B,EAAgC;AAC9Be,YAAQH,KAAKI,SAAL,CAAeD,KAAf,CAAR;AACAtB,UAAM,KAAN,EAAae,GAAb,EAAkBO,KAAlB,EAAyBf,GAAzB;AACA,QAAIA,QAAQ,CAAZ,EAAe;AACb,aAAO,KAAKI,CAAZ,CADa,CACE;AAChB;AACD,QAAIJ,MAAM,CAAN,IAAWiB,MAAMjB,GAAN,CAAf,EAA2B;AACzBA,YAAMR,iBAAN;AACD;AACD,SAAKY,CAAL,GAAS,KAAKA,CAAL,CAAOK,IAAP,CAAY,MAAM;AACzB,aAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,YAAIN,QAAQkB,QAAZ,EAAsB;AACpB,eAAKjB,MAAL,CAAYkB,GAAZ,CAAgBX,GAAhB,EAAqBO,KAArB,EAA4B,YAAW;AACrCT;AACD,WAFD;AAGD,SAJD,MAIO;AACL,eAAKL,MAAL,CAAYmB,MAAZ,CAAmBZ,GAAnB,EAAwBR,GAAxB,EAA6Be,KAA7B,EAAoC,YAAW;AAC7CT;AACD,WAFD;AAGD;AACF,OAVM,CAAP;AAWD,KAZQ,CAAT;AAaA,WAAO,KAAKF,CAAZ;AACD;;AAEDiB,MAAIb,GAAJ,EAAS;AACPf,UAAM,KAAN,EAAae,GAAb;AACA,SAAKJ,CAAL,GAAS,KAAKA,CAAL,CAAOK,IAAP,CAAY,MAAM;AACzB,aAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,aAAKL,MAAL,CAAYoB,GAAZ,CAAgBb,GAAhB,EAAqB,YAAW;AAC9BF;AACD,SAFD;AAGD,OAJM,CAAP;AAKD,KANQ,CAAT;AAOA,WAAO,KAAKF,CAAZ;AACD;;AAEDkB,UAAQ;AACN7B,UAAM,OAAN;AACA,SAAKW,CAAL,GAAS,KAAKA,CAAL,CAAOK,IAAP,CAAY,MAAM;AACzB,aAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,aAAKL,MAAL,CAAYsB,OAAZ,CAAoB,YAAW;AAC7BjB;AACD,SAFD;AAGD,OAJM,CAAP;AAKD,KANQ,CAAT;AAOA,WAAO,KAAKF,CAAZ;AACD;AAvE4B;;QAAlBP,iB,GAAAA,iB;kBA0EEA,iB","file":"RedisCacheAdapter.js","sourcesContent":["import redis from 'redis';\nimport logger from '../../logger';\n\nconst DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds\n\nfunction debug() {\n  logger.debug.apply(logger, ['RedisCacheAdapter', ...arguments]);\n}\n\nexport class RedisCacheAdapter {\n\n  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {\n    this.client = redis.createClient(redisCtx);\n    this.p = Promise.resolve();\n    this.ttl = ttl;\n  }\n\n  get(key) {\n    debug('get', key);\n    this.p = this.p.then(() => {\n      return new Promise((resolve) => {\n        this.client.get(key, function(err, res) {\n          debug('-> get', key, res);\n          if(!res) {\n            return resolve(null);\n          }\n          resolve(JSON.parse(res));\n        });\n      });\n    });\n    return this.p;\n  }\n\n  put(key, value, ttl = this.ttl) {\n    value = JSON.stringify(value);\n    debug('put', key, value, ttl);\n    if (ttl === 0) {\n      return this.p; // ttl of zero is a logical no-op, but redis cannot set expire time of zero\n    }\n    if (ttl < 0 || isNaN(ttl)) {\n      ttl = DEFAULT_REDIS_TTL;\n    }\n    this.p = this.p.then(() => {\n      return new Promise((resolve) => {\n        if (ttl === Infinity) {\n          this.client.set(key, value, function() {\n            resolve();\n          });\n        } else {\n          this.client.psetex(key, ttl, value, function() {\n            resolve();\n          });\n        }\n      });\n    });\n    return this.p;\n  }\n\n  del(key) {\n    debug('del', key);\n    this.p = this.p.then(() => {\n      return new Promise((resolve) => {\n        this.client.del(key, function() {\n          resolve();\n        });\n      });\n    });\n    return this.p;\n  }\n\n  clear() {\n    debug('clear');\n    this.p = this.p.then(() => {\n      return new Promise((resolve) => {\n        this.client.flushdb(function() {\n          resolve();\n        });\n      });\n    });\n    return this.p;\n  }\n}\n\nexport default RedisCacheAdapter;\n"]}