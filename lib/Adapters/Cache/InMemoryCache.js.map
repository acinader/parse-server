{"version":3,"sources":["../../../src/Adapters/Cache/InMemoryCache.js"],"names":["DEFAULT_CACHE_TTL","InMemoryCache","constructor","ttl","cache","Object","create","get","key","record","isNaN","expire","Date","now","value","put","NaN","timeout","setTimeout","del","clearTimeout","clear"],"mappings":";;;;;AAAA,MAAMA,oBAAoB,IAAI,IAA9B;;AAGO,MAAMC,aAAN,CAAoB;AACzBC,cAAY;AACVC,UAAMH;AADI,GAAZ,EAEG;AACD,SAAKG,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaC,OAAOC,MAAP,CAAc,IAAd,CAAb;AACD;;AAEDC,MAAIC,GAAJ,EAAS;AACP,UAAMC,SAAS,KAAKL,KAAL,CAAWI,GAAX,CAAf;AACA,QAAIC,UAAU,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED;AACA,QAAIC,MAAMD,OAAOE,MAAb,KAAwBF,OAAOE,MAAP,IAAiBC,KAAKC,GAAL,EAA7C,EAAyD;AACvD,aAAOJ,OAAOK,KAAd;AACD;;AAED;AACA,WAAO,KAAKV,KAAL,CAAWI,GAAX,CAAP;AACA,WAAO,IAAP;AACD;;AAEDO,MAAIP,GAAJ,EAASM,KAAT,EAAgBX,MAAM,KAAKA,GAA3B,EAAgC;AAC9B,QAAIA,MAAM,CAAN,IAAWO,MAAMP,GAAN,CAAf,EAA2B;AACzBA,YAAMa,GAAN;AACD;;AAED,QAAIP,SAAS;AACXK,aAAOA,KADI;AAEXH,cAAQR,MAAMS,KAAKC,GAAL;AAFH,KAAb;;AAKA,QAAI,CAACH,MAAMD,OAAOE,MAAb,CAAL,EAA2B;AACzBF,aAAOQ,OAAP,GAAiBC,WAAW,MAAM;AAChC,aAAKC,GAAL,CAASX,GAAT;AACD,OAFgB,EAEdL,GAFc,CAAjB;AAGD;;AAED,SAAKC,KAAL,CAAWI,GAAX,IAAkBC,MAAlB;AACD;;AAEDU,MAAIX,GAAJ,EAAS;AACP,QAAIC,SAAS,KAAKL,KAAL,CAAWI,GAAX,CAAb;AACA,QAAIC,UAAU,IAAd,EAAoB;AAClB;AACD;;AAED,QAAIA,OAAOQ,OAAX,EAAoB;AAClBG,mBAAaX,OAAOQ,OAApB;AACD;AACD,WAAO,KAAKb,KAAL,CAAWI,GAAX,CAAP;AACD;;AAEDa,UAAQ;AACN,SAAKjB,KAAL,GAAaC,OAAOC,MAAP,CAAc,IAAd,CAAb;AACD;;AAzDwB;;QAAdL,a,GAAAA,a;kBA6DEA,a","file":"InMemoryCache.js","sourcesContent":["const DEFAULT_CACHE_TTL = 5 * 1000;\n\n\nexport class InMemoryCache {\n  constructor({\n    ttl = DEFAULT_CACHE_TTL\n  }) {\n    this.ttl = ttl;\n    this.cache = Object.create(null);\n  }\n\n  get(key) {\n    const record = this.cache[key];\n    if (record == null) {\n      return null;\n    }\n\n    // Has Record and isnt expired\n    if (isNaN(record.expire) || record.expire >= Date.now()) {\n      return record.value;\n    }\n\n    // Record has expired\n    delete this.cache[key];\n    return null;\n  }\n\n  put(key, value, ttl = this.ttl) {\n    if (ttl < 0 || isNaN(ttl)) {\n      ttl = NaN;\n    }\n\n    var record = {\n      value: value,\n      expire: ttl + Date.now()\n    }\n\n    if (!isNaN(record.expire)) {\n      record.timeout = setTimeout(() => {\n        this.del(key);\n      }, ttl);\n    }\n\n    this.cache[key] = record;\n  }\n\n  del(key) {\n    var record = this.cache[key];\n    if (record == null) {\n      return;\n    }\n\n    if (record.timeout) {\n      clearTimeout(record.timeout);\n    }\n    delete this.cache[key];\n  }\n\n  clear() {\n    this.cache = Object.create(null);\n  }\n\n}\n\nexport default InMemoryCache;\n"]}