{"version":3,"sources":["../../../src/Adapters/Files/GridStoreAdapter.js"],"names":["GridStoreAdapter","FilesAdapter","constructor","mongoDatabaseURI","defaults","DefaultMongoURI","_databaseURI","_connect","_connectionPromise","MongoClient","connect","then","client","db","s","options","dbName","createFile","filename","data","database","gridStore","GridStore","open","write","close","deleteFile","unlink","getFileData","exist","read","getFileLocation","config","mount","applicationId","encodeURIComponent","getFileStream"],"mappings":";;;;;;;AASA;;AACA;;AACA;;;;;;AAEO,MAAMA,gBAAN,SAA+BC,0BAA/B,CAA4C;;AAIjDC,cAAYC,mBAAmBC,mBAASC,eAAxC,EAAyD;AACvD;AACA,SAAKC,YAAL,GAAoBH,gBAApB;AACD;;AAEDI,aAAW;AACT,QAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC5B,WAAKA,kBAAL,GAA0BC,qBAAYC,OAAZ,CAAoB,KAAKJ,YAAzB,EACvBK,IADuB,CACjBC,MAAD,IAAYA,OAAOC,EAAP,CAAUD,OAAOE,CAAP,CAASC,OAAT,CAAiBC,MAA3B,CADM,CAA1B;AAED;AACD,WAAO,KAAKR,kBAAZ;AACD;;AAED;AACA;AACAS,aAAWC,QAAX,EAA6BC,IAA7B,EAAmC;AACjC,WAAO,KAAKZ,QAAL,GAAgBI,IAAhB,CAAsBS,QAAD,IAAc;AACxC,YAAMC,YAAY,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,aAAOG,UAAUE,IAAV,EAAP;AACD,KAHM,EAGJZ,IAHI,CAGCU,aAAa;AACnB,aAAOA,UAAUG,KAAV,CAAgBL,IAAhB,CAAP;AACD,KALM,EAKJR,IALI,CAKCU,aAAa;AACnB,aAAOA,UAAUI,KAAV,EAAP;AACD,KAPM,CAAP;AAQD;;AAEDC,aAAWR,QAAX,EAA6B;AAC3B,WAAO,KAAKX,QAAL,GAAgBI,IAAhB,CAAqBS,YAAY;AACtC,YAAMC,YAAY,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,aAAOG,UAAUE,IAAV,EAAP;AACD,KAHM,EAGJZ,IAHI,CAGEU,SAAD,IAAe;AACrB,aAAOA,UAAUM,MAAV,EAAP;AACD,KALM,EAKJhB,IALI,CAKEU,SAAD,IAAe;AACrB,aAAOA,UAAUI,KAAV,EAAP;AACD,KAPM,CAAP;AAQD;;AAEDG,cAAYV,QAAZ,EAA8B;AAC5B,WAAO,KAAKX,QAAL,GAAgBI,IAAhB,CAAqBS,YAAY;AACtC,aAAOE,mBAAUO,KAAV,CAAgBT,QAAhB,EAA0BF,QAA1B,EACJP,IADI,CACC,MAAM;AACV,cAAMU,YAAY,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,eAAOG,UAAUE,IAAV,EAAP;AACD,OAJI,CAAP;AAKD,KANM,EAMJZ,IANI,CAMCU,aAAa;AACnB,aAAOA,UAAUS,IAAV,EAAP;AACD,KARM,CAAP;AASD;;AAEDC,kBAAgBC,MAAhB,EAAwBd,QAAxB,EAAkC;AAChC,WAAQc,OAAOC,KAAP,GAAe,SAAf,GAA2BD,OAAOE,aAAlC,GAAkD,GAAlD,GAAwDC,mBAAmBjB,QAAnB,CAAhE;AACD;;AAEDkB,gBAAclB,QAAd,EAAgC;AAC9B,WAAO,KAAKX,QAAL,GAAgBI,IAAhB,CAAqBS,YAAY;AACtC,aAAOE,mBAAUO,KAAV,CAAgBT,QAAhB,EAA0BF,QAA1B,EAAoCP,IAApC,CAAyC,MAAM;AACpD,cAAMU,YAAY,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,eAAOG,UAAUE,IAAV,EAAP;AACD,OAHM,CAAP;AAID,KALM,CAAP;AAMD;AAhEgD;;QAAtCvB,gB,GAAAA,gB,EAbb;;;;;;;;AAQA;;kBAwEeA,gB","file":"GridStoreAdapter.js","sourcesContent":["/**\n GridStoreAdapter\n Stores files in Mongo using GridStore\n Requires the database adapter to be based on mongoclient\n\n @flow weak\n */\n\n// @flow-disable-next\nimport { MongoClient, GridStore, Db} from 'mongodb';\nimport { FilesAdapter }              from './FilesAdapter';\nimport defaults                      from '../../defaults';\n\nexport class GridStoreAdapter extends FilesAdapter {\n  _databaseURI: string;\n  _connectionPromise: Promise<Db>;\n\n  constructor(mongoDatabaseURI = defaults.DefaultMongoURI) {\n    super();\n    this._databaseURI = mongoDatabaseURI;\n  }\n\n  _connect() {\n    if (!this._connectionPromise) {\n      this._connectionPromise = MongoClient.connect(this._databaseURI)\n        .then((client) => client.db(client.s.options.dbName));\n    }\n    return this._connectionPromise;\n  }\n\n  // For a given config object, filename, and data, store a file\n  // Returns a promise\n  createFile(filename: string, data) {\n    return this._connect().then((database) => {\n      const gridStore = new GridStore(database, filename, 'w');\n      return gridStore.open();\n    }).then(gridStore => {\n      return gridStore.write(data);\n    }).then(gridStore => {\n      return gridStore.close();\n    });\n  }\n\n  deleteFile(filename: string) {\n    return this._connect().then(database => {\n      const gridStore = new GridStore(database, filename, 'r');\n      return gridStore.open();\n    }).then((gridStore) => {\n      return gridStore.unlink();\n    }).then((gridStore) => {\n      return gridStore.close();\n    });\n  }\n\n  getFileData(filename: string) {\n    return this._connect().then(database => {\n      return GridStore.exist(database, filename)\n        .then(() => {\n          const gridStore = new GridStore(database, filename, 'r');\n          return gridStore.open();\n        });\n    }).then(gridStore => {\n      return gridStore.read();\n    });\n  }\n\n  getFileLocation(config, filename) {\n    return (config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename));\n  }\n\n  getFileStream(filename: string) {\n    return this._connect().then(database => {\n      return GridStore.exist(database, filename).then(() => {\n        const gridStore = new GridStore(database, filename, 'r');\n        return gridStore.open();\n      });\n    });\n  }\n}\n\nexport default GridStoreAdapter;\n"]}