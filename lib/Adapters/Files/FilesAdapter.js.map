{"version":3,"sources":["../../../src/Adapters/Files/FilesAdapter.js"],"names":["FilesAdapter","createFile","filename","data","contentType","deleteFile","getFileData","getFileLocation","config"],"mappings":";;;;;AAiBO,MAAMA,YAAN,CAAmB;;AAExB;;;;;;;;;AASAC,aAAWC,QAAX,EAA6BC,IAA7B,EAAmCC,WAAnC,EAAiE,CAAG;;AAEpE;;;;;;AAMAC,aAAWH,QAAX,EAAsC,CAAG;;AAEzC;;;;;;AAMAI,cAAYJ,QAAZ,EAA4C,CAAG;;AAE/C;;;;;;;AAOAK,kBAAgBC,MAAhB,EAAgCN,QAAhC,EAA0D,CAAG;AApCrC;;QAAbF,Y,GAAAA,Y,EAjBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBA2CeA,Y","file":"FilesAdapter.js","sourcesContent":["/*eslint no-unused-vars: \"off\"*/\n// Files Adapter\n//\n// Allows you to change the file storage mechanism.\n//\n// Adapter classes must implement the following functions:\n// * createFile(filename, data, contentType)\n// * deleteFile(filename)\n// * getFileData(filename)\n// * getFileLocation(config, filename)\n//\n// Default is GridStoreAdapter, which requires mongo\n// and for the API server to be using the DatabaseController with Mongo\n// database adapter.\n\nimport type { Config } from '../../Config'\n\nexport class FilesAdapter {\n\n  /* Responsible for storing the file in order to be retrieved later by its filename\n   *\n   * @param {string} filename - the filename to save\n   * @param {*} data - the buffer of data from the file\n   * @param {string} contentType - the supposed contentType\n   * @discussion the contentType can be undefined if the controller was not able to determine it\n   *\n   * @return {Promise} a promise that should fail if the storage didn't succeed\n   */\n  createFile(filename: string, data, contentType: string): Promise { }\n\n  /* Responsible for deleting the specified file\n   *\n   * @param {string} filename - the filename to delete\n   *\n   * @return {Promise} a promise that should fail if the deletion didn't succeed\n   */\n  deleteFile(filename: string): Promise { }\n\n  /* Responsible for retrieving the data of the specified file\n   *\n   * @param {string} filename - the name of file to retrieve\n   *\n   * @return {Promise} a promise that should pass with the file data or fail on error\n   */\n  getFileData(filename: string): Promise<any> { }\n\n  /* Returns an absolute URL where the file can be accessed\n   *\n   * @param {Config} config - server configuration\n   * @param {string} filename\n   *\n   * @return {string} Absolute URL\n   */\n  getFileLocation(config: Config, filename: string): string { }\n}\n\nexport default FilesAdapter;\n"]}