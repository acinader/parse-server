{"version":3,"sources":["../../src/vendor/mongodbUrl.js"],"names":["punycode","require","exports","parse","urlParse","resolve","urlResolve","resolveObject","urlResolveObject","format","urlFormat","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","simplePathPattern","hostnameMaxLen","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","url","parseQueryString","slashesDenoteHost","u","prototype","TypeError","hasHash","start","end","rest","lastPos","i","inWs","split","length","code","charCodeAt","isWs","slice","simplePath","exec","proto","lowerProto","toLowerCase","test","hostEnd","atSign","nonHost","decodeURIComponent","parseHost","ipv6Hostname","result","validateHostname","undefined","toASCII","p","h","autoEscapeStr","questionIdx","hashIdx","firstIdx","s","self","newRest","obj","call","encodeAuth","indexOf","stringify","newPathname","replace","source","relative","rel","tkeys","Object","keys","tk","tkey","rkeys","rk","rkey","v","k","relPath","shift","unshift","join","isSourceAbs","charAt","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","concat","authInHost","last","hasTrailingSlash","up","spliceOne","substr","push","isAbsolute","list","index","n","hexTable","Array","toString","toUpperCase","str","out","c","c2"],"mappings":"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","file":"mongodbUrl.js","sourcesContent":["// A slightly patched version of node's url module, with support for mongodb://\n// uris.\n//\n// See https://github.com/nodejs/node/blob/master/LICENSE for licensing\n// information\n\n'use strict';\n\nconst punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i;\nconst portPattern = /:[0-9]*$/;\n\n// Special case for a simple path URL\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n\nconst hostnameMaxLen = 255;\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\nconst unsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n};\n// protocols that never have a hostname.\nconst hostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n};\n// protocols that always contain a // bit.\nconst slashedProtocol = {\n  'http': true,\n  'http:': true,\n  'https': true,\n  'https:': true,\n  'ftp': true,\n  'ftp:': true,\n  'gopher': true,\n  'gopher:': true,\n  'file': true,\n  'file:': true\n};\nconst querystring = require('querystring');\n\n/* istanbul ignore next: improve coverage */\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url instanceof Url) return url;\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\n/* istanbul ignore next: improve coverage */\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError('Parameter \"url\" must be a string, not ' + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var hasHash = false;\n  var start = -1;\n  var end = -1;\n  var rest = '';\n  var lastPos = 0;\n  var i = 0;\n  for (var inWs = false, split = false; i < url.length; ++i) {\n    const code = url.charCodeAt(i);\n\n    // Find first and last non-whitespace characters for trimming\n    const isWs = code === 32/* */ ||\n                 code === 9/*\\t*/ ||\n                 code === 13/*\\r*/ ||\n                 code === 10/*\\n*/ ||\n                 code === 12/*\\f*/ ||\n                 code === 160/*\\u00A0*/ ||\n                 code === 65279/*\\uFEFF*/;\n    if (start === -1) {\n      if (isWs)\n        continue;\n      lastPos = start = i;\n    } else {\n      if (inWs) {\n        if (!isWs) {\n          end = -1;\n          inWs = false;\n        }\n      } else if (isWs) {\n        end = i;\n        inWs = true;\n      }\n    }\n\n    // Only convert backslashes while we haven't seen a split character\n    if (!split) {\n      switch (code) {\n      case 35: // '#'\n        hasHash = true;\n        // Fall through\n      case 63: // '?'\n        split = true;\n        break;\n      case 92: // '\\\\'\n        if (i - lastPos > 0)\n          rest += url.slice(lastPos, i);\n        rest += '/';\n        lastPos = i + 1;\n        break;\n      }\n    } else if (!hasHash && code === 35/*#*/) {\n      hasHash = true;\n    }\n  }\n\n  // Check if string was non-empty (including strings with only whitespace)\n  if (start !== -1) {\n    if (lastPos === start) {\n      // We didn't convert any backslashes\n\n      if (end === -1) {\n        if (start === 0)\n          rest = url;\n        else\n          rest = url.slice(start);\n      } else {\n        rest = url.slice(start, end);\n      }\n    } else if (end === -1 && lastPos < url.length) {\n      // We converted some backslashes and have only part of the entire string\n      rest += url.slice(lastPos);\n    } else if (end !== -1 && lastPos < end) {\n      // We converted some backslashes and have only part of the entire string\n      rest += url.slice(lastPos, end);\n    }\n  }\n\n  if (!slashesDenoteHost && !hasHash) {\n    // Try fast path regexp\n    const simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.slice(1));\n        } else {\n          this.query = this.search.slice(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.slice(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || /^\\/\\/[^@\\/]+@[^@\\/]+/.test(rest)) {\n    var slashes = rest.charCodeAt(0) === 47/*/*/ &&\n                  rest.charCodeAt(1) === 47/*/*/;\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.slice(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:b path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    var hostEnd = -1;\n    var atSign = -1;\n    var nonHost = -1;\n    for (i = 0; i < rest.length; ++i) {\n      switch (rest.charCodeAt(i)) {\n      case 9:   // '\\t'\n      case 10:  // '\\n'\n      case 13:  // '\\r'\n      case 32:  // ' '\n      case 34:  // '\"'\n      case 37:  // '%'\n      case 39:  // '\\''\n      case 59:  // ';'\n      case 60:  // '<'\n      case 62:  // '>'\n      case 92:  // '\\\\'\n      case 94:  // '^'\n      case 96:  // '`'\n      case 123: // '{'\n      case 124: // '|'\n      case 125: // '}'\n        // Characters that are never ever allowed in a hostname from RFC 2396\n        if (nonHost === -1)\n          nonHost = i;\n        break;\n      case 35: // '#'\n      case 47: // '/'\n      case 63: // '?'\n        // Find the first instance of any host-ending characters\n        if (nonHost === -1)\n          nonHost = i;\n        hostEnd = i;\n        break;\n      case 64: // '@'\n        // At this point, either we have an explicit point where the\n        // auth portion cannot go past, or the last @ char is the decider.\n        atSign = i;\n        nonHost = -1;\n        break;\n      }\n      if (hostEnd !== -1)\n        break;\n    }\n    start = 0;\n    if (atSign !== -1) {\n      this.auth = decodeURIComponent(rest.slice(0, atSign));\n      start = atSign + 1;\n    }\n    if (nonHost === -1) {\n      this.host = rest.slice(start);\n      rest = '';\n    } else {\n      this.host = rest.slice(start, nonHost);\n      rest = rest.slice(nonHost);\n    }\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    if (typeof this.hostname !== 'string')\n      this.hostname = '';\n\n    var hostname = this.hostname;\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = hostname.charCodeAt(0) === 91/*[*/ &&\n                       hostname.charCodeAt(hostname.length - 1) === 93/*]*/;\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      const result = validateHostname(this, rest, hostname);\n      if (result !== undefined)\n        rest = result;\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.slice(1, -1);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    const result = autoEscapeStr(rest);\n    if (result !== undefined)\n      rest = result;\n  }\n\n  var questionIdx = -1;\n  var hashIdx = -1;\n  for (i = 0; i < rest.length; ++i) {\n    const code = rest.charCodeAt(i);\n    if (code === 35/*#*/) {\n      this.hash = rest.slice(i);\n      hashIdx = i;\n      break;\n    } else if (code === 63/*?*/ && questionIdx === -1) {\n      questionIdx = i;\n    }\n  }\n\n  if (questionIdx !== -1) {\n    if (hashIdx === -1) {\n      this.search = rest.slice(questionIdx);\n      this.query = rest.slice(questionIdx + 1);\n    } else {\n      this.search = rest.slice(questionIdx, hashIdx);\n      this.query = rest.slice(questionIdx + 1, hashIdx);\n    }\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  var firstIdx = (questionIdx !== -1 &&\n                  (hashIdx === -1 || questionIdx < hashIdx)\n    ? questionIdx\n    : hashIdx);\n  if (firstIdx === -1) {\n    if (rest.length > 0)\n      this.pathname = rest;\n  } else if (firstIdx > 0) {\n    this.pathname = rest.slice(0, firstIdx);\n  }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  // to support http.request\n  if (this.pathname || this.search) {\n    const p = this.pathname || '';\n    const s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n/* istanbul ignore next: improve coverage */\nfunction validateHostname(self, rest, hostname) {\n  for (var i = 0, lastPos; i <= hostname.length; ++i) {\n    var code;\n    if (i < hostname.length)\n      code = hostname.charCodeAt(i);\n    if (code === 46/*.*/ || i === hostname.length) {\n      if (i - lastPos > 0) {\n        if (i - lastPos > 63) {\n          self.hostname = hostname.slice(0, lastPos + 63);\n          return '/' + hostname.slice(lastPos + 63) + rest;\n        }\n      }\n      lastPos = i + 1;\n      continue;\n    } else if ((code >= 48/*0*/ && code <= 57/*9*/) ||\n               (code >= 97/*a*/ && code <= 122/*z*/) ||\n               code === 45/*-*/ ||\n               (code >= 65/*A*/ && code <= 90/*Z*/) ||\n               code === 43/*+*/ ||\n               code === 95/*_*/ ||\n               /* BEGIN MONGO URI PATCH */\n               code === 44/*,*/ ||\n               code === 58/*:*/ ||\n               /* END MONGO URI PATCH */\n               code > 127) {\n      continue;\n    }\n    // Invalid host character\n    self.hostname = hostname.slice(0, i);\n    if (i < hostname.length)\n      return '/' + hostname.slice(i) + rest;\n    break;\n  }\n}\n\n/* istanbul ignore next: improve coverage */\nfunction autoEscapeStr(rest) {\n  var newRest = '';\n  var lastPos = 0;\n  for (var i = 0; i < rest.length; ++i) {\n    // Automatically escape all delimiters and unwise characters from RFC 2396\n    // Also escape single quotes in case of an XSS attack\n    switch (rest.charCodeAt(i)) {\n    case 9:   // '\\t'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%09';\n      lastPos = i + 1;\n      break;\n    case 10:  // '\\n'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%0A';\n      lastPos = i + 1;\n      break;\n    case 13:  // '\\r'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%0D';\n      lastPos = i + 1;\n      break;\n    case 32:  // ' '\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%20';\n      lastPos = i + 1;\n      break;\n    case 34:  // '\"'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%22';\n      lastPos = i + 1;\n      break;\n    case 39:  // '\\''\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%27';\n      lastPos = i + 1;\n      break;\n    case 60:  // '<'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%3C';\n      lastPos = i + 1;\n      break;\n    case 62:  // '>'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%3E';\n      lastPos = i + 1;\n      break;\n    case 92:  // '\\\\'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%5C';\n      lastPos = i + 1;\n      break;\n    case 94:  // '^'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%5E';\n      lastPos = i + 1;\n      break;\n    case 96:  // '`'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%60';\n      lastPos = i + 1;\n      break;\n    case 123: // '{'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%7B';\n      lastPos = i + 1;\n      break;\n    case 124: // '|'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%7C';\n      lastPos = i + 1;\n      break;\n    case 125: // '}'\n      if (i - lastPos > 0)\n        newRest += rest.slice(lastPos, i);\n      newRest += '%7D';\n      lastPos = i + 1;\n      break;\n    }\n  }\n  if (lastPos === 0)\n    return;\n  if (lastPos < rest.length)\n    return newRest + rest.slice(lastPos);\n  else\n    return newRest;\n}\n\n// format a parsed object into a url string\n/* istanbul ignore next: improve coverage */\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (typeof obj === 'string') obj = urlParse(obj);\n\n  else if (typeof obj !== 'object' || obj === null)\n    throw new TypeError('Parameter \"urlObj\" must be an object, not ' +\n                        obj === null ? 'null' : typeof obj);\n\n  else if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n\n  return obj.format();\n}\n\n/* istanbul ignore next: improve coverage */\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeAuth(auth);\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '';\n  var pathname = this.pathname || '';\n  var hash = this.hash || '';\n  var host = false;\n  var query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n      this.hostname :\n      '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query !== null && typeof this.query === 'object')\n    query = querystring.stringify(this.query);\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.charCodeAt(protocol.length - 1) !== 58/*:*/)\n    protocol += ':';\n\n  var newPathname = '';\n  var lastPos = 0;\n  for (var i = 0; i < pathname.length; ++i) {\n    switch (pathname.charCodeAt(i)) {\n    case 35: // '#'\n      if (i - lastPos > 0)\n        newPathname += pathname.slice(lastPos, i);\n      newPathname += '%23';\n      lastPos = i + 1;\n      break;\n    case 63: // '?'\n      if (i - lastPos > 0)\n        newPathname += pathname.slice(lastPos, i);\n      newPathname += '%3F';\n      lastPos = i + 1;\n      break;\n    }\n  }\n  if (lastPos > 0) {\n    if (lastPos !== pathname.length)\n      pathname = newPathname + pathname.slice(lastPos);\n    else\n      pathname = newPathname;\n  }\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charCodeAt(0) !== 47/*/*/)\n      pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  search = search.replace('#', '%23');\n\n  if (hash && hash.charCodeAt(0) !== 35/*#*/) hash = '#' + hash;\n  if (search && search.charCodeAt(0) !== 63/*?*/) search = '?' + search;\n\n  return protocol + host + pathname + search + hash;\n};\n\n/* istanbul ignore next: improve coverage */\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\n/* istanbul ignore next: improve coverage */\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\n/* istanbul ignore next: improve coverage */\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\n/* istanbul ignore next: improve coverage */\nUrl.prototype.resolveObject = function(relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host &&\n        !/^file:?$/.test(relative.protocol) &&\n        !hostlessProtocol[relative.protocol]) {\n      const relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/');\n  var isRelAbs = (\n    relative.host ||\n      relative.pathname && relative.pathname.charAt(0) === '/'\n  );\n  var mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname));\n  var removeAllDots = mustEndAbs;\n  var srcPath = result.pathname && result.pathname.split('/') || [];\n  var relPath = relative.pathname && relative.pathname.split('/') || [];\n  var psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n      relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search !== null && relative.search !== undefined) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occasionally the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      const authInHost = result.host && result.host.indexOf('@') > 0 ?\n        result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n    (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      spliceOne(srcPath, i);\n    } else if (last === '..') {\n      spliceOne(srcPath, i);\n      up++;\n    } else if (up) {\n      spliceOne(srcPath, i);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n      srcPath.length ? srcPath.shift() : '';\n    //occasionally the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    const authInHost = result.host && result.host.indexOf('@') > 0 ?\n      result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\n/* istanbul ignore next: improve coverage */\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.slice(1);\n    }\n    host = host.slice(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\n/* istanbul ignore next: improve coverage */\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nvar hexTable = new Array(256);\nfor (var i = 0; i < 256; ++i)\n  hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();\n/* istanbul ignore next: improve coverage */\nfunction encodeAuth(str) {\n  // faster encodeURIComponent alternative for encoding auth uri components\n  var out = '';\n  var lastPos = 0;\n  for (var i = 0; i < str.length; ++i) {\n    var c = str.charCodeAt(i);\n\n    // These characters do not need escaping:\n    // ! - . _ ~\n    // ' ( ) * :\n    // digits\n    // alpha (uppercase)\n    // alpha (lowercase)\n    if (c === 0x21 || c === 0x2D || c === 0x2E || c === 0x5F || c === 0x7E ||\n        (c >= 0x27 && c <= 0x2A) ||\n        (c >= 0x30 && c <= 0x3A) ||\n        (c >= 0x41 && c <= 0x5A) ||\n        (c >= 0x61 && c <= 0x7A)) {\n      continue;\n    }\n\n    if (i - lastPos > 0)\n      out += str.slice(lastPos, i);\n\n    lastPos = i + 1;\n\n    // Other ASCII characters\n    if (c < 0x80) {\n      out += hexTable[c];\n      continue;\n    }\n\n    // Multi-byte characters ...\n    if (c < 0x800) {\n      out += hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)];\n      continue;\n    }\n    if (c < 0xD800 || c >= 0xE000) {\n      out += hexTable[0xE0 | (c >> 12)] +\n             hexTable[0x80 | ((c >> 6) & 0x3F)] +\n             hexTable[0x80 | (c & 0x3F)];\n      continue;\n    }\n    // Surrogate pair\n    ++i;\n    var c2;\n    if (i < str.length)\n      c2 = str.charCodeAt(i) & 0x3FF;\n    else\n      c2 = 0;\n    c = 0x10000 + (((c & 0x3FF) << 10) | c2);\n    out += hexTable[0xF0 | (c >> 18)] +\n           hexTable[0x80 | ((c >> 12) & 0x3F)] +\n           hexTable[0x80 | ((c >> 6) & 0x3F)] +\n           hexTable[0x80 | (c & 0x3F)];\n  }\n  if (lastPos === 0)\n    return str;\n  if (lastPos < str.length)\n    return out + str.slice(lastPos);\n  return out;\n}\n"]}