{"version":3,"sources":["../../src/cloud-code/HTTPResponse.js"],"names":["HTTPResponse","constructor","response","body","_text","_data","status","statusCode","headers","cookies","Buffer","isBuffer","buffer","getText","toString","JSON","stringify","getData","parse","e","Object","defineProperty","get","enumerable"],"mappings":";;;;;AACe,MAAMA,YAAN,CAAmB;AAChCC,cAAYC,QAAZ,EAAsBC,IAAtB,EAA4B;AAC1B,QAAIC,KAAJ,EAAWC,KAAX;AACA,SAAKC,MAAL,GAAcJ,SAASK,UAAvB;AACA,SAAKC,OAAL,GAAeN,SAASM,OAAT,IAAoB,EAAnC;AACA,SAAKC,OAAL,GAAe,KAAKD,OAAL,CAAa,YAAb,CAAf;;AAEA,QAAI,OAAOL,IAAP,IAAe,QAAnB,EAA6B;AAC3BC,cAAQD,IAAR;AACD,KAFD,MAEO,IAAIO,OAAOC,QAAP,CAAgBR,IAAhB,CAAJ,EAA2B;AAChC,WAAKS,MAAL,GAAcT,IAAd;AACD,KAFM,MAEA,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAClCE,cAAQF,IAAR;AACD;;AAED,UAAMU,UAAU,MAAM;AACpB,UAAI,CAACT,KAAD,IAAU,KAAKQ,MAAnB,EAA2B;AACzBR,gBAAQ,KAAKQ,MAAL,CAAYE,QAAZ,CAAqB,OAArB,CAAR;AACD,OAFD,MAEO,IAAI,CAACV,KAAD,IAAUC,KAAd,EAAqB;AAC1BD,gBAAQW,KAAKC,SAAL,CAAeX,KAAf,CAAR;AACD;AACD,aAAOD,KAAP;AACD,KAPD;;AASA,UAAMa,UAAU,MAAM;AACpB,UAAI,CAACZ,KAAL,EAAY;AACV,YAAI;AACFA,kBAAQU,KAAKG,KAAL,CAAWL,SAAX,CAAR;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU,CAAE,KAAO;AACtB;AACD,aAAOd,KAAP;AACD,KAPD;;AASAe,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCC,WAAK,MAAM;AAAE,eAAOnB,IAAP;AAAa;AADQ,KAApC;;AAIAiB,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCE,kBAAY,IADsB;AAElCD,WAAKT;AAF6B,KAApC;;AAKAO,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCE,kBAAY,IADsB;AAElCD,WAAKL;AAF6B,KAApC;AAID;AA9C+B;kBAAbjB,Y","file":"HTTPResponse.js","sourcesContent":["\nexport default class HTTPResponse {\n  constructor(response, body) {\n    let _text, _data;\n    this.status = response.statusCode;\n    this.headers = response.headers || {};\n    this.cookies = this.headers[\"set-cookie\"];\n\n    if (typeof body == 'string') {\n      _text = body;\n    } else if (Buffer.isBuffer(body)) {\n      this.buffer = body;\n    } else if (typeof body == 'object') {\n      _data = body;\n    }\n\n    const getText = () => {\n      if (!_text && this.buffer) {\n        _text = this.buffer.toString('utf-8');\n      } else if (!_text && _data) {\n        _text = JSON.stringify(_data);\n      }\n      return _text;\n    }\n\n    const getData = () => {\n      if (!_data) {\n        try {\n          _data = JSON.parse(getText());\n        } catch (e) { /* */ }\n      }\n      return _data;\n    }\n\n    Object.defineProperty(this, 'body', {\n      get: () => { return body }\n    });\n\n    Object.defineProperty(this, 'text', {\n      enumerable: true,\n      get: getText\n    });\n\n    Object.defineProperty(this, 'data', {\n      enumerable: true,\n      get: getData\n    });\n  }\n}\n"]}