{"version":3,"sources":["../src/RestQuery.js"],"names":["SchemaController","require","Parse","triggers","AlwaysSelectedKeys","RestQuery","config","auth","className","restWhere","restOptions","clientSDK","response","findOptions","isWrite","isMaster","user","Error","INVALID_SESSION_TOKEN","__type","objectId","id","doCount","includeAll","include","hasOwnProperty","keysForInclude","keys","split","filter","key","length","map","slice","lastIndexOf","join","option","concat","Array","from","Set","fields","order","sort","reduce","sortMap","field","trim","score","$meta","paths","pathSet","memo","path","index","parts","Object","s","a","b","redirectKey","redirectClassNameForKey","redirectClassName","INVALID_JSON","prototype","execute","executeOptions","Promise","resolve","then","buildRestWhere","handleIncludeAll","runFind","runCount","handleInclude","runAfterFindTrigger","getUserAndRoleACL","validateClientClassCreation","replaceSelect","replaceDontSelect","replaceInQuery","replaceNotInQuery","replaceEquality","forWrite","acl","getUserRoles","roles","database","newClassName","allowClientClassCreation","systemClasses","indexOf","loadSchema","schemaController","hasClass","OPERATION_FORBIDDEN","transformInQuery","inQueryObject","results","values","result","push","isArray","findObjectWithKey","inQueryValue","where","INVALID_QUERY","additionalOptions","subqueryReadPreference","readPreference","subquery","transformNotInQuery","notInQueryObject","notInQueryValue","transformSelect","selectObject","objects","o","i","selectValue","query","transformDontSelect","dontSelectObject","dontSelectValue","cleanResultOfSensitiveUserInfo","password","userSensitiveFields","cleanResultAuthData","authData","forEach","provider","replaceEqualityConstraint","constraint","equalToObject","hasDirectConstraint","hasOperatorConstraint","options","limit","assign","op","find","filesController","expandFilesInObject","r","count","skip","c","getOneSchema","schema","includeFields","keyFields","type","pathResponse","includePath","newResponse","hasAfterFindHook","triggerExists","Types","afterFind","applicationId","pipeline","distinct","maybeRunAfterFindTrigger","object","toJSON","pointers","findPointers","pointersHash","pointer","add","includeRestOptions","keySet","set","keyPath","size","includeReadPreference","queryPromises","objectIds","all","responses","replace","includeResponse","obj","sessionToken","resp","replacePointers","answer","x","subobject","newsub","root","item","subkey","module","exports"],"mappings":"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","file":"RestQuery.js","sourcesContent":["// An object that encapsulates everything we need to run a 'find'\n// operation, encoded in the REST API format.\n\nvar SchemaController = require('./Controllers/SchemaController');\nvar Parse = require('parse/node').Parse;\nconst triggers = require('./triggers');\n\nconst AlwaysSelectedKeys = ['objectId', 'createdAt', 'updatedAt'];\n// restOptions can include:\n//   skip\n//   limit\n//   order\n//   count\n//   include\n//   keys\n//   redirectClassNameForKey\nfunction RestQuery(config, auth, className, restWhere = {}, restOptions = {}, clientSDK) {\n\n  this.config = config;\n  this.auth = auth;\n  this.className = className;\n  this.restWhere = restWhere;\n  this.restOptions = restOptions;\n  this.clientSDK = clientSDK;\n  this.response = null;\n  this.findOptions = {};\n  this.isWrite = false;\n\n  if (!this.auth.isMaster) {\n    if (this.className == '_Session') {\n      if (!this.auth.user) {\n        throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,\n          'Invalid session token');\n      }\n      this.restWhere = {\n        '$and': [this.restWhere, {\n          'user': {\n            __type: 'Pointer',\n            className: '_User',\n            objectId: this.auth.user.id\n          }\n        }]\n      };\n    }\n  }\n\n  this.doCount = false;\n  this.includeAll = false;\n\n  // The format for this.include is not the same as the format for the\n  // include option - it's the paths we should include, in order,\n  // stored as arrays, taking into account that we need to include foo\n  // before including foo.bar. Also it should dedupe.\n  // For example, passing an arg of include=foo.bar,foo.baz could lead to\n  // this.include = [['foo'], ['foo', 'baz'], ['foo', 'bar']]\n  this.include = [];\n\n  // If we have keys, we probably want to force some includes (n-1 level)\n  // See issue: https://github.com/parse-community/parse-server/issues/3185\n  if (restOptions.hasOwnProperty('keys')) {\n    const keysForInclude = restOptions.keys.split(',').filter((key) => {\n      // At least 2 components\n      return key.split(\".\").length > 1;\n    }).map((key) => {\n      // Slice the last component (a.b.c -> a.b)\n      // Otherwise we'll include one level too much.\n      return key.slice(0, key.lastIndexOf(\".\"));\n    }).join(',');\n\n    // Concat the possibly present include string with the one from the keys\n    // Dedup / sorting is handle in 'include' case.\n    if (keysForInclude.length > 0) {\n      if (!restOptions.include || restOptions.include.length == 0) {\n        restOptions.include = keysForInclude;\n      } else {\n        restOptions.include += \",\" + keysForInclude;\n      }\n    }\n  }\n\n  for (var option in restOptions) {\n    switch(option) {\n    case 'keys': {\n      const keys = restOptions.keys.split(',').concat(AlwaysSelectedKeys);\n      this.keys = Array.from(new Set(keys));\n      break;\n    }\n    case 'count':\n      this.doCount = true;\n      break;\n    case 'includeAll':\n      this.includeAll = true;\n      break;\n    case 'distinct':\n    case 'pipeline':\n    case 'skip':\n    case 'limit':\n    case 'readPreference':\n      this.findOptions[option] = restOptions[option];\n      break;\n    case 'order':\n      var fields = restOptions.order.split(',');\n      this.findOptions.sort = fields.reduce((sortMap, field) => {\n        field = field.trim();\n        if (field === '$score') {\n          sortMap.score = {$meta: 'textScore'};\n        } else if (field[0] == '-') {\n          sortMap[field.slice(1)] = -1;\n        } else {\n          sortMap[field] = 1;\n        }\n        return sortMap;\n      }, {});\n      break;\n    case 'include': {\n      const paths = restOptions.include.split(',');\n      // Load the existing includes (from keys)\n      const pathSet = paths.reduce((memo, path) => {\n        // Split each paths on . (a.b.c -> [a,b,c])\n        // reduce to create all paths\n        // ([a,b,c] -> {a: true, 'a.b': true, 'a.b.c': true})\n        return path.split('.').reduce((memo, path, index, parts) => {\n          memo[parts.slice(0, index + 1).join('.')] = true;\n          return memo;\n        }, memo);\n      }, {});\n\n      this.include = Object.keys(pathSet).map((s) => {\n        return s.split('.');\n      }).sort((a, b) => {\n        return a.length - b.length; // Sort by number of components\n      });\n      break;\n    }\n    case 'redirectClassNameForKey':\n      this.redirectKey = restOptions.redirectClassNameForKey;\n      this.redirectClassName = null;\n      break;\n    case 'includeReadPreference':\n    case 'subqueryReadPreference':\n      break;\n    default:\n      throw new Parse.Error(Parse.Error.INVALID_JSON,\n        'bad option: ' + option);\n    }\n  }\n}\n\n// A convenient method to perform all the steps of processing a query\n// in order.\n// Returns a promise for the response - an object with optional keys\n// 'results' and 'count'.\n// TODO: consolidate the replaceX functions\nRestQuery.prototype.execute = function(executeOptions) {\n  return Promise.resolve().then(() => {\n    return this.buildRestWhere();\n  }).then(() => {\n    return this.handleIncludeAll();\n  }).then(() => {\n    return this.runFind(executeOptions);\n  }).then(() => {\n    return this.runCount();\n  }).then(() => {\n    return this.handleInclude();\n  }).then(() => {\n    return this.runAfterFindTrigger();\n  }).then(() => {\n    return this.response;\n  });\n};\n\nRestQuery.prototype.buildRestWhere = function() {\n  return Promise.resolve().then(() => {\n    return this.getUserAndRoleACL();\n  }).then(() => {\n    return this.redirectClassNameForKey();\n  }).then(() => {\n    return this.validateClientClassCreation();\n  }).then(() => {\n    return this.replaceSelect();\n  }).then(() => {\n    return this.replaceDontSelect();\n  }).then(() => {\n    return this.replaceInQuery();\n  }).then(() => {\n    return this.replaceNotInQuery();\n  }).then(() => {\n    return this.replaceEquality();\n  });\n}\n\n// Marks the query for a write attempt, so we read the proper ACL (write instead of read)\nRestQuery.prototype.forWrite = function() {\n  this.isWrite = true;\n  return this;\n}\n\n// Uses the Auth object to get the list of roles, adds the user id\nRestQuery.prototype.getUserAndRoleACL = function() {\n  if (this.auth.isMaster) {\n    return Promise.resolve();\n  }\n\n  this.findOptions.acl = ['*'];\n\n  if (this.auth.user) {\n    return this.auth.getUserRoles().then((roles) => {\n      this.findOptions.acl = this.findOptions.acl.concat(roles, [this.auth.user.id]);\n      return;\n    });\n  } else {\n    return Promise.resolve();\n  }\n};\n\n// Changes the className if redirectClassNameForKey is set.\n// Returns a promise.\nRestQuery.prototype.redirectClassNameForKey = function() {\n  if (!this.redirectKey) {\n    return Promise.resolve();\n  }\n\n  // We need to change the class name based on the schema\n  return this.config.database.redirectClassNameForKey(this.className, this.redirectKey)\n    .then((newClassName) => {\n      this.className = newClassName;\n      this.redirectClassName = newClassName;\n    });\n};\n\n// Validates this operation against the allowClientClassCreation config.\nRestQuery.prototype.validateClientClassCreation = function() {\n  if (this.config.allowClientClassCreation === false && !this.auth.isMaster\n      && SchemaController.systemClasses.indexOf(this.className) === -1) {\n    return this.config.database.loadSchema()\n      .then(schemaController => schemaController.hasClass(this.className))\n      .then(hasClass => {\n        if (hasClass !== true) {\n          throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,\n            'This user is not allowed to access ' +\n                                'non-existent class: ' + this.className);\n        }\n      });\n  } else {\n    return Promise.resolve();\n  }\n};\n\nfunction transformInQuery(inQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId\n    });\n  }\n  delete inQueryObject['$inQuery'];\n  if (Array.isArray(inQueryObject['$in'])) {\n    inQueryObject['$in'] = inQueryObject['$in'].concat(values);\n  } else {\n    inQueryObject['$in'] = values;\n  }\n}\n\n// Replaces a $inQuery clause by running the subquery, if there is an\n// $inQuery clause.\n// The $inQuery clause turns into an $in with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceInQuery = function() {\n  var inQueryObject = findObjectWithKey(this.restWhere, '$inQuery');\n  if (!inQueryObject) {\n    return;\n  }\n\n  // The inQuery value must have precisely two keys - where and className\n  var inQueryValue = inQueryObject['$inQuery'];\n  if (!inQueryValue.where || !inQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY,\n      'improper usage of $inQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: inQueryValue.redirectClassNameForKey\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config, this.auth, inQueryValue.className,\n    inQueryValue.where, additionalOptions);\n  return subquery.execute().then((response) => {\n    transformInQuery(inQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceInQuery();\n  });\n};\n\nfunction transformNotInQuery(notInQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId\n    });\n  }\n  delete notInQueryObject['$notInQuery'];\n  if (Array.isArray(notInQueryObject['$nin'])) {\n    notInQueryObject['$nin'] = notInQueryObject['$nin'].concat(values);\n  } else {\n    notInQueryObject['$nin'] = values;\n  }\n}\n\n// Replaces a $notInQuery clause by running the subquery, if there is an\n// $notInQuery clause.\n// The $notInQuery clause turns into a $nin with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceNotInQuery = function() {\n  var notInQueryObject = findObjectWithKey(this.restWhere, '$notInQuery');\n  if (!notInQueryObject) {\n    return;\n  }\n\n  // The notInQuery value must have precisely two keys - where and className\n  var notInQueryValue = notInQueryObject['$notInQuery'];\n  if (!notInQueryValue.where || !notInQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY,\n      'improper usage of $notInQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: notInQueryValue.redirectClassNameForKey\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config, this.auth, notInQueryValue.className,\n    notInQueryValue.where, additionalOptions);\n  return subquery.execute().then((response) => {\n    transformNotInQuery(notInQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceNotInQuery();\n  });\n};\n\nconst transformSelect = (selectObject, key ,objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce((o,i)=>o[i], result));\n  }\n  delete selectObject['$select'];\n  if (Array.isArray(selectObject['$in'])) {\n    selectObject['$in'] = selectObject['$in'].concat(values);\n  } else {\n    selectObject['$in'] = values;\n  }\n}\n\n// Replaces a $select clause by running the subquery, if there is a\n// $select clause.\n// The $select clause turns into an $in with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceSelect = function() {\n  var selectObject = findObjectWithKey(this.restWhere, '$select');\n  if (!selectObject) {\n    return;\n  }\n\n  // The select value must have precisely two keys - query and key\n  var selectValue = selectObject['$select'];\n  // iOS SDK don't send where if not set, let it pass\n  if (!selectValue.query ||\n      !selectValue.key ||\n      typeof selectValue.query !== 'object' ||\n      !selectValue.query.className ||\n      Object.keys(selectValue).length !== 2) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY,\n      'improper usage of $select');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: selectValue.query.redirectClassNameForKey\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config, this.auth, selectValue.query.className,\n    selectValue.query.where, additionalOptions);\n  return subquery.execute().then((response) => {\n    transformSelect(selectObject, selectValue.key, response.results);\n    // Keep replacing $select clauses\n    return this.replaceSelect();\n  })\n};\n\nconst transformDontSelect = (dontSelectObject, key, objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce((o,i)=>o[i], result));\n  }\n  delete dontSelectObject['$dontSelect'];\n  if (Array.isArray(dontSelectObject['$nin'])) {\n    dontSelectObject['$nin'] = dontSelectObject['$nin'].concat(values);\n  } else {\n    dontSelectObject['$nin'] = values;\n  }\n}\n\n// Replaces a $dontSelect clause by running the subquery, if there is a\n// $dontSelect clause.\n// The $dontSelect clause turns into an $nin with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceDontSelect = function() {\n  var dontSelectObject = findObjectWithKey(this.restWhere, '$dontSelect');\n  if (!dontSelectObject) {\n    return;\n  }\n\n  // The dontSelect value must have precisely two keys - query and key\n  var dontSelectValue = dontSelectObject['$dontSelect'];\n  if (!dontSelectValue.query ||\n      !dontSelectValue.key ||\n      typeof dontSelectValue.query !== 'object' ||\n      !dontSelectValue.query.className ||\n      Object.keys(dontSelectValue).length !== 2) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY,\n      'improper usage of $dontSelect');\n  }\n  const additionalOptions = {\n    redirectClassNameForKey: dontSelectValue.query.redirectClassNameForKey\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config, this.auth, dontSelectValue.query.className,\n    dontSelectValue.query.where, additionalOptions);\n  return subquery.execute().then((response) => {\n    transformDontSelect(dontSelectObject, dontSelectValue.key, response.results);\n    // Keep replacing $dontSelect clauses\n    return this.replaceDontSelect();\n  })\n};\n\nconst cleanResultOfSensitiveUserInfo = function (result, auth, config) {\n  delete result.password;\n\n  if (auth.isMaster || (auth.user && auth.user.id === result.objectId)) {\n    return;\n  }\n\n  for (const field of config.userSensitiveFields) {\n    delete result[field];\n  }\n};\n\nconst cleanResultAuthData = function (result) {\n  if (result.authData) {\n    Object.keys(result.authData).forEach((provider) => {\n      if (result.authData[provider] === null) {\n        delete result.authData[provider];\n      }\n    });\n\n    if (Object.keys(result.authData).length == 0) {\n      delete result.authData;\n    }\n  }\n};\n\nconst replaceEqualityConstraint = (constraint) => {\n  if (typeof constraint !== 'object') {\n    return constraint;\n  }\n  const equalToObject = {};\n  let hasDirectConstraint = false;\n  let hasOperatorConstraint = false;\n  for (const key in constraint) {\n    if (key.indexOf('$') !== 0) {\n      hasDirectConstraint = true;\n      equalToObject[key] = constraint[key];\n    } else {\n      hasOperatorConstraint = true;\n    }\n  }\n  if (hasDirectConstraint && hasOperatorConstraint) {\n    constraint['$eq'] = equalToObject;\n    Object.keys(equalToObject).forEach((key) => {\n      delete constraint[key];\n    });\n  }\n  return constraint;\n}\n\nRestQuery.prototype.replaceEquality = function() {\n  if (typeof this.restWhere !== 'object') {\n    return;\n  }\n  for (const key in this.restWhere) {\n    this.restWhere[key] = replaceEqualityConstraint(this.restWhere[key]);\n  }\n}\n\n// Returns a promise for whether it was successful.\n// Populates this.response with an object that only has 'results'.\nRestQuery.prototype.runFind = function(options = {}) {\n  if (this.findOptions.limit === 0) {\n    this.response = {results: []};\n    return Promise.resolve();\n  }\n  const findOptions = Object.assign({}, this.findOptions);\n  if (this.keys) {\n    findOptions.keys = this.keys.map((key) => {\n      return key.split('.')[0];\n    });\n  }\n  if (options.op) {\n    findOptions.op = options.op;\n  }\n  if (this.isWrite) {\n    findOptions.isWrite = true;\n  }\n  return this.config.database.find(this.className, this.restWhere, findOptions)\n    .then((results) => {\n      if (this.className === '_User') {\n        for (var result of results) {\n          cleanResultOfSensitiveUserInfo(result, this.auth, this.config);\n          cleanResultAuthData(result);\n        }\n      }\n\n      this.config.filesController.expandFilesInObject(this.config, results);\n\n      if (this.redirectClassName) {\n        for (var r of results) {\n          r.className = this.redirectClassName;\n        }\n      }\n      this.response = {results: results};\n    });\n};\n\n// Returns a promise for whether it was successful.\n// Populates this.response.count with the count\nRestQuery.prototype.runCount = function() {\n  if (!this.doCount) {\n    return;\n  }\n  this.findOptions.count = true;\n  delete this.findOptions.skip;\n  delete this.findOptions.limit;\n  return this.config.database.find(this.className, this.restWhere, this.findOptions)\n    .then((c) => {\n      this.response.count = c;\n    });\n};\n\n// Augments this.response with all pointers on an object\nRestQuery.prototype.handleIncludeAll = function() {\n  if (!this.includeAll) {\n    return;\n  }\n  return this.config.database.loadSchema()\n    .then(schemaController => schemaController.getOneSchema(this.className))\n    .then(schema => {\n      const includeFields = [];\n      const keyFields = [];\n      for (const field in schema.fields) {\n        if (schema.fields[field].type && schema.fields[field].type === 'Pointer') {\n          includeFields.push([field]);\n          keyFields.push(field);\n        }\n      }\n      // Add fields to include, keys, remove dups\n      this.include = [...new Set([...this.include, ...includeFields])];\n      // if this.keys not set, then all keys are already included\n      if (this.keys) {\n        this.keys = [...new Set([...this.keys, ...keyFields])];\n      }\n    });\n};\n\n// Augments this.response with data at the paths provided in this.include.\nRestQuery.prototype.handleInclude = function() {\n  if (this.include.length == 0) {\n    return;\n  }\n\n  var pathResponse = includePath(this.config, this.auth,\n    this.response, this.include[0], this.restOptions);\n  if (pathResponse.then) {\n    return pathResponse.then((newResponse) => {\n      this.response = newResponse;\n      this.include = this.include.slice(1);\n      return this.handleInclude();\n    });\n  } else if (this.include.length > 0) {\n    this.include = this.include.slice(1);\n    return this.handleInclude();\n  }\n\n  return pathResponse;\n};\n\n//Returns a promise of a processed set of results\nRestQuery.prototype.runAfterFindTrigger = function() {\n  if (!this.response) {\n    return;\n  }\n  // Avoid doing any setup for triggers if there is no 'afterFind' trigger for this class.\n  const hasAfterFindHook = triggers.triggerExists(this.className, triggers.Types.afterFind, this.config.applicationId);\n  if (!hasAfterFindHook) {\n    return Promise.resolve();\n  }\n  // Skip Aggregate and Distinct Queries\n  if (this.findOptions.pipeline || this.findOptions.distinct) {\n    return Promise.resolve();\n  }\n  // Run afterFind trigger and set the new results\n  return triggers.maybeRunAfterFindTrigger(triggers.Types.afterFind, this.auth, this.className,this.response.results, this.config).then((results) => {\n    // Ensure we properly set the className back\n    if (this.redirectClassName) {\n      this.response.results = results.map((object) => {\n        if (object instanceof Parse.Object) {\n          object = object.toJSON();\n        }\n        object.className = this.redirectClassName;\n        return object;\n      });\n    } else {\n      this.response.results = results;\n    }\n  });\n};\n\n// Adds included values to the response.\n// Path is a list of field names.\n// Returns a promise for an augmented response.\nfunction includePath(config, auth, response, path, restOptions = {}) {\n  var pointers = findPointers(response.results, path);\n  if (pointers.length == 0) {\n    return response;\n  }\n  const pointersHash = {};\n  for (var pointer of pointers) {\n    if (!pointer) {\n      continue;\n    }\n    const className = pointer.className;\n    // only include the good pointers\n    if (className) {\n      pointersHash[className] = pointersHash[className] || new Set();\n      pointersHash[className].add(pointer.objectId);\n    }\n  }\n  const includeRestOptions = {};\n  if (restOptions.keys) {\n    const keys = new Set(restOptions.keys.split(','));\n    const keySet = Array.from(keys).reduce((set, key) => {\n      const keyPath = key.split('.');\n      let i = 0;\n      for (i; i < path.length; i++) {\n        if (path[i] != keyPath[i]) {\n          return set;\n        }\n      }\n      if (i < keyPath.length) {\n        set.add(keyPath[i]);\n      }\n      return set;\n    }, new Set());\n    if (keySet.size > 0) {\n      includeRestOptions.keys = Array.from(keySet).join(',');\n    }\n  }\n\n  if (restOptions.includeReadPreference) {\n    includeRestOptions.readPreference = restOptions.includeReadPreference;\n    includeRestOptions.includeReadPreference = restOptions.includeReadPreference;\n  }\n\n  const queryPromises = Object.keys(pointersHash).map((className) => {\n    const objectIds = Array.from(pointersHash[className]);\n    let where;\n    if (objectIds.length === 1) {\n      where = {'objectId': objectIds[0]};\n    } else {\n      where = {'objectId': {'$in': objectIds}};\n    }\n    var query = new RestQuery(config, auth, className, where, includeRestOptions);\n    return query.execute({op: 'get'}).then((results) => {\n      results.className = className;\n      return Promise.resolve(results);\n    })\n  })\n\n  // Get the objects for all these object ids\n  return Promise.all(queryPromises).then((responses) => {\n    var replace = responses.reduce((replace, includeResponse) => {\n      for (var obj of includeResponse.results) {\n        obj.__type = 'Object';\n        obj.className = includeResponse.className;\n\n        if (obj.className == \"_User\" && !auth.isMaster) {\n          delete obj.sessionToken;\n          delete obj.authData;\n        }\n        replace[obj.objectId] = obj;\n      }\n      return replace;\n    }, {})\n\n    var resp = {\n      results: replacePointers(response.results, path, replace)\n    };\n    if (response.count) {\n      resp.count = response.count;\n    }\n    return resp;\n  });\n}\n\n// Object may be a list of REST-format object to find pointers in, or\n// it may be a single object.\n// If the path yields things that aren't pointers, this throws an error.\n// Path is a list of fields to search into.\n// Returns a list of pointers in REST format.\nfunction findPointers(object, path) {\n  if (object instanceof Array) {\n    var answer = [];\n    for (var x of object) {\n      answer = answer.concat(findPointers(x, path));\n    }\n    return answer;\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return [];\n  }\n\n  if (path.length == 0) {\n    if (object === null || object.__type == 'Pointer') {\n      return [object];\n    }\n    return [];\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return [];\n  }\n  return findPointers(subobject, path.slice(1));\n}\n\n// Object may be a list of REST-format objects to replace pointers\n// in, or it may be a single object.\n// Path is a list of fields to search into.\n// replace is a map from object id -> object.\n// Returns something analogous to object, but with the appropriate\n// pointers inflated.\nfunction replacePointers(object, path, replace) {\n  if (object instanceof Array) {\n    return object.map((obj) => replacePointers(obj, path, replace))\n      .filter((obj) => typeof obj !== 'undefined');\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return object;\n  }\n\n  if (path.length === 0) {\n    if (object && object.__type === 'Pointer') {\n      return replace[object.objectId];\n    }\n    return object;\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return object;\n  }\n  var newsub = replacePointers(subobject, path.slice(1), replace);\n  var answer = {};\n  for (var key in object) {\n    if (key == path[0]) {\n      answer[key] = newsub;\n    } else {\n      answer[key] = object[key];\n    }\n  }\n  return answer;\n}\n\n// Finds a subobject that has the given key, if there is one.\n// Returns undefined otherwise.\nfunction findObjectWithKey(root, key) {\n  if (typeof root !== 'object') {\n    return;\n  }\n  if (root instanceof Array) {\n    for (var item of root) {\n      const answer = findObjectWithKey(item, key);\n      if (answer) {\n        return answer;\n      }\n    }\n  }\n  if (root && root[key]) {\n    return root;\n  }\n  for (var subkey in root) {\n    const answer = findObjectWithKey(root[subkey], key);\n    if (answer) {\n      return answer;\n    }\n  }\n}\n\nmodule.exports = RestQuery;\n"]}