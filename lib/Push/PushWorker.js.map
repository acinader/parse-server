{"version":3,"sources":["../../src/Push/PushWorker.js"],"names":["utils","groupByBadge","installations","reduce","map","installation","badge","push","PushWorker","constructor","pushAdapter","subscriberConfig","AdaptableController","validateAdapter","PushAdapter","adapter","channel","PushQueue","defaultPushChannel","subscriber","ParseMessageQueue","createSubscriber","subscribe","on","messageStr","workItem","JSON","parse","run","unsubscribe","body","query","pushStatus","applicationId","UTCOffset","config","Config","get","auth","where","applyDeviceTokenExists","objectId","rest","find","then","results","length","sendToAdapter","err","locales","getLocalesFromPush","bodiesPerLocales","grouppedInstallations","groupByLocaleIdentifier","promises","Object","keys","locale","Promise","all","isPushIncrementing","logger","verbose","send","trackSent","badgeInstallationsMap","payload","data","parseInt"],"mappings":"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","file":"PushWorker.js","sourcesContent":["// @flow\n// @flow-disable-next\nimport deepcopy               from 'deepcopy';\nimport AdaptableController    from '../Controllers/AdaptableController';\nimport { master }             from '../Auth';\nimport Config                 from '../Config';\nimport { PushAdapter }        from '../Adapters/Push/PushAdapter';\nimport rest                   from '../rest';\nimport { pushStatusHandler }  from '../StatusHandler';\nimport * as utils             from './utils';\nimport { ParseMessageQueue }  from '../ParseMessageQueue';\nimport { PushQueue }          from './PushQueue';\nimport logger                 from '../logger';\n\nfunction groupByBadge(installations) {\n  return installations.reduce((map, installation) => {\n    const badge = installation.badge + '';\n    map[badge] = map[badge] || [];\n    map[badge].push(installation);\n    return map;\n  }, {});\n}\n\nexport class PushWorker {\n  subscriber: ?any;\n  adapter: any;\n  channel: string;\n\n  constructor(pushAdapter: PushAdapter, subscriberConfig: any = {}) {\n    AdaptableController.validateAdapter(pushAdapter, this, PushAdapter);\n    this.adapter = pushAdapter;\n\n    this.channel = subscriberConfig.channel || PushQueue.defaultPushChannel();\n    this.subscriber = ParseMessageQueue.createSubscriber(subscriberConfig);\n    if (this.subscriber) {\n      const subscriber = this.subscriber;\n      subscriber.subscribe(this.channel);\n      subscriber.on('message', (channel, messageStr) => {\n        const workItem = JSON.parse(messageStr);\n        this.run(workItem);\n      });\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.subscriber) {\n      this.subscriber.unsubscribe(this.channel);\n    }\n  }\n\n  run({ body, query, pushStatus, applicationId, UTCOffset }: any): Promise<*> {\n    const config = Config.get(applicationId);\n    const auth = master(config);\n    const where = utils.applyDeviceTokenExists(query.where);\n    delete query.where;\n    pushStatus = pushStatusHandler(config, pushStatus.objectId);\n    return rest.find(config, auth, '_Installation', where, query).then(({results}) => {\n      if (results.length == 0) {\n        return;\n      }\n      return this.sendToAdapter(body, results, pushStatus, config, UTCOffset);\n    }, err => {\n      throw err;\n    });\n  }\n\n  sendToAdapter(body: any, installations: any[], pushStatus: any, config: Config, UTCOffset: ?any): Promise<*> {\n    // Check if we have locales in the push body\n    const locales = utils.getLocalesFromPush(body);\n    if (locales.length > 0) {\n      // Get all tranformed bodies for each locale\n      const bodiesPerLocales = utils.bodiesPerLocales(body, locales);\n\n      // Group installations on the specified locales (en, fr, default etc...)\n      const grouppedInstallations = utils.groupByLocaleIdentifier(installations, locales);\n      const promises = Object.keys(grouppedInstallations).map((locale) => {\n        const installations = grouppedInstallations[locale];\n        const body = bodiesPerLocales[locale];\n        return this.sendToAdapter(body, installations, pushStatus, config, UTCOffset);\n      });\n      return Promise.all(promises);\n    }\n\n    if (!utils.isPushIncrementing(body)) {\n      logger.verbose(`Sending push to ${installations.length}`);\n      return this.adapter.send(body, installations, pushStatus.objectId).then((results) => {\n        return pushStatus.trackSent(results, UTCOffset).then(() => results);\n      });\n    }\n\n    // Collect the badges to reduce the # of calls\n    const badgeInstallationsMap = groupByBadge(installations);\n\n    // Map the on the badges count and return the send result\n    const promises = Object.keys(badgeInstallationsMap).map((badge) => {\n      const payload = deepcopy(body);\n      payload.data.badge = parseInt(badge);\n      const installations = badgeInstallationsMap[badge];\n      return this.sendToAdapter(payload, installations, pushStatus, config, UTCOffset);\n    });\n    return Promise.all(promises);\n  }\n}\n\nexport default PushWorker;\n"]}