{"version":3,"sources":["../src/triggers.js"],"names":["addFunction","addJob","addTrigger","addLiveQueryEventHandler","removeFunction","removeTrigger","_unregisterAll","getTrigger","triggerExists","getFunction","getJob","getJobs","getValidator","getRequestObject","getRequestQueryObject","getResponseObject","maybeRunAfterFindTrigger","maybeRunQueryTrigger","maybeRunTrigger","inflate","runLiveQueryEventHandlers","Types","beforeSave","afterSave","beforeDelete","afterDelete","beforeFind","afterFind","baseStore","Validators","Functions","Jobs","LiveQuery","Triggers","Object","keys","reduce","base","key","freeze","validateClassNameForTriggers","className","type","restrictedClassNames","indexOf","_triggerStore","functionName","handler","validationHandler","applicationId","Parse","jobName","push","forEach","appId","triggerType","manager","undefined","auth","parseObject","originalParseObject","config","request","triggerName","object","master","log","loggerController","headers","ip","original","isMaster","user","installationId","query","count","isGet","resolve","reject","success","response","objects","map","toJSON","equals","_getSaveJSON","error","code","message","Error","SCRIPT_FAILED","scriptError","userIdForLog","id","logTriggerAfterHook","input","cleanInput","logger","truncateLogMessage","JSON","stringify","info","logTriggerSuccessBeforeHook","result","cleanResult","logTriggerErrorBeforeHook","Promise","trigger","fromJSON","triggerPromise","then","promiseResults","results","restWhere","restOptions","parseQuery","Query","_where","include","length","_include","split","skip","_skip","limit","_limit","requestObject","queryResult","jsonQuery","where","order","readPreference","includeReadPreference","subqueryReadPreference","err","javascriptKey","masterKey","data","restObject","copy"],"mappings":"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","file":"triggers.js","sourcesContent":["// triggers.js\nimport Parse    from 'parse/node';\nimport { logger } from './logger';\n\nexport const Types = {\n  beforeSave: 'beforeSave',\n  afterSave: 'afterSave',\n  beforeDelete: 'beforeDelete',\n  afterDelete: 'afterDelete',\n  beforeFind: 'beforeFind',\n  afterFind: 'afterFind'\n};\n\nconst baseStore = function() {\n  const Validators = {};\n  const Functions = {};\n  const Jobs = {};\n  const LiveQuery = [];\n  const Triggers = Object.keys(Types).reduce(function(base, key){\n    base[key] = {};\n    return base;\n  }, {});\n\n  return Object.freeze({\n    Functions,\n    Jobs,\n    Validators,\n    Triggers,\n    LiveQuery,\n  });\n};\n\nfunction validateClassNameForTriggers(className, type) {\n  const restrictedClassNames = [ '_Session' ];\n  if (restrictedClassNames.indexOf(className) != -1) {\n    throw `Triggers are not supported for ${className} class.`;\n  }\n  if (type == Types.beforeSave && className === '_PushStatus') {\n    // _PushStatus uses undocumented nested key increment ops\n    // allowing beforeSave would mess up the objects big time\n    // TODO: Allow proper documented way of using nested increment ops\n    throw 'Only afterSave is allowed on _PushStatus';\n  }\n  return className;\n}\n\nconst _triggerStore = {};\n\nexport function addFunction(functionName, handler, validationHandler, applicationId) {\n  applicationId = applicationId || Parse.applicationId;\n  _triggerStore[applicationId] =  _triggerStore[applicationId] || baseStore();\n  _triggerStore[applicationId].Functions[functionName] = handler;\n  _triggerStore[applicationId].Validators[functionName] = validationHandler;\n}\n\nexport function addJob(jobName, handler, applicationId) {\n  applicationId = applicationId || Parse.applicationId;\n  _triggerStore[applicationId] =  _triggerStore[applicationId] || baseStore();\n  _triggerStore[applicationId].Jobs[jobName] = handler;\n}\n\nexport function addTrigger(type, className, handler, applicationId) {\n  validateClassNameForTriggers(className, type);\n  applicationId = applicationId || Parse.applicationId;\n  _triggerStore[applicationId] =  _triggerStore[applicationId] || baseStore();\n  _triggerStore[applicationId].Triggers[type][className] = handler;\n}\n\nexport function addLiveQueryEventHandler(handler, applicationId) {\n  applicationId = applicationId || Parse.applicationId;\n  _triggerStore[applicationId] =  _triggerStore[applicationId] || baseStore();\n  _triggerStore[applicationId].LiveQuery.push(handler);\n}\n\nexport function removeFunction(functionName, applicationId) {\n  applicationId = applicationId || Parse.applicationId;\n  delete _triggerStore[applicationId].Functions[functionName]\n}\n\nexport function removeTrigger(type, className, applicationId) {\n  applicationId = applicationId || Parse.applicationId;\n  delete _triggerStore[applicationId].Triggers[type][className]\n}\n\nexport function _unregisterAll() {\n  Object.keys(_triggerStore).forEach(appId => delete _triggerStore[appId]);\n}\n\nexport function getTrigger(className, triggerType, applicationId) {\n  if (!applicationId) {\n    throw \"Missing ApplicationID\";\n  }\n  var manager = _triggerStore[applicationId]\n  if (manager\n    && manager.Triggers\n    && manager.Triggers[triggerType]\n    && manager.Triggers[triggerType][className]) {\n    return manager.Triggers[triggerType][className];\n  }\n  return undefined;\n}\n\nexport function triggerExists(className: string, type: string, applicationId: string): boolean {\n  return (getTrigger(className, type, applicationId) != undefined);\n}\n\nexport function getFunction(functionName, applicationId) {\n  var manager = _triggerStore[applicationId];\n  if (manager && manager.Functions) {\n    return manager.Functions[functionName];\n  }\n  return undefined;\n}\n\nexport function getJob(jobName, applicationId) {\n  var manager = _triggerStore[applicationId];\n  if (manager && manager.Jobs) {\n    return manager.Jobs[jobName];\n  }\n  return undefined;\n}\n\nexport function getJobs(applicationId) {\n  var manager = _triggerStore[applicationId];\n  if (manager && manager.Jobs) {\n    return manager.Jobs;\n  }\n  return undefined;\n}\n\n\nexport function getValidator(functionName, applicationId) {\n  var manager = _triggerStore[applicationId];\n  if (manager && manager.Validators) {\n    return manager.Validators[functionName];\n  }\n  return undefined;\n}\n\nexport function getRequestObject(triggerType, auth, parseObject, originalParseObject, config) {\n  var request = {\n    triggerName: triggerType,\n    object: parseObject,\n    master: false,\n    log: config.loggerController,\n    headers: config.headers,\n    ip: config.ip,\n  };\n\n  if (originalParseObject) {\n    request.original = originalParseObject;\n  }\n\n  if (!auth) {\n    return request;\n  }\n  if (auth.isMaster) {\n    request['master'] = true;\n  }\n  if (auth.user) {\n    request['user'] = auth.user;\n  }\n  if (auth.installationId) {\n    request['installationId'] = auth.installationId;\n  }\n  return request;\n}\n\nexport function getRequestQueryObject(triggerType, auth, query, count, config, isGet) {\n  isGet = !!isGet;\n\n  var request = {\n    triggerName: triggerType,\n    query,\n    master: false,\n    count,\n    log: config.loggerController,\n    isGet,\n    headers: config.headers,\n    ip: config.ip,\n  };\n\n  if (!auth) {\n    return request;\n  }\n  if (auth.isMaster) {\n    request['master'] = true;\n  }\n  if (auth.user) {\n    request['user'] = auth.user;\n  }\n  if (auth.installationId) {\n    request['installationId'] = auth.installationId;\n  }\n  return request;\n}\n\n// Creates the response object, and uses the request object to pass data\n// The API will call this with REST API formatted objects, this will\n// transform them to Parse.Object instances expected by Cloud Code.\n// Any changes made to the object in a beforeSave will be included.\nexport function getResponseObject(request, resolve, reject) {\n  return {\n    success: function(response) {\n      if (request.triggerName === Types.afterFind) {\n        if(!response){\n          response = request.objects;\n        }\n        response = response.map(object => {\n          return object.toJSON();\n        });\n        return resolve(response);\n      }\n      // Use the JSON response\n      if (response && !request.object.equals(response)\n          && request.triggerName === Types.beforeSave) {\n        return resolve(response);\n      }\n      response = {};\n      if (request.triggerName === Types.beforeSave) {\n        response['object'] = request.object._getSaveJSON();\n      }\n      return resolve(response);\n    },\n    error: function(code, message) {\n      if (!message) {\n        if (code instanceof Parse.Error) {\n          return reject(code)\n        }\n        message = code;\n        code = Parse.Error.SCRIPT_FAILED;\n      }\n      var scriptError = new Parse.Error(code, message);\n      return reject(scriptError);\n    }\n  }\n}\n\nfunction userIdForLog(auth) {\n  return (auth && auth.user) ? auth.user.id : undefined;\n}\n\nfunction logTriggerAfterHook(triggerType, className, input, auth) {\n  const cleanInput = logger.truncateLogMessage(JSON.stringify(input));\n  logger.info(`${triggerType} triggered for ${className} for user ${userIdForLog(auth)}:\\n  Input: ${cleanInput}`, {\n    className,\n    triggerType,\n    user: userIdForLog(auth)\n  });\n}\n\nfunction logTriggerSuccessBeforeHook(triggerType, className, input, result, auth) {\n  const cleanInput = logger.truncateLogMessage(JSON.stringify(input));\n  const cleanResult = logger.truncateLogMessage(JSON.stringify(result));\n  logger.info(`${triggerType} triggered for ${className} for user ${userIdForLog(auth)}:\\n  Input: ${cleanInput}\\n  Result: ${cleanResult}`, {\n    className,\n    triggerType,\n    user: userIdForLog(auth)\n  });\n}\n\nfunction logTriggerErrorBeforeHook(triggerType, className, input, auth, error) {\n  const cleanInput = logger.truncateLogMessage(JSON.stringify(input));\n  logger.error(`${triggerType} failed for ${className} for user ${userIdForLog(auth)}:\\n  Input: ${cleanInput}\\n  Error: ${JSON.stringify(error)}`, {\n    className,\n    triggerType,\n    error,\n    user: userIdForLog(auth)\n  });\n}\n\nexport function maybeRunAfterFindTrigger(triggerType, auth, className, objects, config) {\n  return new Promise((resolve, reject) => {\n    const trigger = getTrigger(className, triggerType, config.applicationId);\n    if (!trigger) {\n      return resolve();\n    }\n    const request = getRequestObject(triggerType, auth, null, null, config);\n    const response = getResponseObject(request,\n      object => {\n        resolve(object);\n      },\n      error => {\n        reject(error);\n      });\n    logTriggerSuccessBeforeHook(triggerType, className, 'AfterFind', JSON.stringify(objects), auth);\n    request.objects = objects.map(object => {\n      //setting the class name to transform into parse object\n      object.className = className;\n      return Parse.Object.fromJSON(object);\n    });\n    const triggerPromise = trigger(request, response);\n    if (triggerPromise && typeof triggerPromise.then === \"function\") {\n      return triggerPromise.then(promiseResults => {\n        if(promiseResults) {\n          resolve(promiseResults);\n        }else{\n          return reject(new Parse.Error(Parse.Error.SCRIPT_FAILED, \"AfterFind expect results to be returned in the promise\"));\n        }\n      });\n    }\n  }).then((results) => {\n    logTriggerAfterHook(triggerType, className, JSON.stringify(results), auth);\n    return results;\n  });\n}\n\nexport function maybeRunQueryTrigger(triggerType, className, restWhere, restOptions, config, auth, isGet) {\n  const trigger = getTrigger(className, triggerType, config.applicationId);\n  if (!trigger) {\n    return Promise.resolve({\n      restWhere,\n      restOptions\n    });\n  }\n\n  const parseQuery = new Parse.Query(className);\n  if (restWhere) {\n    parseQuery._where = restWhere;\n  }\n  let count = false;\n  if (restOptions) {\n    if (restOptions.include && restOptions.include.length > 0) {\n      parseQuery._include = restOptions.include.split(',');\n    }\n    if (restOptions.skip) {\n      parseQuery._skip = restOptions.skip;\n    }\n    if (restOptions.limit) {\n      parseQuery._limit = restOptions.limit;\n    }\n    count = !!restOptions.count;\n  }\n  const requestObject = getRequestQueryObject(triggerType, auth, parseQuery, count, config, isGet);\n  return Promise.resolve().then(() => {\n    return trigger(requestObject);\n  }).then((result) => {\n    let queryResult = parseQuery;\n    if (result && result instanceof Parse.Query) {\n      queryResult = result;\n    }\n    const jsonQuery = queryResult.toJSON();\n    if (jsonQuery.where) {\n      restWhere = jsonQuery.where;\n    }\n    if (jsonQuery.limit) {\n      restOptions = restOptions || {};\n      restOptions.limit = jsonQuery.limit;\n    }\n    if (jsonQuery.skip) {\n      restOptions = restOptions || {};\n      restOptions.skip = jsonQuery.skip;\n    }\n    if (jsonQuery.include) {\n      restOptions = restOptions || {};\n      restOptions.include = jsonQuery.include;\n    }\n    if (jsonQuery.keys) {\n      restOptions = restOptions || {};\n      restOptions.keys = jsonQuery.keys;\n    }\n    if (jsonQuery.order) {\n      restOptions = restOptions || {};\n      restOptions.order = jsonQuery.order;\n    }\n    if (requestObject.readPreference) {\n      restOptions = restOptions || {};\n      restOptions.readPreference = requestObject.readPreference;\n    }\n    if (requestObject.includeReadPreference) {\n      restOptions = restOptions || {};\n      restOptions.includeReadPreference = requestObject.includeReadPreference;\n    }\n    if (requestObject.subqueryReadPreference) {\n      restOptions = restOptions || {};\n      restOptions.subqueryReadPreference = requestObject.subqueryReadPreference;\n    }\n    return {\n      restWhere,\n      restOptions\n    };\n  }, (err) => {\n    if (typeof err === 'string') {\n      throw new Parse.Error(1, err);\n    } else {\n      throw err;\n    }\n  });\n}\n\n// To be used as part of the promise chain when saving/deleting an object\n// Will resolve successfully if no trigger is configured\n// Resolves to an object, empty or containing an object key. A beforeSave\n// trigger will set the object key to the rest format object to save.\n// originalParseObject is optional, we only need that for before/afterSave functions\nexport function maybeRunTrigger(triggerType, auth, parseObject, originalParseObject, config) {\n  if (!parseObject) {\n    return Promise.resolve({});\n  }\n  return new Promise(function (resolve, reject) {\n    var trigger = getTrigger(parseObject.className, triggerType, config.applicationId);\n    if (!trigger) return resolve();\n    var request = getRequestObject(triggerType, auth, parseObject, originalParseObject, config);\n    var response = getResponseObject(request, (object) => {\n      logTriggerSuccessBeforeHook(\n        triggerType, parseObject.className, parseObject.toJSON(), object, auth);\n      resolve(object);\n    }, (error) => {\n      logTriggerErrorBeforeHook(\n        triggerType, parseObject.className, parseObject.toJSON(), auth, error);\n      reject(error);\n    });\n    // Force the current Parse app before the trigger\n    Parse.applicationId = config.applicationId;\n    Parse.javascriptKey = config.javascriptKey || '';\n    Parse.masterKey = config.masterKey;\n\n    // AfterSave and afterDelete triggers can return a promise, which if they\n    // do, needs to be resolved before this promise is resolved,\n    // so trigger execution is synced with RestWrite.execute() call.\n    // If triggers do not return a promise, they can run async code parallel\n    // to the RestWrite.execute() call.\n    var triggerPromise = trigger(request, response);\n    if(triggerType === Types.afterSave || triggerType === Types.afterDelete)\n    {\n      logTriggerAfterHook(triggerType, parseObject.className, parseObject.toJSON(), auth);\n      if(triggerPromise && typeof triggerPromise.then === \"function\") {\n        return triggerPromise.then(resolve, resolve);\n      }\n      else {\n        return resolve();\n      }\n    }\n  });\n}\n\n// Converts a REST-format object to a Parse.Object\n// data is either className or an object\nexport function inflate(data, restObject) {\n  var copy = typeof data == 'object' ? data : {className: data};\n  for (var key in restObject) {\n    copy[key] = restObject[key];\n  }\n  return Parse.Object.fromJSON(copy);\n}\n\nexport function runLiveQueryEventHandlers(data, applicationId = Parse.applicationId) {\n  if (!_triggerStore || !_triggerStore[applicationId] || !_triggerStore[applicationId].LiveQuery) { return; }\n  _triggerStore[applicationId].LiveQuery.forEach((handler) => handler(data));\n}\n"]}