{"version":3,"sources":["../../src/LiveQuery/ParseCloudCodePublisher.js"],"names":["ParseCloudCodePublisher","constructor","config","parsePublisher","ParsePubSub","createPublisher","onCloudCodeAfterSave","request","_onCloudCodeMessage","Parse","applicationId","onCloudCodeAfterDelete","type","logger","verbose","object","original","message","currentParseObject","_toFullJSON","originalParseObject","publish","JSON","stringify"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,uBAAN,CAA8B;;AAG5B;AACA;AACAC,cAAYC,SAAc,EAA1B,EAA8B;AAC5B,SAAKC,cAAL,GAAsBC,yBAAYC,eAAZ,CAA4BH,MAA5B,CAAtB;AACD;;AAEDI,uBAAqBC,OAArB,EAAyC;AACvC,SAAKC,mBAAL,CAAyBC,eAAMC,aAAN,GAAsB,WAA/C,EAA4DH,OAA5D;AACD;;AAEDI,yBAAuBJ,OAAvB,EAA2C;AACzC,SAAKC,mBAAL,CAAyBC,eAAMC,aAAN,GAAsB,aAA/C,EAA8DH,OAA9D;AACD;;AAED;AACAC,sBAAoBI,IAApB,EAAkCL,OAAlC,EAAsD;AACpDM,qBAAOC,OAAP,CAAe,0DAAf,EAA2EP,QAAQQ,MAAnF,EAA2FR,QAAQS,QAAnG;AACA;AACA,UAAMC,UAAU;AACdC,0BAAoBX,QAAQQ,MAAR,CAAeI,WAAf;AADN,KAAhB;AAGA,QAAIZ,QAAQS,QAAZ,EAAsB;AACpBC,cAAQG,mBAAR,GAA8Bb,QAAQS,QAAR,CAAiBG,WAAjB,EAA9B;AACD;AACD,SAAKhB,cAAL,CAAoBkB,OAApB,CAA4BT,IAA5B,EAAkCU,KAAKC,SAAL,CAAeN,OAAf,CAAlC;AACD;AA5B2B;;QAgC5BjB,uB,GAAAA,uB","file":"ParseCloudCodePublisher.js","sourcesContent":["import { ParsePubSub } from './ParsePubSub';\nimport Parse  from 'parse/node';\nimport logger from '../logger';\n\nclass ParseCloudCodePublisher {\n  parsePublisher: Object;\n\n  // config object of the publisher, right now it only contains the redisURL,\n  // but we may extend it later.\n  constructor(config: any = {}) {\n    this.parsePublisher = ParsePubSub.createPublisher(config);\n  }\n\n  onCloudCodeAfterSave(request: any): void {\n    this._onCloudCodeMessage(Parse.applicationId + 'afterSave', request);\n  }\n\n  onCloudCodeAfterDelete(request: any): void {\n    this._onCloudCodeMessage(Parse.applicationId + 'afterDelete', request);\n  }\n\n  // Request is the request object from cloud code functions. request.object is a ParseObject.\n  _onCloudCodeMessage(type: string, request: any): void {\n    logger.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original);\n    // We need the full JSON which includes className\n    const message = {\n      currentParseObject: request.object._toFullJSON()\n    }\n    if (request.original) {\n      message.originalParseObject = request.original._toFullJSON();\n    }\n    this.parsePublisher.publish(type, JSON.stringify(message));\n  }\n}\n\nexport {\n  ParseCloudCodePublisher\n}\n"]}