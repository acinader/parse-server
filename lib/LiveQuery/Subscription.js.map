{"version":3,"sources":["../../src/LiveQuery/Subscription.js"],"names":["Subscription","constructor","className","query","queryHash","hash","clientRequestIds","Map","addClientSubscription","clientId","requestId","has","set","requestIds","get","push","deleteClientSubscription","logger","error","index","indexOf","splice","length","delete","hasSubscribingClient","size"],"mappings":";;;;;;;AAAA;;;;;;AAKA,MAAMA,YAAN,CAAmB;AACjB;AAMAC,cAAYC,SAAZ,EAA+BC,KAA/B,EAAiDC,SAAjD,EAAoE;AAClE,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKE,IAAL,GAAYD,SAAZ;AACA,SAAKE,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AACD;;AAEDC,wBAAsBC,QAAtB,EAAwCC,SAAxC,EAAiE;AAC/D,QAAI,CAAC,KAAKJ,gBAAL,CAAsBK,GAAtB,CAA0BF,QAA1B,CAAL,EAA0C;AACxC,WAAKH,gBAAL,CAAsBM,GAAtB,CAA0BH,QAA1B,EAAoC,EAApC;AACD;AACD,UAAMI,aAAa,KAAKP,gBAAL,CAAsBQ,GAAtB,CAA0BL,QAA1B,CAAnB;AACAI,eAAWE,IAAX,CAAgBL,SAAhB;AACD;;AAEDM,2BAAyBP,QAAzB,EAA2CC,SAA3C,EAAoE;AAClE,UAAMG,aAAa,KAAKP,gBAAL,CAAsBQ,GAAtB,CAA0BL,QAA1B,CAAnB;AACA,QAAI,OAAOI,UAAP,KAAsB,WAA1B,EAAuC;AACrCI,uBAAOC,KAAP,CAAa,kCAAb,EAAiDT,QAAjD;AACA;AACD;;AAED,UAAMU,QAAQN,WAAWO,OAAX,CAAmBV,SAAnB,CAAd;AACA,QAAIS,QAAQ,CAAZ,EAAe;AACbF,uBAAOC,KAAP,CAAa,kDAAb,EAAiET,QAAjE,EAA2EC,SAA3E;AACA;AACD;AACDG,eAAWQ,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACA;AACA,QAAIN,WAAWS,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,WAAKhB,gBAAL,CAAsBiB,MAAtB,CAA6Bd,QAA7B;AACD;AACF;;AAEDe,yBAAgC;AAC9B,WAAO,KAAKlB,gBAAL,CAAsBmB,IAAtB,GAA6B,CAApC;AACD;AA3CgB;;QA+CjBzB,Y,GAAAA,Y","file":"Subscription.js","sourcesContent":["import logger from '../logger';\n\nexport type FlattenedObjectData = { [attr: string]: any };\nexport type QueryData = { [attr: string]: any };\n\nclass Subscription {\n  // It is query condition eg query.where\n  query: QueryData;\n  className: string;\n  hash: string;\n  clientRequestIds: Object;\n\n  constructor(className: string, query: QueryData, queryHash: string) {\n    this.className = className;\n    this.query = query;\n    this.hash = queryHash;\n    this.clientRequestIds = new Map();\n  }\n\n  addClientSubscription(clientId: number, requestId: number): void {\n    if (!this.clientRequestIds.has(clientId)) {\n      this.clientRequestIds.set(clientId, []);\n    }\n    const requestIds = this.clientRequestIds.get(clientId);\n    requestIds.push(requestId);\n  }\n\n  deleteClientSubscription(clientId: number, requestId: number): void {\n    const requestIds = this.clientRequestIds.get(clientId);\n    if (typeof requestIds === 'undefined') {\n      logger.error('Can not find client %d to delete', clientId);\n      return;\n    }\n\n    const index = requestIds.indexOf(requestId);\n    if (index < 0) {\n      logger.error('Can not find client %d subscription %d to delete', clientId, requestId);\n      return;\n    }\n    requestIds.splice(index, 1);\n    // Delete client reference if it has no subscription\n    if (requestIds.length == 0) {\n      this.clientRequestIds.delete(clientId);\n    }\n  }\n\n  hasSubscribingClient(): boolean {\n    return this.clientRequestIds.size > 0;\n  }\n}\n\nexport {\n  Subscription\n}\n"]}