{"version":3,"sources":["../../src/LiveQuery/ParseWebSocketServer.js"],"names":["typeMap","Map","getWS","require","e","ParseWebSocketServer","constructor","server","onConnect","websocketTimeout","WebSocketServer","Server","wss","on","logger","info","ws","ParseWebSocket","pingIntervalId","setInterval","readyState","OPEN","ping","clearInterval","type","callback","wsType","has","get","send","message"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,UAAU,IAAIC,GAAJ,CAAQ,CAAC,CAAC,YAAD,EAAe,OAAf,CAAD,CAAR,CAAhB;AACA,MAAMC,QAAQ,YAAW;AACvB,MAAI;AACF,WAAOC,QAAQ,KAAR,CAAP;AACD,GAFD,CAEE,OAAMC,CAAN,EAAS;AACT,WAAOD,QAAQ,IAAR,CAAP;AACD;AACF,CAND;;AAQO,MAAME,oBAAN,CAA2B;;AAGhCC,cAAYC,MAAZ,EAAyBC,SAAzB,EAA8CC,mBAA2B,KAAK,IAA9E,EAAoF;AAClF,UAAMC,kBAAkBR,QAAQS,MAAhC;AACA,UAAMC,MAAM,IAAIF,eAAJ,CAAoB,EAAEH,QAAQA,MAAV,EAApB,CAAZ;AACAK,QAAIC,EAAJ,CAAO,WAAP,EAAoB,MAAM;AACxBC,uBAAOC,IAAP,CAAY,uCAAZ;AACD,KAFD;AAGAH,QAAIC,EAAJ,CAAO,YAAP,EAAsBG,EAAD,IAAQ;AAC3BR,gBAAU,IAAIS,cAAJ,CAAmBD,EAAnB,CAAV;AACA;AACA,YAAME,iBAAiBC,YAAY,MAAM;AACvC,YAAIH,GAAGI,UAAH,IAAiBJ,GAAGK,IAAxB,EAA8B;AAC5BL,aAAGM,IAAH;AACD,SAFD,MAEO;AACLC,wBAAcL,cAAd;AACD;AACF,OANsB,EAMpBT,gBANoB,CAAvB;AAOD,KAVD;AAWA,SAAKF,MAAL,GAAcK,GAAd;AACD;AArB+B;;QAArBP,oB,GAAAA,oB;AAwBN,MAAMY,cAAN,CAAqB;;AAG1BX,cAAYU,EAAZ,EAAqB;AACnB,SAAKA,EAAL,GAAUA,EAAV;AACD;;AAEDH,KAAGW,IAAH,EAAiBC,QAAjB,EAAiC;AAC/B,UAAMC,SAAS1B,QAAQ2B,GAAR,CAAYH,IAAZ,IAAoBxB,QAAQ4B,GAAR,CAAYJ,IAAZ,CAApB,GAAwCA,IAAvD;AACA,SAAKR,EAAL,CAAQH,EAAR,CAAWa,MAAX,EAAmBD,QAAnB;AACD;;AAEDI,OAAKC,OAAL,EAAyB;AACvB,SAAKd,EAAL,CAAQa,IAAR,CAAaC,OAAb;AACD;AAdyB;QAAfb,c,GAAAA,c","file":"ParseWebSocketServer.js","sourcesContent":["import logger from '../logger';\n\nconst typeMap = new Map([['disconnect', 'close']]);\nconst getWS = function() {\n  try {\n    return require('uws');\n  } catch(e) {\n    return require('ws');\n  }\n}\n\nexport class ParseWebSocketServer {\n  server: Object;\n\n  constructor(server: any, onConnect: Function, websocketTimeout: number = 10 * 1000) {\n    const WebSocketServer = getWS().Server;\n    const wss = new WebSocketServer({ server: server });\n    wss.on('listening', () => {\n      logger.info('Parse LiveQuery Server starts running');\n    });\n    wss.on('connection', (ws) => {\n      onConnect(new ParseWebSocket(ws));\n      // Send ping to client periodically\n      const pingIntervalId = setInterval(() => {\n        if (ws.readyState == ws.OPEN) {\n          ws.ping();\n        } else {\n          clearInterval(pingIntervalId);\n        }\n      }, websocketTimeout);\n    });\n    this.server = wss;\n  }\n}\n\nexport class ParseWebSocket {\n  ws: any;\n\n  constructor(ws: any) {\n    this.ws = ws;\n  }\n\n  on(type: string, callback): void {\n    const wsType = typeMap.has(type) ? typeMap.get(type) : type;\n    this.ws.on(wsType, callback);\n  }\n\n  send(message: any): void {\n    this.ws.send(message);\n  }\n}\n"]}