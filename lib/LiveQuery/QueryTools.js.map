{"version":3,"sources":["../../src/LiveQuery/QueryTools.js"],"names":["equalObjects","require","Id","Parse","flattenOrQueries","where","hasOwnProperty","accum","i","$or","length","concat","stringify","object","replace","Array","isArray","copy","map","sort","join","sections","keys","Object","k","push","queryHash","query","Query","className","_where","columns","values","uniqueColumns","subValues","j","contains","haystack","needle","__type","ptr","objectId","indexOf","matchesQuery","id","field","matchesKeyConstraints","equalObjectsGeneric","obj","compareTo","eqlFn","key","constraints","keyComponents","split","subObjectKey","keyRemainder","slice","_decode","condition","propertyExists","existenceIsRequired","test","expString","escapeEnd","escapeStart","substring","Math","max","exp","RegExp","$options","distance","radiansTo","$maxDistance","Infinity","southWest","$box","northEast","latitude","longitude","QueryTools","module","exports"],"mappings":"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","file":"QueryTools.js","sourcesContent":["var equalObjects = require('./equalObjects');\nvar Id = require('./Id');\nvar Parse = require('parse/node');\n\n/**\n * Query Hashes are deterministic hashes for Parse Queries.\n * Any two queries that have the same set of constraints will produce the same\n * hash. This lets us reliably group components by the queries they depend upon,\n * and quickly determine if a query has changed.\n */\n\n/**\n * Convert $or queries into an array of where conditions\n */\nfunction flattenOrQueries(where) {\n  if (!where.hasOwnProperty('$or')) {\n    return where;\n  }\n  var accum = [];\n  for (var i = 0; i < where.$or.length; i++) {\n    accum = accum.concat(where.$or[i]);\n  }\n  return accum;\n}\n\n/**\n * Deterministically turns an object into a string. Disregards ordering\n */\nfunction stringify(object): string {\n  if (typeof object !== 'object' || object === null) {\n    if (typeof object === 'string') {\n      return '\"' + object.replace(/\\|/g, '%|') + '\"';\n    }\n    return object + '';\n  }\n  if (Array.isArray(object)) {\n    var copy = object.map(stringify);\n    copy.sort();\n    return '[' + copy.join(',') + ']';\n  }\n  var sections = [];\n  var keys = Object.keys(object);\n  keys.sort();\n  for (var k = 0; k < keys.length; k++) {\n    sections.push(stringify(keys[k]) + ':' + stringify(object[keys[k]]));\n  }\n  return '{' + sections.join(',') + '}';\n}\n\n/**\n * Generate a hash from a query, with unique fields for columns, values, order,\n * skip, and limit.\n */\nfunction queryHash(query) {\n  if (query instanceof Parse.Query) {\n    query = {\n      className: query.className,\n      where: query._where\n    }\n  }\n  var where = flattenOrQueries(query.where || {});\n  var columns = [];\n  var values = [];\n  var i;\n  if (Array.isArray(where)) {\n    var uniqueColumns = {};\n    for (i = 0; i < where.length; i++) {\n      var subValues = {};\n      var keys = Object.keys(where[i]);\n      keys.sort();\n      for (var j = 0; j < keys.length; j++) {\n        subValues[keys[j]] = where[i][keys[j]];\n        uniqueColumns[keys[j]] = true;\n      }\n      values.push(subValues);\n    }\n    columns = Object.keys(uniqueColumns);\n    columns.sort();\n  } else {\n    columns = Object.keys(where);\n    columns.sort();\n    for (i = 0; i < columns.length; i++) {\n      values.push(where[columns[i]]);\n    }\n  }\n\n  var sections = [columns.join(','), stringify(values)];\n\n  return query.className + ':' + sections.join('|');\n}\n\n/**\n * contains -- Determines if an object is contained in a list with special handling for Parse pointers.\n */\nfunction contains(haystack: Array, needle: any): boolean {\n  if (needle && needle.__type && needle.__type === 'Pointer') {\n    for (const i in haystack) {\n      const ptr = haystack[i];\n      if (typeof ptr === 'string' && ptr === needle.objectId) {\n        return true;\n      }\n      if (ptr.className === needle.className &&\n          ptr.objectId === needle.objectId) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return haystack.indexOf(needle) > -1;\n}\n/**\n * matchesQuery -- Determines if an object would be returned by a Parse Query\n * It's a lightweight, where-clause only implementation of a full query engine.\n * Since we find queries that match objects, rather than objects that match\n * queries, we can avoid building a full-blown query tool.\n */\nfunction matchesQuery(object: any, query: any): boolean {\n  if (query instanceof Parse.Query) {\n    var className =\n      (object.id instanceof Id) ? object.id.className : object.className;\n    if (className !== query.className) {\n      return false;\n    }\n    return matchesQuery(object, query._where);\n  }\n  for (var field in query) {\n    if (!matchesKeyConstraints(object, field, query[field])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction equalObjectsGeneric(obj, compareTo, eqlFn) {\n  if (Array.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      if (eqlFn(obj[i], compareTo)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return eqlFn(obj, compareTo);\n}\n\n\n/**\n * Determines whether an object matches a single key's constraints\n */\nfunction matchesKeyConstraints(object, key, constraints) {\n  if (constraints === null) {\n    return false;\n  }\n  if(key.indexOf(\".\") >= 0){\n    // Key references a subobject\n    var keyComponents = key.split(\".\");\n    var subObjectKey = keyComponents[0];\n    var keyRemainder = keyComponents.slice(1).join(\".\");\n    return matchesKeyConstraints(object[subObjectKey] || {}, keyRemainder, constraints);\n  }\n  var i;\n  if (key === '$or') {\n    for (i = 0; i < constraints.length; i++) {\n      if (matchesQuery(object, constraints[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  if (key === '$relatedTo') {\n    // Bail! We can't handle relational queries locally\n    return false;\n  }\n  // Equality (or Array contains) cases\n  if (typeof constraints !== 'object') {\n    if (Array.isArray(object[key])) {\n      return object[key].indexOf(constraints) > -1;\n    }\n    return object[key] === constraints;\n  }\n  var compareTo;\n  if (constraints.__type) {\n    if (constraints.__type === 'Pointer') {\n      return equalObjectsGeneric(object[key], constraints, function(obj, ptr) {\n        return (\n          typeof obj !== 'undefined' &&\n          ptr.className === obj.className &&\n          ptr.objectId === obj.objectId\n        );\n      });\n    }\n\n    return equalObjectsGeneric(object[key], Parse._decode(key, constraints), equalObjects);\n  }\n  // More complex cases\n  for (var condition in constraints) {\n    compareTo = constraints[condition];\n    if (compareTo.__type) {\n      compareTo = Parse._decode(key, compareTo);\n    }\n    switch (condition) {\n    case '$lt':\n      if (object[key] >= compareTo) {\n        return false;\n      }\n      break;\n    case '$lte':\n      if (object[key] > compareTo) {\n        return false;\n      }\n      break;\n    case '$gt':\n      if (object[key] <= compareTo) {\n        return false;\n      }\n      break;\n    case '$gte':\n      if (object[key] < compareTo) {\n        return false;\n      }\n      break;\n    case '$ne':\n      if (equalObjects(object[key], compareTo)) {\n        return false;\n      }\n      break;\n    case '$in':\n      if (!contains(compareTo, object[key])) {\n        return false;\n      }\n      break;\n    case '$nin':\n      if (contains(compareTo, object[key])) {\n        return false;\n      }\n      break;\n    case '$all':\n      for (i = 0; i < compareTo.length; i++) {\n        if (object[key].indexOf(compareTo[i]) < 0) {\n          return false;\n        }\n      }\n      break;\n    case '$exists': {\n      const propertyExists = typeof object[key] !== 'undefined';\n      const existenceIsRequired = constraints['$exists'];\n      if (typeof constraints['$exists'] !== 'boolean') {\n        // The SDK will never submit a non-boolean for $exists, but if someone\n        // tries to submit a non-boolean for $exits outside the SDKs, just ignore it.\n        break;\n      }\n      if ((!propertyExists && existenceIsRequired) || (propertyExists && !existenceIsRequired)) {\n        return false;\n      }\n      break;\n    }\n    case '$regex':\n      if (typeof compareTo === 'object') {\n        return compareTo.test(object[key]);\n      }\n      // JS doesn't support perl-style escaping\n      var expString = '';\n      var escapeEnd = -2;\n      var escapeStart = compareTo.indexOf('\\\\Q');\n      while (escapeStart > -1) {\n        // Add the unescaped portion\n        expString += compareTo.substring(escapeEnd + 2, escapeStart);\n        escapeEnd = compareTo.indexOf('\\\\E', escapeStart);\n        if (escapeEnd > -1) {\n          expString += compareTo.substring(escapeStart + 2, escapeEnd)\n            .replace(/\\\\\\\\\\\\\\\\E/g, '\\\\E').replace(/\\W/g, '\\\\$&');\n        }\n\n        escapeStart = compareTo.indexOf('\\\\Q', escapeEnd);\n      }\n      expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));\n      var exp = new RegExp(expString, constraints.$options || '');\n      if (!exp.test(object[key])) {\n        return false;\n      }\n      break;\n    case '$nearSphere':\n      if (!compareTo || !object[key]) {\n        return false;\n      }\n      var distance = compareTo.radiansTo(object[key]);\n      var max = constraints.$maxDistance || Infinity;\n      return distance <= max;\n    case '$within':\n      if (!compareTo || !object[key]) {\n        return false;\n      }\n      var southWest = compareTo.$box[0];\n      var northEast = compareTo.$box[1];\n      if (southWest.latitude > northEast.latitude ||\n            southWest.longitude > northEast.longitude) {\n        // Invalid box, crosses the date line\n        return false;\n      }\n      return (\n        object[key].latitude > southWest.latitude &&\n          object[key].latitude < northEast.latitude &&\n          object[key].longitude > southWest.longitude &&\n          object[key].longitude < northEast.longitude\n      );\n    case '$options':\n      // Not a query type, but a way to add options to $regex. Ignore and\n      // avoid the default\n      break;\n    case '$maxDistance':\n      // Not a query type, but a way to add a cap to $nearSphere. Ignore and\n      // avoid the default\n      break;\n    case '$select':\n      return false;\n    case '$dontSelect':\n      return false;\n    default:\n      return false;\n    }\n  }\n  return true;\n}\n\nvar QueryTools = {\n  queryHash: queryHash,\n  matchesQuery: matchesQuery\n};\n\nmodule.exports = QueryTools;\n"]}