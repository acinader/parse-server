{"version":3,"sources":["../src/password.js"],"names":["bcrypt","require","e","hash","password","compare","hashedPassword","Promise","resolve","module","exports"],"mappings":";;AAAA;AACA;AACA,IAAIA,SAASC,QAAQ,UAAR,CAAb;;AAEA,IAAI;AACFD,WAASC,QAAQ,QAAR,CAAT;AACD,CAFD,CAEE,OAAMC,CAAN,EAAS,CAAS,CAAlB,CAAW;;AAEb;AACA,SAASC,IAAT,CAAcC,QAAd,EAAwB;AACtB,SAAOJ,OAAOG,IAAP,CAAYC,QAAZ,EAAsB,EAAtB,CAAP;AACD;;AAED;AACA;AACA,SAASC,OAAT,CAAiBD,QAAjB,EAA2BE,cAA3B,EAA2C;AACzC;AACA,MAAI,CAACF,QAAD,IAAa,CAACE,cAAlB,EAAkC;AAChC,WAAOC,QAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;AACD,SAAOR,OAAOK,OAAP,CAAeD,QAAf,EAAyBE,cAAzB,CAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiB;AACfP,QAAMA,IADS;AAEfE,WAASA;AAFM,CAAjB","file":"password.js","sourcesContent":["// Tools for encrypting and decrypting passwords.\n// Basically promise-friendly wrappers for bcrypt.\nvar bcrypt = require('bcryptjs');\n\ntry {\n  bcrypt = require('bcrypt');\n} catch(e) { /* */ }\n\n// Returns a promise for a hashed password string.\nfunction hash(password) {\n  return bcrypt.hash(password, 10);\n}\n\n// Returns a promise for whether this password compares to equal this\n// hashed password.\nfunction compare(password, hashedPassword) {\n  // Cannot bcrypt compare when one is undefined\n  if (!password || !hashedPassword) {\n    return Promise.resolve(false);\n  }\n  return bcrypt.compare(password, hashedPassword);\n}\n\nmodule.exports = {\n  hash: hash,\n  compare: compare\n};\n"]}