{"version":3,"sources":["../../src/Controllers/LiveQueryController.js"],"names":["LiveQueryController","constructor","config","classNames","Set","Array","liveQueryPublisher","ParseCloudCodePublisher","onAfterSave","className","currentObject","originalObject","hasLiveQuery","req","_makePublisherRequest","onCloudCodeAfterSave","onAfterDelete","onCloudCodeAfterDelete","has","object","original"],"mappings":";;;;;;;AAAA;;AACA;;AACO,MAAMA,mBAAN,CAA0B;;AAI/BC,cAAYC,MAAZ,EAAuC;AACrC;AACA,QAAI,CAACA,MAAD,IAAW,CAACA,OAAOC,UAAvB,EAAmC;AACjC,WAAKA,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACD,KAFD,MAEO,IAAIF,OAAOC,UAAP,YAA6BE,KAAjC,EAAwC;AAC7C,WAAKF,UAAL,GAAkB,IAAIC,GAAJ,CAAQF,OAAOC,UAAf,CAAlB;AACD,KAFM,MAEA;AACL,YAAM,gDAAN;AACD;AACD,SAAKG,kBAAL,GAA0B,IAAIC,gDAAJ,CAA4BL,MAA5B,CAA1B;AACD;;AAEDM,cAAYC,SAAZ,EAA+BC,aAA/B,EAAmDC,cAAnD,EAAwE;AACtE,QAAI,CAAC,KAAKC,YAAL,CAAkBH,SAAlB,CAAL,EAAmC;AACjC;AACD;AACD,UAAMI,MAAM,KAAKC,qBAAL,CAA2BJ,aAA3B,EAA0CC,cAA1C,CAAZ;AACA,SAAKL,kBAAL,CAAwBS,oBAAxB,CAA6CF,GAA7C;AACD;;AAEDG,gBAAcP,SAAd,EAAiCC,aAAjC,EAAqDC,cAArD,EAA0E;AACxE,QAAI,CAAC,KAAKC,YAAL,CAAkBH,SAAlB,CAAL,EAAmC;AACjC;AACD;AACD,UAAMI,MAAM,KAAKC,qBAAL,CAA2BJ,aAA3B,EAA0CC,cAA1C,CAAZ;AACA,SAAKL,kBAAL,CAAwBW,sBAAxB,CAA+CJ,GAA/C;AACD;;AAEDD,eAAaH,SAAb,EAAyC;AACvC,WAAO,KAAKN,UAAL,CAAgBe,GAAhB,CAAoBT,SAApB,CAAP;AACD;;AAEDK,wBAAsBJ,aAAtB,EAA0CC,cAA1C,EAAoE;AAClE,UAAME,MAAM;AACVM,cAAQT;AADE,KAAZ;AAGA,QAAIA,aAAJ,EAAmB;AACjBG,UAAIO,QAAJ,GAAeT,cAAf;AACD;AACD,WAAOE,GAAP;AACD;AA5C8B;;QAApBb,mB,GAAAA,mB;kBA+CEA,mB","file":"LiveQueryController.js","sourcesContent":["import { ParseCloudCodePublisher } from '../LiveQuery/ParseCloudCodePublisher';\nimport { LiveQueryOptions } from '../Options';\nexport class LiveQueryController {\n  classNames: any;\n  liveQueryPublisher: any;\n\n  constructor(config: ?LiveQueryOptions) {\n    // If config is empty, we just assume no classs needs to be registered as LiveQuery\n    if (!config || !config.classNames) {\n      this.classNames = new Set();\n    } else if (config.classNames instanceof Array) {\n      this.classNames = new Set(config.classNames);\n    } else {\n      throw 'liveQuery.classes should be an array of string'\n    }\n    this.liveQueryPublisher = new ParseCloudCodePublisher(config);\n  }\n\n  onAfterSave(className: string, currentObject: any, originalObject: any) {\n    if (!this.hasLiveQuery(className)) {\n      return;\n    }\n    const req = this._makePublisherRequest(currentObject, originalObject);\n    this.liveQueryPublisher.onCloudCodeAfterSave(req);\n  }\n\n  onAfterDelete(className: string, currentObject: any, originalObject: any) {\n    if (!this.hasLiveQuery(className)) {\n      return;\n    }\n    const req = this._makePublisherRequest(currentObject, originalObject);\n    this.liveQueryPublisher.onCloudCodeAfterDelete(req);\n  }\n\n  hasLiveQuery(className: string): boolean {\n    return this.classNames.has(className);\n  }\n\n  _makePublisherRequest(currentObject: any, originalObject: any): any {\n    const req = {\n      object: currentObject\n    };\n    if (currentObject) {\n      req.original = originalObject;\n    }\n    return req;\n  }\n}\n\nexport default LiveQueryController;\n"]}