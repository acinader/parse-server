{"version":3,"sources":["../../src/Controllers/LoggerController.js"],"names":["MILLISECONDS_IN_A_DAY","LOG_STRING_TRUNCATE_LENGTH","truncationMarker","LogLevel","INFO","ERROR","LogOrder","DESCENDING","ASCENDING","logLevels","LoggerController","AdaptableController","constructor","adapter","appId","options","logLevel","level","verbose","index","indexOf","forEach","levelIndex","maskSensitiveUrl","urlString","urlObj","url","parse","query","sanitizedQuery","key","slice","pathname","maskSensitive","argArray","map","e","replace","Array","isArray","item","body","Object","keys","params","log","args","concat","arg","apply","info","arguments","error","warn","debug","silly","logRequest","method","headers","stringifiedBody","JSON","stringify","logResponse","result","stringifiedResponse","validDateTime","date","Date","isNaN","getTime","truncateLogMessage","string","length","truncated","substring","parseOptions","from","now","until","size","Number","order","getLogs","Parse","Error","PUSH_MISCONFIGURED","expectedAdapterType","LoggerAdapter"],"mappings":"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","file":"LoggerController.js","sourcesContent":["import { Parse } from 'parse/node';\nimport AdaptableController from './AdaptableController';\nimport { LoggerAdapter } from '../Adapters/Logger/LoggerAdapter';\nimport url from 'url';\n\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\nconst LOG_STRING_TRUNCATE_LENGTH = 1000;\nconst truncationMarker = '... (truncated)';\n\nexport const LogLevel = {\n  INFO: 'info',\n  ERROR: 'error'\n}\n\nexport const LogOrder = {\n  DESCENDING: 'desc',\n  ASCENDING: 'asc'\n}\n\nconst logLevels = [\n  'error',\n  'warn',\n  'info',\n  'debug',\n  'verbose',\n  'silly',\n]\n\nexport class LoggerController extends AdaptableController {\n\n  constructor(adapter, appId, options = {logLevel: 'info'}) {\n    super(adapter, appId, options);\n    let level = 'info';\n    if (options.verbose) {\n      level = 'verbose';\n    }\n    if (options.logLevel) {\n      level = options.logLevel;\n    }\n    const index = logLevels.indexOf(level); // info by default\n    logLevels.forEach((level, levelIndex) => {\n      if (levelIndex > index) { // silence the levels that are > maxIndex\n        this[level] = () => {};\n      }\n    });\n  }\n\n  maskSensitiveUrl(urlString) {\n    const urlObj = url.parse(urlString, true);\n    const query = urlObj.query;\n    let sanitizedQuery = '?';\n\n    for(const key in query) {\n      if(key !== 'password') {\n        // normal value\n        sanitizedQuery += key + '=' + query[key] + '&';\n      } else {\n        // password value, redact it\n        sanitizedQuery += key + '=' + '********' + '&';\n      }\n    }\n\n    // trim last character, ? or &\n    sanitizedQuery = sanitizedQuery.slice(0, -1);\n\n    // return original path name with sanitized params attached\n    return urlObj.pathname + sanitizedQuery;\n  }\n\n  maskSensitive(argArray) {\n    return argArray.map(e => {\n      if (!e) {\n        return e;\n      }\n\n      if (typeof e === 'string') {\n        return e.replace(/(password\".?:.?\")[^\"]*\"/g, '$1********\"');\n      }\n      // else it is an object...\n\n      // check the url\n      if (e.url) {\n        // for strings\n        if (typeof e.url === 'string') {\n          e.url = this.maskSensitiveUrl(e.url);\n        } else if (Array.isArray(e.url)) { // for strings in array\n          e.url = e.url.map(item => {\n            if (typeof item === 'string') {\n              return this.maskSensitiveUrl(item);\n            }\n\n            return item;\n          });\n        }\n      }\n\n      if (e.body) {\n        for (const key of Object.keys(e.body)) {\n          if (key === 'password') {\n            e.body[key] = '********';\n            break;\n          }\n        }\n      }\n\n      if (e.params) {\n        for (const key of Object.keys(e.params)) {\n          if (key === 'password') {\n            e.params[key] = '********';\n            break;\n          }\n        }\n      }\n\n      return e;\n    });\n  }\n\n  log(level, args) {\n    // make the passed in arguments object an array with the spread operator\n    args = this.maskSensitive([...args]);\n    args = [].concat(level, args.map((arg) => {\n      if (typeof arg === 'function') { return arg(); }\n      return arg;\n    }));\n    this.adapter.log.apply(this.adapter, args);\n  }\n\n  info() {\n    return this.log('info', arguments);\n  }\n\n  error() {\n    return this.log('error', arguments);\n  }\n\n  warn() {\n    return this.log('warn', arguments);\n  }\n\n  verbose() {\n    return this.log('verbose', arguments);\n  }\n\n  debug() {\n    return this.log('debug', arguments);\n  }\n\n  silly() {\n    return this.log('silly', arguments);\n  }\n\n  logRequest({\n    method,\n    url,\n    headers,\n    body\n  }) {\n    this.verbose(() => {\n      const stringifiedBody = JSON.stringify(body, null, 2);\n      return `REQUEST for [${method}] ${url}: ${stringifiedBody}`;\n    }, {\n      method,\n      url,\n      headers,\n      body\n    });\n  }\n\n  logResponse({\n    method,\n    url,\n    result\n  }) {\n    this.verbose(\n      () => { const stringifiedResponse = JSON.stringify(result, null, 2);\n        return `RESPONSE from [${method}] ${url}: ${stringifiedResponse}`;\n      },\n      {result: result}\n    );\n  }\n  // check that date input is valid\n  static validDateTime(date) {\n    if (!date) {\n      return null;\n    }\n    date = new Date(date);\n\n    if (!isNaN(date.getTime())) {\n      return date;\n    }\n\n    return null;\n  }\n\n  truncateLogMessage(string) {\n    if (string && string.length > LOG_STRING_TRUNCATE_LENGTH) {\n      const truncated = string.substring(0, LOG_STRING_TRUNCATE_LENGTH) + truncationMarker;\n      return truncated;\n    }\n\n    return string;\n  }\n\n  static parseOptions(options = {}) {\n    const from = LoggerController.validDateTime(options.from) ||\n      new Date(Date.now() - 7 * MILLISECONDS_IN_A_DAY);\n    const until = LoggerController.validDateTime(options.until) || new Date();\n    const size = Number(options.size) || 10;\n    const order = options.order || LogOrder.DESCENDING;\n    const level = options.level || LogLevel.INFO;\n\n    return {\n      from,\n      until,\n      size,\n      order,\n      level,\n    };\n  }\n\n  // Returns a promise for a {response} object.\n  // query params:\n  // level (optional) Level of logging you want to query for (info || error)\n  // from (optional) Start time for the search. Defaults to 1 week ago.\n  // until (optional) End time for the search. Defaults to current time.\n  // order (optional) Direction of results returned, either “asc” or “desc”. Defaults to “desc”.\n  // size (optional) Number of rows returned by search. Defaults to 10\n  getLogs(options = {}) {\n    if (!this.adapter) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED,\n        'Logger adapter is not available');\n    }\n    if (typeof this.adapter.query !== 'function') {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED,\n        'Querying logs is not supported with this adapter');\n    }\n    options = LoggerController.parseOptions(options);\n    return this.adapter.query(options);\n  }\n\n  expectedAdapterType() {\n    return LoggerAdapter;\n  }\n}\n\nexport default LoggerController;\n"]}