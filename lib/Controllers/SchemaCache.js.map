{"version":3,"sources":["../../src/Controllers/SchemaCache.js"],"names":["MAIN_SCHEMA","SCHEMA_CACHE_PREFIX","ALL_KEYS","SchemaCache","constructor","cacheController","ttl","defaults","schemaCacheTTL","singleCache","parseInt","cache","prefix","put","key","value","get","then","allKeys","Promise","all","getAllClasses","resolve","setAllClasses","schema","setOneSchema","className","getOneSchema","cachedSchemas","find","cachedSchema","clear","promises","Object","keys","map","del"],"mappings":"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","file":"SchemaCache.js","sourcesContent":["const MAIN_SCHEMA = \"__MAIN_SCHEMA\";\nconst SCHEMA_CACHE_PREFIX = \"__SCHEMA\";\nconst ALL_KEYS = \"__ALL_KEYS\";\n\nimport { randomString } from '../cryptoUtils';\nimport defaults from '../defaults';\n\nexport default class SchemaCache {\n  cache: Object;\n\n  constructor(cacheController, ttl = defaults.schemaCacheTTL, singleCache = false) {\n    this.ttl = ttl;\n    if (typeof ttl == 'string') {\n      this.ttl = parseInt(ttl);\n    }\n    this.cache = cacheController;\n    this.prefix = SCHEMA_CACHE_PREFIX;\n    if (!singleCache) {\n      this.prefix += randomString(20);\n    }\n  }\n\n  put(key, value) {\n    return this.cache.get(this.prefix + ALL_KEYS).then((allKeys) => {\n      allKeys = allKeys || {};\n      allKeys[key] = true;\n      return Promise.all([this.cache.put(this.prefix + ALL_KEYS, allKeys, this.ttl), this.cache.put(key, value, this.ttl)]);\n    });\n  }\n\n  getAllClasses() {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.cache.get(this.prefix + MAIN_SCHEMA);\n  }\n\n  setAllClasses(schema) {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.put(this.prefix + MAIN_SCHEMA, schema);\n  }\n\n  setOneSchema(className, schema) {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.put(this.prefix + className, schema);\n  }\n\n  getOneSchema(className) {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.cache.get(this.prefix + className).then((schema) => {\n      if (schema) {\n        return Promise.resolve(schema);\n      }\n      return this.cache.get(this.prefix + MAIN_SCHEMA).then((cachedSchemas) => {\n        cachedSchemas = cachedSchemas || [];\n        schema = cachedSchemas.find((cachedSchema) => {\n          return cachedSchema.className === className;\n        });\n        if (schema) {\n          return Promise.resolve(schema);\n        }\n        return Promise.resolve(null);\n      });\n    });\n  }\n\n  clear() {\n    // That clears all caches...\n    return this.cache.get(this.prefix + ALL_KEYS).then((allKeys) => {\n      if (!allKeys) {\n        return;\n      }\n      const promises = Object.keys(allKeys).map((key) => {\n        return this.cache.del(key);\n      });\n      return Promise.all(promises);\n    });\n  }\n}\n"]}