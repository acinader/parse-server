{"version":3,"sources":["../../src/Controllers/index.js"],"names":["getControllers","getLoggerController","getFilesController","getUserController","getCacheController","getAnalyticsController","getLiveQueryController","getDatabaseController","getHooksController","getPushController","getAuthDataManager","getDatabaseAdapter","options","loggerController","filesController","userController","pushController","hasPushScheduledSupport","hasPushSupport","pushControllerQueue","pushWorker","cacheController","analyticsController","liveQueryController","databaseController","hooksController","authDataManager","appId","jsonLogs","logsFolder","verbose","logLevel","silent","loggerAdapter","loggerOptions","loggerControllerAdapter","WinstonLoggerAdapter","LoggerController","databaseURI","filesAdapter","databaseAdapter","filesControllerAdapter","GridStoreAdapter","FilesController","emailAdapter","verifyUserEmails","emailControllerAdapter","UserController","cacheAdapter","cacheTTL","cacheMaxSize","cacheControllerAdapter","InMemoryCacheAdapter","ttl","maxSize","CacheController","analyticsAdapter","analyticsControllerAdapter","AnalyticsAdapter","AnalyticsController","LiveQueryController","liveQuery","databaseOptions","collectionPrefix","schemaCacheTTL","enableSingleSchemaCache","defaults","DatabaseController","SchemaCache","webhookKey","HooksController","scheduledPush","push","pushOptions","Object","assign","pushQueueOptions","queueOptions","pushAdapter","adapter","ParsePushAdapter","PushController","disablePushWorker","PushQueue","PushWorker","auth","enableAnonymousUsers","protocol","parsedURI","url","parse","toLowerCase","e","PostgresStorageAdapter","uri","MongoStorageAdapter","mongoOptions"],"mappings":"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","file":"index.js","sourcesContent":["import authDataManager          from '../Adapters/Auth';\nimport { ParseServerOptions }   from '../Options';\nimport { loadAdapter }          from '../Adapters/AdapterLoader';\nimport defaults                 from '../defaults';\nimport url                      from 'url';\n// Controllers\nimport { LoggerController }     from './LoggerController';\nimport { FilesController }      from './FilesController';\nimport { HooksController }      from './HooksController';\nimport { UserController }       from './UserController';\nimport { CacheController }      from './CacheController';\nimport { LiveQueryController }  from './LiveQueryController';\nimport { AnalyticsController }  from './AnalyticsController';\nimport { PushController }       from './PushController';\nimport { PushQueue }            from '../Push/PushQueue';\nimport { PushWorker }           from '../Push/PushWorker';\nimport DatabaseController       from './DatabaseController';\nimport SchemaCache              from './SchemaCache';\n\n// Adapters\nimport { GridStoreAdapter }     from '../Adapters/Files/GridStoreAdapter';\nimport { WinstonLoggerAdapter } from '../Adapters/Logger/WinstonLoggerAdapter';\nimport { InMemoryCacheAdapter } from '../Adapters/Cache/InMemoryCacheAdapter';\nimport { AnalyticsAdapter }     from '../Adapters/Analytics/AnalyticsAdapter';\nimport MongoStorageAdapter      from '../Adapters/Storage/Mongo/MongoStorageAdapter';\nimport PostgresStorageAdapter   from '../Adapters/Storage/Postgres/PostgresStorageAdapter';\nimport ParsePushAdapter         from '@parse/push-adapter';\n\nexport function getControllers(options: ParseServerOptions) {\n  const loggerController = getLoggerController(options);\n  const filesController = getFilesController(options);\n  const userController = getUserController(options);\n  const {\n    pushController,\n    hasPushScheduledSupport,\n    hasPushSupport,\n    pushControllerQueue,\n    pushWorker\n  } = getPushController(options);\n  const cacheController = getCacheController(options);\n  const analyticsController = getAnalyticsController(options);\n  const liveQueryController = getLiveQueryController(options);\n  const databaseController = getDatabaseController(options, cacheController);\n  const hooksController = getHooksController(options, databaseController);\n  const authDataManager = getAuthDataManager(options);\n  return {\n    loggerController,\n    filesController,\n    userController,\n    pushController,\n    hasPushScheduledSupport,\n    hasPushSupport,\n    pushWorker,\n    pushControllerQueue,\n    analyticsController,\n    cacheController,\n    liveQueryController,\n    databaseController,\n    hooksController,\n    authDataManager,\n  };\n}\n\nexport function getLoggerController(options: ParseServerOptions): LoggerController {\n  const {\n    appId,\n    jsonLogs,\n    logsFolder,\n    verbose,\n    logLevel,\n    silent,\n    loggerAdapter,\n  } = options;\n  const loggerOptions = { jsonLogs, logsFolder, verbose, logLevel, silent };\n  const loggerControllerAdapter = loadAdapter(loggerAdapter, WinstonLoggerAdapter, loggerOptions);\n  return new LoggerController(loggerControllerAdapter, appId, loggerOptions);\n}\n\nexport function getFilesController(options: ParseServerOptions): FilesController {\n  const {\n    appId,\n    databaseURI,\n    filesAdapter,\n    databaseAdapter,\n  } = options;\n  if (!filesAdapter && databaseAdapter) {\n    throw 'When using an explicit database adapter, you must also use an explicit filesAdapter.';\n  }\n  const filesControllerAdapter = loadAdapter(filesAdapter, () => {\n    return new GridStoreAdapter(databaseURI);\n  });\n  return new FilesController(filesControllerAdapter, appId);\n}\n\nexport function getUserController(options: ParseServerOptions): UserController {\n  const {\n    appId,\n    emailAdapter,\n    verifyUserEmails,\n  } = options;\n  const emailControllerAdapter = loadAdapter(emailAdapter);\n  return new UserController(emailControllerAdapter, appId, { verifyUserEmails });\n}\n\nexport function getCacheController(options: ParseServerOptions): CacheController {\n  const {\n    appId,\n    cacheAdapter,\n    cacheTTL,\n    cacheMaxSize,\n  } = options;\n  const cacheControllerAdapter = loadAdapter(cacheAdapter, InMemoryCacheAdapter, {appId: appId, ttl: cacheTTL, maxSize: cacheMaxSize });\n  return new CacheController(cacheControllerAdapter, appId);\n}\n\nexport function getAnalyticsController(options: ParseServerOptions): AnalyticsController {\n  const {\n    analyticsAdapter,\n  } = options;\n  const analyticsControllerAdapter = loadAdapter(analyticsAdapter, AnalyticsAdapter);\n  return new AnalyticsController(analyticsControllerAdapter);\n}\n\nexport function getLiveQueryController(options: ParseServerOptions): LiveQueryController {\n  return new LiveQueryController(options.liveQuery);\n}\n\nexport function getDatabaseController(options: ParseServerOptions, cacheController: CacheController): DatabaseController {\n  const {\n    databaseURI,\n    databaseOptions,\n    collectionPrefix,\n    schemaCacheTTL,\n    enableSingleSchemaCache,\n  } = options;\n  let {\n    databaseAdapter\n  } = options;\n  if ((databaseOptions || (databaseURI && databaseURI !== defaults.databaseURI) || collectionPrefix !== defaults.collectionPrefix) && databaseAdapter) {\n    throw 'You cannot specify both a databaseAdapter and a databaseURI/databaseOptions/collectionPrefix.';\n  } else if (!databaseAdapter) {\n    databaseAdapter = getDatabaseAdapter(databaseURI, collectionPrefix, databaseOptions)\n  } else {\n    databaseAdapter = loadAdapter(databaseAdapter)\n  }\n  return new DatabaseController(databaseAdapter, new SchemaCache(cacheController, schemaCacheTTL, enableSingleSchemaCache));\n}\n\nexport function getHooksController(options: ParseServerOptions, databaseController: DatabaseController): HooksController {\n  const {\n    appId,\n    webhookKey,\n  } = options;\n  return new HooksController(appId, databaseController, webhookKey);\n}\n\ninterface PushControlling {\n  pushController: PushController,\n  hasPushScheduledSupport: boolean,\n  pushControllerQueue: PushQueue,\n  pushWorker: PushWorker\n}\n\nexport function getPushController(options: ParseServerOptions): PushControlling {\n  const {\n    scheduledPush,\n    push,\n  } = options;\n\n  const pushOptions = Object.assign({}, push);\n  const pushQueueOptions = pushOptions.queueOptions || {};\n  if (pushOptions.queueOptions) {\n    delete pushOptions.queueOptions;\n  }\n\n  // Pass the push options too as it works with the default\n  const pushAdapter = loadAdapter(pushOptions && pushOptions.adapter, ParsePushAdapter, pushOptions);\n  // We pass the options and the base class for the adatper,\n  // Note that passing an instance would work too\n  const pushController = new PushController();\n  const hasPushSupport = !!(pushAdapter && push);\n  const hasPushScheduledSupport = hasPushSupport && (scheduledPush === true);\n\n  const {\n    disablePushWorker\n  } = pushQueueOptions;\n\n  const pushControllerQueue = new PushQueue(pushQueueOptions);\n  let pushWorker;\n  if (!disablePushWorker) {\n    pushWorker = new PushWorker(pushAdapter, pushQueueOptions);\n  }\n  return {\n    pushController,\n    hasPushSupport,\n    hasPushScheduledSupport,\n    pushControllerQueue,\n    pushWorker\n  }\n}\n\nexport function getAuthDataManager(options: ParseServerOptions) {\n  const {\n    auth,\n    enableAnonymousUsers\n  } = options;\n  return authDataManager(auth, enableAnonymousUsers)\n}\n\nexport function getDatabaseAdapter(databaseURI, collectionPrefix, databaseOptions) {\n  let protocol;\n  try {\n    const parsedURI = url.parse(databaseURI);\n    protocol = parsedURI.protocol ? parsedURI.protocol.toLowerCase() : null;\n  } catch(e) { /* */ }\n  switch (protocol) {\n  case 'postgres:':\n    return new PostgresStorageAdapter({\n      uri: databaseURI,\n      collectionPrefix,\n      databaseOptions\n    });\n  default:\n    return new MongoStorageAdapter({\n      uri: databaseURI,\n      collectionPrefix,\n      mongoOptions: databaseOptions,\n    });\n  }\n}\n"]}