{"version":3,"sources":["../../src/Controllers/UserController.js"],"names":["RestQuery","require","Auth","UserController","AdaptableController","constructor","adapter","appId","options","validateAdapter","shouldVerifyEmails","expectedAdapterType","MailAdapter","verifyUserEmails","setEmailVerifyToken","user","_email_verify_token","emailVerified","config","emailVerifyTokenValidityDuration","_email_verify_token_expires_at","Parse","_encode","generateEmailVerifyTokenExpiresAt","verifyEmail","username","token","undefined","query","updateFields","__op","$gt","Date","masterAuth","master","checkIfAlreadyVerified","execute","then","result","results","length","Promise","resolve","rest","update","checkResetTokenValidity","database","find","_perishable_token","limit","passwordPolicy","resetTokenValidityDuration","expiresDate","_perishable_token_expires_at","__type","iso","getUserIfNeeded","email","where","sendVerificationEmail","encodeURIComponent","link","buildEmailLink","verifyEmailURL","appName","sendMail","defaultVerificationEmail","regenerateEmailVerifyToken","resendVerificationEmail","aUser","setPasswordResetToken","generatePasswordResetTokenExpiresAt","$or","$exists","sendPasswordResetEmail","requestResetPasswordURL","defaultResetPasswordEmail","updatePassword","password","updateUserPassword","objectId","catch","error","message","reject","text","get","to","subject","userId","destination","usernameAndToken","parseFrameURL","destinationWithoutHost","replace","publicServerURL"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AACA,IAAIC,OAAOD,QAAQ,SAAR,CAAX;;AAEO,MAAME,cAAN,SAA6BC,6BAA7B,CAAiD;;AAEtDC,cAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,UAAU,EAAtC,EAA0C;AACxC,UAAMF,OAAN,EAAeC,KAAf,EAAsBC,OAAtB;AACD;;AAEDC,kBAAgBH,OAAhB,EAAyB;AACvB;AACA,QAAI,CAACA,OAAD,IAAY,CAAC,KAAKI,kBAAtB,EAA0C;AACxC;AACD;AACD,UAAMD,eAAN,CAAsBH,OAAtB;AACD;;AAEDK,wBAAsB;AACpB,WAAOC,qBAAP;AACD;;AAED,MAAIF,kBAAJ,GAAyB;AACvB,WAAO,KAAKF,OAAL,CAAaK,gBAApB;AACD;;AAEDC,sBAAoBC,IAApB,EAA0B;AACxB,QAAI,KAAKL,kBAAT,EAA6B;AAC3BK,WAAKC,mBAAL,GAA2B,+BAAa,EAAb,CAA3B;AACAD,WAAKE,aAAL,GAAqB,KAArB;;AAEA,UAAI,KAAKC,MAAL,CAAYC,gCAAhB,EAAkD;AAChDJ,aAAKK,8BAAL,GAAsCC,eAAMC,OAAN,CAAc,KAAKJ,MAAL,CAAYK,iCAAZ,EAAd,CAAtC;AACD;AACF;AACF;;AAEDC,cAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAC3B,QAAI,CAAC,KAAKhB,kBAAV,EAA8B;AAC5B;AACA;AACA,YAAMiB,SAAN;AACD;;AAED,UAAMC,QAAQ,EAACH,UAAUA,QAAX,EAAqBT,qBAAqBU,KAA1C,EAAd;AACA,UAAMG,eAAe,EAAEZ,eAAe,IAAjB,EAAuBD,qBAAqB,EAACc,MAAM,QAAP,EAA5C,EAArB;;AAEA;AACA;AACA,QAAI,KAAKZ,MAAL,CAAYC,gCAAhB,EAAkD;AAChDS,YAAMX,aAAN,GAAsB,KAAtB;AACAW,YAAMR,8BAAN,GAAuC,EAAEW,KAAKV,eAAMC,OAAN,CAAc,IAAIU,IAAJ,EAAd,CAAP,EAAvC;;AAEAH,mBAAaT,8BAAb,GAA8C,EAACU,MAAM,QAAP,EAA9C;AACD;AACD,UAAMG,aAAa/B,KAAKgC,MAAL,CAAY,KAAKhB,MAAjB,CAAnB;AACA,QAAIiB,yBAAyB,IAAInC,SAAJ,CAAc,KAAKkB,MAAnB,EAA2BhB,KAAKgC,MAAL,CAAY,KAAKhB,MAAjB,CAA3B,EAAqD,OAArD,EAA8D,EAACO,UAAUA,QAAX,EAAqBR,eAAe,IAApC,EAA9D,CAA7B;AACA,WAAOkB,uBAAuBC,OAAvB,GAAiCC,IAAjC,CAAsCC,UAAU;AACrD,UAAIA,OAAOC,OAAP,CAAeC,MAAnB,EAA2B;AACzB,eAAOC,QAAQC,OAAR,CAAgBJ,OAAOC,OAAP,CAAeC,MAAf,CAAsB,CAAtB,CAAhB,CAAP;AACD;AACD,aAAOG,eAAKC,MAAL,CAAY,KAAK1B,MAAjB,EAAyBe,UAAzB,EAAqC,OAArC,EAA8CL,KAA9C,EAAqDC,YAArD,CAAP;AACD,KALM,CAAP;AAMD;;AAEDgB,0BAAwBpB,QAAxB,EAAkCC,KAAlC,EAAyC;AACvC,WAAO,KAAKR,MAAL,CAAY4B,QAAZ,CAAqBC,IAArB,CAA0B,OAA1B,EAAmC;AACxCtB,gBAAUA,QAD8B;AAExCuB,yBAAmBtB;AAFqB,KAAnC,EAGJ,EAACuB,OAAO,CAAR,EAHI,EAGQZ,IAHR,CAGaE,WAAW;AAC7B,UAAIA,QAAQC,MAAR,IAAkB,CAAtB,EAAyB;AACvB,cAAMb,SAAN;AACD;;AAED,UAAI,KAAKT,MAAL,CAAYgC,cAAZ,IAA8B,KAAKhC,MAAL,CAAYgC,cAAZ,CAA2BC,0BAA7D,EAAyF;AACvF,YAAIC,cAAcb,QAAQ,CAAR,EAAWc,4BAA7B;AACA,YAAID,eAAeA,YAAYE,MAAZ,IAAsB,MAAzC,EAAiD;AAC/CF,wBAAc,IAAIpB,IAAJ,CAASoB,YAAYG,GAArB,CAAd;AACD;AACD,YAAIH,cAAc,IAAIpB,IAAJ,EAAlB,EACE,MAAM,qCAAN;AACH;;AAED,aAAOO,QAAQ,CAAR,CAAP;AACD,KAlBM,CAAP;AAmBD;;AAEDiB,kBAAgBzC,IAAhB,EAAsB;AACpB,QAAIA,KAAKU,QAAL,IAAiBV,KAAK0C,KAA1B,EAAiC;AAC/B,aAAOhB,QAAQC,OAAR,CAAgB3B,IAAhB,CAAP;AACD;AACD,QAAI2C,QAAQ,EAAZ;AACA,QAAI3C,KAAKU,QAAT,EAAmB;AACjBiC,YAAMjC,QAAN,GAAiBV,KAAKU,QAAtB;AACD;AACD,QAAIV,KAAK0C,KAAT,EAAgB;AACdC,YAAMD,KAAN,GAAc1C,KAAK0C,KAAnB;AACD;;AAED,QAAI7B,QAAQ,IAAI5B,SAAJ,CAAc,KAAKkB,MAAnB,EAA2BhB,KAAKgC,MAAL,CAAY,KAAKhB,MAAjB,CAA3B,EAAqD,OAArD,EAA8DwC,KAA9D,CAAZ;AACA,WAAO9B,MAAMQ,OAAN,GAAgBC,IAAhB,CAAqB,UAASC,MAAT,EAAgB;AAC1C,UAAIA,OAAOC,OAAP,CAAeC,MAAf,IAAyB,CAA7B,EAAgC;AAC9B,cAAMb,SAAN;AACD;AACD,aAAOW,OAAOC,OAAP,CAAe,CAAf,CAAP;AACD,KALM,CAAP;AAMD;;AAEDoB,wBAAsB5C,IAAtB,EAA4B;AAC1B,QAAI,CAAC,KAAKL,kBAAV,EAA8B;AAC5B;AACD;AACD,UAAMgB,QAAQkC,mBAAmB7C,KAAKC,mBAAxB,CAAd;AACA;AACA,SAAKwC,eAAL,CAAqBzC,IAArB,EAA2BsB,IAA3B,CAAiCtB,IAAD,IAAU;AACxC,YAAMU,WAAWmC,mBAAmB7C,KAAKU,QAAxB,CAAjB;;AAEA,YAAMoC,OAAOC,eAAe,KAAK5C,MAAL,CAAY6C,cAA3B,EAA2CtC,QAA3C,EAAqDC,KAArD,EAA4D,KAAKR,MAAjE,CAAb;AACA,YAAMV,UAAU;AACdwD,iBAAS,KAAK9C,MAAL,CAAY8C,OADP;AAEdH,cAAMA,IAFQ;AAGd9C,cAAM,uBAAQ,OAAR,EAAiBA,IAAjB;AAHQ,OAAhB;AAKA,UAAI,KAAKT,OAAL,CAAaqD,qBAAjB,EAAwC;AACtC,aAAKrD,OAAL,CAAaqD,qBAAb,CAAmCnD,OAAnC;AACD,OAFD,MAEO;AACL,aAAKF,OAAL,CAAa2D,QAAb,CAAsB,KAAKC,wBAAL,CAA8B1D,OAA9B,CAAtB;AACD;AACF,KAdD;AAeD;;AAED;;;;;;AAMA2D,6BAA2BpD,IAA3B,EAAiC;AAC/B,SAAKD,mBAAL,CAAyBC,IAAzB;AACA,WAAO,KAAKG,MAAL,CAAY4B,QAAZ,CAAqBF,MAArB,CAA4B,OAA5B,EAAqC,EAAEnB,UAAUV,KAAKU,QAAjB,EAArC,EAAkEV,IAAlE,CAAP;AACD;;AAEDqD,0BAAwB3C,QAAxB,EAAkC;AAChC,WAAO,KAAK+B,eAAL,CAAqB,EAAC/B,UAAUA,QAAX,EAArB,EAA2CY,IAA3C,CAAiDgC,KAAD,IAAW;AAChE,UAAI,CAACA,KAAD,IAAUA,MAAMpD,aAApB,EAAmC;AACjC,cAAMU,SAAN;AACD;AACD,aAAO,KAAKwC,0BAAL,CAAgCE,KAAhC,EAAuChC,IAAvC,CAA4C,MAAM;AACvD,aAAKsB,qBAAL,CAA2BU,KAA3B;AACD,OAFM,CAAP;AAGD,KAPM,CAAP;AAQD;;AAEDC,wBAAsBb,KAAtB,EAA6B;AAC3B,UAAM/B,QAAQ,EAAEsB,mBAAmB,+BAAa,EAAb,CAArB,EAAd;;AAEA,QAAI,KAAK9B,MAAL,CAAYgC,cAAZ,IAA8B,KAAKhC,MAAL,CAAYgC,cAAZ,CAA2BC,0BAA7D,EAAyF;AACvFzB,YAAM2B,4BAAN,GAAqChC,eAAMC,OAAN,CAAc,KAAKJ,MAAL,CAAYqD,mCAAZ,EAAd,CAArC;AACD;;AAED,WAAO,KAAKrD,MAAL,CAAY4B,QAAZ,CAAqBF,MAArB,CAA4B,OAA5B,EAAqC,EAAE4B,KAAK,CAAC,EAACf,KAAD,EAAD,EAAU,EAAChC,UAAUgC,KAAX,EAAkBA,OAAO,EAACgB,SAAS,KAAV,EAAzB,EAAV,CAAP,EAArC,EAAqG/C,KAArG,EAA4G,EAA5G,EAAgH,IAAhH,CAAP;AACD;;AAEDgD,yBAAuBjB,KAAvB,EAA8B;AAC5B,QAAI,CAAC,KAAKnD,OAAV,EAAmB;AACjB,YAAM,uDAAN;AACA;AACD;;AAED,WAAO,KAAKgE,qBAAL,CAA2Bb,KAA3B,EACJpB,IADI,CACCtB,QAAQ;AACZ,YAAMW,QAAQkC,mBAAmB7C,KAAKiC,iBAAxB,CAAd;AACA,YAAMvB,WAAWmC,mBAAmB7C,KAAKU,QAAxB,CAAjB;;AAEA,YAAMoC,OAAOC,eAAe,KAAK5C,MAAL,CAAYyD,uBAA3B,EAAoDlD,QAApD,EAA8DC,KAA9D,EAAqE,KAAKR,MAA1E,CAAb;AACA,YAAMV,UAAU;AACdwD,iBAAS,KAAK9C,MAAL,CAAY8C,OADP;AAEdH,cAAMA,IAFQ;AAGd9C,cAAM,uBAAQ,OAAR,EAAiBA,IAAjB;AAHQ,OAAhB;;AAMA,UAAI,KAAKT,OAAL,CAAaoE,sBAAjB,EAAyC;AACvC,aAAKpE,OAAL,CAAaoE,sBAAb,CAAoClE,OAApC;AACD,OAFD,MAEO;AACL,aAAKF,OAAL,CAAa2D,QAAb,CAAsB,KAAKW,yBAAL,CAA+BpE,OAA/B,CAAtB;AACD;;AAED,aAAOiC,QAAQC,OAAR,CAAgB3B,IAAhB,CAAP;AACD,KAnBI,CAAP;AAoBD;;AAED8D,iBAAepD,QAAf,EAAyBC,KAAzB,EAAgCoD,QAAhC,EAA0C;AACxC,WAAO,KAAKjC,uBAAL,CAA6BpB,QAA7B,EAAuCC,KAAvC,EACJW,IADI,CACCtB,QAAQgE,mBAAmBhE,KAAKiE,QAAxB,EAAkCF,QAAlC,EAA4C,KAAK5D,MAAjD,CADT;AAEL;AAFK,KAGJmB,IAHI,CAGC,MAAM,KAAKnB,MAAL,CAAY4B,QAAZ,CAAqBF,MAArB,CAA4B,OAA5B,EAAqC,EAACnB,QAAD,EAArC,EAAiD;AAC3DuB,yBAAmB,EAAClB,MAAM,QAAP,EADwC;AAE3DuB,oCAA8B,EAACvB,MAAM,QAAP;AAF6B,KAAjD,CAHP,EAMDmD,KANC,CAMMC,KAAD,IAAW;AACnB,UAAIA,MAAMC,OAAV,EAAmB;AAAG;AACpB,eAAO1C,QAAQ2C,MAAR,CAAeF,MAAMC,OAArB,CAAP;AACD,OAFD,MAEO;AACL,eAAO1C,QAAQ2C,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,KAZI,CAAP;AAaD;;AAEDhB,2BAAyB,EAACL,IAAD,EAAO9C,IAAP,EAAaiD,OAAb,EAAzB,EAAkD;AAChD,UAAMqB,OAAO,YACT,oDADS,GAC8CtE,KAAKuE,GAAL,CAAS,OAAT,CAD9C,GACkE,QADlE,GAC6EtB,OAD7E,GACuF,MADvF,GAET,EAFS,GAGT,6BAHS,GAGuBH,IAHpC;AAIA,UAAM0B,KAAKxE,KAAKuE,GAAL,CAAS,OAAT,CAAX;AACA,UAAME,UAAU,mCAAmCxB,OAAnD;AACA,WAAO,EAAEqB,IAAF,EAAQE,EAAR,EAAYC,OAAZ,EAAP;AACD;;AAEDZ,4BAA0B,EAACf,IAAD,EAAO9C,IAAP,EAAaiD,OAAb,EAA1B,EAAmD;AACjD,UAAMqB,OAAO,YACT,2CADS,GACqCrB,OADrC,IAERjD,KAAKuE,GAAL,CAAS,UAAT,IAAwB,yBAAyBvE,KAAKuE,GAAL,CAAS,UAAT,CAAzB,GAAgD,IAAxE,GAAgF,EAFxE,IAE8E,OAF9E,GAGT,EAHS,GAIT,2BAJS,GAIqBzB,IAJlC;AAKA,UAAM0B,KAAKxE,KAAKuE,GAAL,CAAS,OAAT,KAAqBvE,KAAKuE,GAAL,CAAS,UAAT,CAAhC;AACA,UAAME,UAAW,wBAAwBxB,OAAzC;AACA,WAAO,EAAEqB,IAAF,EAAQE,EAAR,EAAYC,OAAZ,EAAP;AACD;AA9NqD;;QAA3CrF,c,GAAAA,c,EAiOb;;AACA,SAAS4E,kBAAT,CAA4BU,MAA5B,EAAoCX,QAApC,EAA8C5D,MAA9C,EAAsD;AACpD,SAAOyB,eAAKC,MAAL,CAAY1B,MAAZ,EAAoBhB,KAAKgC,MAAL,CAAYhB,MAAZ,CAApB,EAAyC,OAAzC,EAAkD,EAAE8D,UAAUS,MAAZ,EAAlD,EAAwE;AAC7EX,cAAUA;AADmE,GAAxE,CAAP;AAGD;;AAED,SAAShB,cAAT,CAAwB4B,WAAxB,EAAqCjE,QAArC,EAA+CC,KAA/C,EAAsDR,MAAtD,EAA8D;AAC5D,QAAMyE,mBAAoB,SAAQjE,KAAM,aAAYD,QAAS,EAA7D;;AAEA,MAAIP,OAAO0E,aAAX,EAA0B;AACxB,UAAMC,yBAAyBH,YAAYI,OAAZ,CAAoB5E,OAAO6E,eAA3B,EAA4C,EAA5C,CAA/B;;AAEA,WAAQ,GAAE7E,OAAO0E,aAAc,SAAQhC,mBAAmBiC,sBAAnB,CAA2C,IAAGF,gBAAiB,EAAtG;AACD,GAJD,MAIO;AACL,WAAQ,GAAED,WAAY,IAAGC,gBAAiB,EAA1C;AACD;AACF;;kBAEcxF,c","file":"UserController.js","sourcesContent":["import { randomString }    from '../cryptoUtils';\nimport { inflate }         from '../triggers';\nimport AdaptableController from './AdaptableController';\nimport MailAdapter         from '../Adapters/Email/MailAdapter';\nimport rest                from '../rest';\nimport Parse               from 'parse/node';\n\nvar RestQuery = require('../RestQuery');\nvar Auth = require('../Auth');\n\nexport class UserController extends AdaptableController {\n\n  constructor(adapter, appId, options = {}) {\n    super(adapter, appId, options);\n  }\n\n  validateAdapter(adapter) {\n    // Allow no adapter\n    if (!adapter && !this.shouldVerifyEmails) {\n      return;\n    }\n    super.validateAdapter(adapter);\n  }\n\n  expectedAdapterType() {\n    return MailAdapter;\n  }\n\n  get shouldVerifyEmails() {\n    return this.options.verifyUserEmails;\n  }\n\n  setEmailVerifyToken(user) {\n    if (this.shouldVerifyEmails) {\n      user._email_verify_token = randomString(25);\n      user.emailVerified = false;\n\n      if (this.config.emailVerifyTokenValidityDuration) {\n        user._email_verify_token_expires_at = Parse._encode(this.config.generateEmailVerifyTokenExpiresAt());\n      }\n    }\n  }\n\n  verifyEmail(username, token) {\n    if (!this.shouldVerifyEmails) {\n      // Trying to verify email when not enabled\n      // TODO: Better error here.\n      throw undefined;\n    }\n\n    const query = {username: username, _email_verify_token: token};\n    const updateFields = { emailVerified: true, _email_verify_token: {__op: 'Delete'}};\n\n    // if the email verify token needs to be validated then\n    // add additional query params and additional fields that need to be updated\n    if (this.config.emailVerifyTokenValidityDuration) {\n      query.emailVerified = false;\n      query._email_verify_token_expires_at = { $gt: Parse._encode(new Date()) };\n\n      updateFields._email_verify_token_expires_at = {__op: 'Delete'};\n    }\n    const masterAuth = Auth.master(this.config);\n    var checkIfAlreadyVerified = new RestQuery(this.config, Auth.master(this.config), '_User', {username: username, emailVerified: true});\n    return checkIfAlreadyVerified.execute().then(result => {\n      if (result.results.length) {\n        return Promise.resolve(result.results.length[0]);\n      }\n      return rest.update(this.config, masterAuth, '_User', query, updateFields);\n    });\n  }\n\n  checkResetTokenValidity(username, token) {\n    return this.config.database.find('_User', {\n      username: username,\n      _perishable_token: token\n    }, {limit: 1}).then(results => {\n      if (results.length != 1) {\n        throw undefined;\n      }\n\n      if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {\n        let expiresDate = results[0]._perishable_token_expires_at;\n        if (expiresDate && expiresDate.__type == 'Date') {\n          expiresDate = new Date(expiresDate.iso);\n        }\n        if (expiresDate < new Date())\n          throw 'The password reset link has expired';\n      }\n\n      return results[0];\n    });\n  }\n\n  getUserIfNeeded(user) {\n    if (user.username && user.email) {\n      return Promise.resolve(user);\n    }\n    var where = {};\n    if (user.username) {\n      where.username = user.username;\n    }\n    if (user.email) {\n      where.email = user.email;\n    }\n\n    var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);\n    return query.execute().then(function(result){\n      if (result.results.length != 1) {\n        throw undefined;\n      }\n      return result.results[0];\n    })\n  }\n\n  sendVerificationEmail(user) {\n    if (!this.shouldVerifyEmails) {\n      return;\n    }\n    const token = encodeURIComponent(user._email_verify_token);\n    // We may need to fetch the user in case of update email\n    this.getUserIfNeeded(user).then((user) => {\n      const username = encodeURIComponent(user.username);\n\n      const link = buildEmailLink(this.config.verifyEmailURL, username, token, this.config);\n      const options = {\n        appName: this.config.appName,\n        link: link,\n        user: inflate('_User', user),\n      };\n      if (this.adapter.sendVerificationEmail) {\n        this.adapter.sendVerificationEmail(options);\n      } else {\n        this.adapter.sendMail(this.defaultVerificationEmail(options));\n      }\n    });\n  }\n\n  /**\n   * Regenerates the given user's email verification token\n   *\n   * @param user\n   * @returns {*}\n   */\n  regenerateEmailVerifyToken(user) {\n    this.setEmailVerifyToken(user);\n    return this.config.database.update('_User', { username: user.username }, user);\n  }\n\n  resendVerificationEmail(username) {\n    return this.getUserIfNeeded({username: username}).then((aUser) => {\n      if (!aUser || aUser.emailVerified) {\n        throw undefined;\n      }\n      return this.regenerateEmailVerifyToken(aUser).then(() => {\n        this.sendVerificationEmail(aUser);\n      });\n    });\n  }\n\n  setPasswordResetToken(email) {\n    const token = { _perishable_token: randomString(25) };\n\n    if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {\n      token._perishable_token_expires_at = Parse._encode(this.config.generatePasswordResetTokenExpiresAt());\n    }\n\n    return this.config.database.update('_User', { $or: [{email}, {username: email, email: {$exists: false}}] }, token, {}, true)\n  }\n\n  sendPasswordResetEmail(email) {\n    if (!this.adapter) {\n      throw \"Trying to send a reset password but no adapter is set\";\n      //  TODO: No adapter?\n    }\n\n    return this.setPasswordResetToken(email)\n      .then(user => {\n        const token = encodeURIComponent(user._perishable_token);\n        const username = encodeURIComponent(user.username);\n\n        const link = buildEmailLink(this.config.requestResetPasswordURL, username, token, this.config);\n        const options = {\n          appName: this.config.appName,\n          link: link,\n          user: inflate('_User', user),\n        };\n\n        if (this.adapter.sendPasswordResetEmail) {\n          this.adapter.sendPasswordResetEmail(options);\n        } else {\n          this.adapter.sendMail(this.defaultResetPasswordEmail(options));\n        }\n\n        return Promise.resolve(user);\n      });\n  }\n\n  updatePassword(username, token, password) {\n    return this.checkResetTokenValidity(username, token)\n      .then(user => updateUserPassword(user.objectId, password, this.config))\n      // clear reset password token\n      .then(() => this.config.database.update('_User', {username}, {\n        _perishable_token: {__op: 'Delete'},\n        _perishable_token_expires_at: {__op: 'Delete'}\n      })).catch((error) => {\n        if (error.message) {  // in case of Parse.Error, fail with the error message only\n          return Promise.reject(error.message);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n\n  defaultVerificationEmail({link, user, appName, }) {\n    const text = \"Hi,\\n\\n\" +\n        \"You are being asked to confirm the e-mail address \" + user.get(\"email\") + \" with \" + appName + \"\\n\\n\" +\n        \"\" +\n        \"Click here to confirm it:\\n\" + link;\n    const to = user.get(\"email\");\n    const subject = 'Please verify your e-mail for ' + appName;\n    return { text, to, subject };\n  }\n\n  defaultResetPasswordEmail({link, user, appName, }) {\n    const text = \"Hi,\\n\\n\" +\n        \"You requested to reset your password for \" + appName +\n        (user.get('username') ? (\" (your username is '\" + user.get('username') + \"')\") : \"\") + \".\\n\\n\" +\n        \"\" +\n        \"Click here to reset it:\\n\" + link;\n    const to = user.get(\"email\") || user.get('username');\n    const subject =  'Password Reset for ' + appName;\n    return { text, to, subject };\n  }\n}\n\n// Mark this private\nfunction updateUserPassword(userId, password, config) {\n  return rest.update(config, Auth.master(config), '_User', { objectId: userId }, {\n    password: password\n  });\n}\n\nfunction buildEmailLink(destination, username, token, config) {\n  const usernameAndToken = `token=${token}&username=${username}`\n\n  if (config.parseFrameURL) {\n    const destinationWithoutHost = destination.replace(config.publicServerURL, '');\n\n    return `${config.parseFrameURL}?link=${encodeURIComponent(destinationWithoutHost)}&${usernameAndToken}`;\n  } else {\n    return `${destination}?${usernameAndToken}`;\n  }\n}\n\nexport default UserController;\n"]}