{"version":3,"sources":["../src/defaults.js"],"names":["ParseServerOptions","require","logsFolder","folder","process","env","TESTING","PARSE_SERVER_LOGS_FOLDER","verbose","level","VERBOSE","undefined","DefinitionDefaults","Object","keys","reduce","memo","key","def","hasOwnProperty","default","computedDefaults","jsonLogs","JSON_LOGS","assign","DefaultMongoURI","databaseURI"],"mappings":";;;;;;;AAAA;;AACA,MAAM,EAAEA,kBAAF,KAAyBC,QAAQ,uBAAR,CAA/B;AACA,MAAMC,aAAa,CAAC,MAAM;AACxB,MAAIC,SAAS,SAAb;AACA,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,QAAQC,GAAR,CAAYC,OAAZ,KAAwB,GAA9D,EAAmE;AACjEH,aAAS,cAAT;AACD;AACD,MAAIC,QAAQC,GAAR,CAAYE,wBAAhB,EAA0C;AACxCJ,aAAS,yBAAWC,QAAQC,GAAR,CAAYE,wBAAvB,CAAT;AACD;AACD,SAAOJ,MAAP;AACD,CATkB,GAAnB;;AAWA,MAAM,EAAEK,OAAF,EAAWC,KAAX,KAAqB,CAAC,MAAM;AAChC,QAAMD,UAAUJ,QAAQC,GAAR,CAAYK,OAAZ,GAAsB,IAAtB,GAA6B,KAA7C;AACA,SAAO,EAAEF,OAAF,EAAWC,OAAOD,UAAU,SAAV,GAAsBG,SAAxC,EAAP;AACD,CAH0B,GAA3B;;AAMA,MAAMC,qBAAqBC,OAAOC,IAAP,CAAYd,kBAAZ,EAAgCe,MAAhC,CAAuC,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC/E,QAAMC,MAAMlB,mBAAmBiB,GAAnB,CAAZ;AACA,MAAIC,IAAIC,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AACjCH,SAAKC,GAAL,IAAYC,IAAIE,OAAhB;AACD;AACD,SAAOJ,IAAP;AACD,CAN0B,EAMxB,EANwB,CAA3B;;AAQA,MAAMK,mBAAmB;AACvBC,YAAUlB,QAAQC,GAAR,CAAYkB,SAAZ,IAAyB,KADZ;AAEvBrB,YAFuB;AAGvBM,SAHuB;AAIvBC;AAJuB,CAAzB;;kBAOeI,OAAOW,MAAP,CAAc,EAAd,EAAkBZ,kBAAlB,EAAsCS,gBAAtC,C;AACR,MAAMI,4CAAkBb,mBAAmBc,WAA3C","file":"defaults.js","sourcesContent":["import { nullParser } from './Options/parsers';\nconst { ParseServerOptions } = require('./Options/Definitions');\nconst logsFolder = (() => {\n  let folder = './logs/';\n  if (typeof process !== 'undefined' && process.env.TESTING === '1') {\n    folder = './test_logs/'\n  }\n  if (process.env.PARSE_SERVER_LOGS_FOLDER) {\n    folder = nullParser(process.env.PARSE_SERVER_LOGS_FOLDER);\n  }\n  return folder;\n})();\n\nconst { verbose, level } = (() => {\n  const verbose = process.env.VERBOSE ? true : false;\n  return { verbose, level: verbose ? 'verbose' : undefined }\n})();\n\n\nconst DefinitionDefaults = Object.keys(ParseServerOptions).reduce((memo, key) => {\n  const def = ParseServerOptions[key];\n  if (def.hasOwnProperty('default')) {\n    memo[key] = def.default;\n  }\n  return memo;\n}, {});\n\nconst computedDefaults = {\n  jsonLogs: process.env.JSON_LOGS || false,\n  logsFolder,\n  verbose,\n  level,\n}\n\nexport default Object.assign({}, DefinitionDefaults, computedDefaults);\nexport const DefaultMongoURI = DefinitionDefaults.databaseURI;\n"]}