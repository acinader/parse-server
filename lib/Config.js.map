{"version":3,"sources":["../src/Config.js"],"names":["removeTrailingSlash","str","endsWith","substr","length","Config","get","applicationId","mount","cacheInfo","AppCache","config","Object","keys","forEach","key","schemaCache","SchemaCache","cacheController","schemaCacheTTL","enableSingleSchemaCache","database","DatabaseController","databaseController","adapter","generateSessionExpiresAt","bind","generateEmailVerifyTokenExpiresAt","put","serverConfiguration","validate","appId","setupPasswordValidator","passwordPolicy","verifyUserEmails","userController","appName","publicServerURL","revokeSessionOnPasswordReset","expireInactiveSessions","sessionLength","maxLimit","emailVerifyTokenValidityDuration","accountLockout","masterKeyIps","masterKey","readOnlyMasterKey","Error","emailAdapter","validateEmailConfiguration","validateAccountLockoutPolicy","validatePasswordPolicy","startsWith","validateSessionConfiguration","validateMasterKeyIps","validateMaxLimit","duration","Number","isInteger","threshold","maxPasswordAge","undefined","resetTokenValidityDuration","validatorPattern","RegExp","validatorCallback","doNotAllowUsername","maxPasswordHistory","patternValidator","value","test","isNaN","ip","net","isIP","_mount","newValue","now","Date","getTime","generatePasswordResetTokenExpiresAt","invalidLinkURL","customPages","invalidLink","invalidVerificationLinkURL","invalidVerificationLink","linkSendSuccessURL","linkSendSuccess","linkSendFailURL","linkSendFail","verifyEmailSuccessURL","verifyEmailSuccess","choosePasswordURL","choosePassword","requestResetPasswordURL","passwordResetSuccessURL","passwordResetSuccess","parseFrameURL","verifyEmailURL","module","exports"],"mappings":"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","file":"Config.js","sourcesContent":["// A Config object provides information about how a specific app is\n// configured.\n// mount is the URL for the root of the API; includes http, domain, etc.\n\nimport AppCache from './cache';\nimport SchemaCache from './Controllers/SchemaCache';\nimport DatabaseController from './Controllers/DatabaseController';\nimport net from 'net';\n\nfunction removeTrailingSlash(str) {\n  if (!str) {\n    return str;\n  }\n  if (str.endsWith(\"/\")) {\n    str = str.substr(0, str.length - 1);\n  }\n  return str;\n}\n\nexport class Config {\n  static get(applicationId: string, mount: string) {\n    const cacheInfo = AppCache.get(applicationId);\n    if (!cacheInfo) {\n      return;\n    }\n    const config = new Config();\n    config.applicationId = applicationId;\n    Object.keys(cacheInfo).forEach((key) => {\n      if (key == 'databaseController') {\n        const schemaCache = new SchemaCache(cacheInfo.cacheController,\n          cacheInfo.schemaCacheTTL,\n          cacheInfo.enableSingleSchemaCache);\n        config.database = new DatabaseController(cacheInfo.databaseController.adapter, schemaCache);\n      } else {\n        config[key] = cacheInfo[key];\n      }\n    });\n    config.mount = removeTrailingSlash(mount);\n    config.generateSessionExpiresAt = config.generateSessionExpiresAt.bind(config);\n    config.generateEmailVerifyTokenExpiresAt = config.generateEmailVerifyTokenExpiresAt.bind(config);\n    return config;\n  }\n\n  static put(serverConfiguration) {\n    Config.validate(serverConfiguration);\n    AppCache.put(serverConfiguration.appId, serverConfiguration);\n    Config.setupPasswordValidator(serverConfiguration.passwordPolicy);\n    return serverConfiguration;\n  }\n\n  static validate({\n    verifyUserEmails,\n    userController,\n    appName,\n    publicServerURL,\n    revokeSessionOnPasswordReset,\n    expireInactiveSessions,\n    sessionLength,\n    maxLimit,\n    emailVerifyTokenValidityDuration,\n    accountLockout,\n    passwordPolicy,\n    masterKeyIps,\n    masterKey,\n    readOnlyMasterKey,\n  }) {\n\n    if (masterKey === readOnlyMasterKey) {\n      throw new Error('masterKey and readOnlyMasterKey should be different');\n    }\n\n    const emailAdapter = userController.adapter;\n    if (verifyUserEmails) {\n      this.validateEmailConfiguration({emailAdapter, appName, publicServerURL, emailVerifyTokenValidityDuration});\n    }\n\n    this.validateAccountLockoutPolicy(accountLockout);\n\n    this.validatePasswordPolicy(passwordPolicy);\n\n    if (typeof revokeSessionOnPasswordReset !== 'boolean') {\n      throw 'revokeSessionOnPasswordReset must be a boolean value';\n    }\n\n    if (publicServerURL) {\n      if (!publicServerURL.startsWith(\"http://\") && !publicServerURL.startsWith(\"https://\")) {\n        throw \"publicServerURL should be a valid HTTPS URL starting with https://\"\n      }\n    }\n\n    this.validateSessionConfiguration(sessionLength, expireInactiveSessions);\n\n    this.validateMasterKeyIps(masterKeyIps);\n\n    this.validateMaxLimit(maxLimit);\n  }\n\n  static validateAccountLockoutPolicy(accountLockout) {\n    if (accountLockout) {\n      if (typeof accountLockout.duration !== 'number' || accountLockout.duration <= 0 || accountLockout.duration > 99999) {\n        throw 'Account lockout duration should be greater than 0 and less than 100000';\n      }\n\n      if (!Number.isInteger(accountLockout.threshold) || accountLockout.threshold < 1 || accountLockout.threshold > 999) {\n        throw 'Account lockout threshold should be an integer greater than 0 and less than 1000';\n      }\n    }\n  }\n\n  static validatePasswordPolicy(passwordPolicy) {\n    if (passwordPolicy) {\n      if (passwordPolicy.maxPasswordAge !== undefined && (typeof passwordPolicy.maxPasswordAge !== 'number' || passwordPolicy.maxPasswordAge < 0)) {\n        throw 'passwordPolicy.maxPasswordAge must be a positive number';\n      }\n\n      if (passwordPolicy.resetTokenValidityDuration !== undefined && (typeof passwordPolicy.resetTokenValidityDuration !== 'number' || passwordPolicy.resetTokenValidityDuration <= 0)) {\n        throw 'passwordPolicy.resetTokenValidityDuration must be a positive number';\n      }\n\n      if(passwordPolicy.validatorPattern){\n        if(typeof(passwordPolicy.validatorPattern) === 'string') {\n          passwordPolicy.validatorPattern = new RegExp(passwordPolicy.validatorPattern);\n        }\n        else if(!(passwordPolicy.validatorPattern instanceof RegExp)){\n          throw 'passwordPolicy.validatorPattern must be a regex string or RegExp object.';\n        }\n      }\n\n\n      if(passwordPolicy.validatorCallback && typeof passwordPolicy.validatorCallback !== 'function') {\n        throw 'passwordPolicy.validatorCallback must be a function.';\n      }\n\n      if(passwordPolicy.doNotAllowUsername && typeof passwordPolicy.doNotAllowUsername !== 'boolean') {\n        throw 'passwordPolicy.doNotAllowUsername must be a boolean value.';\n      }\n\n      if (passwordPolicy.maxPasswordHistory && (!Number.isInteger(passwordPolicy.maxPasswordHistory) || passwordPolicy.maxPasswordHistory <= 0 || passwordPolicy.maxPasswordHistory > 20)) {\n        throw 'passwordPolicy.maxPasswordHistory must be an integer ranging 0 - 20';\n      }\n    }\n  }\n\n  // if the passwordPolicy.validatorPattern is configured then setup a callback to process the pattern\n  static setupPasswordValidator(passwordPolicy) {\n    if (passwordPolicy && passwordPolicy.validatorPattern) {\n      passwordPolicy.patternValidator = (value) => {\n        return passwordPolicy.validatorPattern.test(value);\n      }\n    }\n  }\n\n  static validateEmailConfiguration({emailAdapter, appName, publicServerURL, emailVerifyTokenValidityDuration}) {\n    if (!emailAdapter) {\n      throw 'An emailAdapter is required for e-mail verification and password resets.';\n    }\n    if (typeof appName !== 'string') {\n      throw 'An app name is required for e-mail verification and password resets.';\n    }\n    if (typeof publicServerURL !== 'string') {\n      throw 'A public server url is required for e-mail verification and password resets.';\n    }\n    if (emailVerifyTokenValidityDuration) {\n      if (isNaN(emailVerifyTokenValidityDuration)) {\n        throw 'Email verify token validity duration must be a valid number.';\n      } else if (emailVerifyTokenValidityDuration <= 0) {\n        throw 'Email verify token validity duration must be a value greater than 0.'\n      }\n    }\n  }\n\n  static validateMasterKeyIps(masterKeyIps) {\n    for (const ip of masterKeyIps) {\n      if(!net.isIP(ip)){\n        throw `Invalid ip in masterKeyIps: ${ip}`;\n      }\n    }\n  }\n\n  get mount() {\n    var mount = this._mount;\n    if (this.publicServerURL) {\n      mount = this.publicServerURL;\n    }\n    return mount;\n  }\n\n  set mount(newValue) {\n    this._mount = newValue;\n  }\n\n  static validateSessionConfiguration(sessionLength, expireInactiveSessions) {\n    if (expireInactiveSessions) {\n      if (isNaN(sessionLength)) {\n        throw 'Session length must be a valid number.';\n      }\n      else if (sessionLength <= 0) {\n        throw 'Session length must be a value greater than 0.'\n      }\n    }\n  }\n\n  static validateMaxLimit(maxLimit) {\n    if (maxLimit <= 0) {\n      throw 'Max limit must be a value greater than 0.'\n    }\n  }\n\n  generateEmailVerifyTokenExpiresAt() {\n    if (!this.verifyUserEmails || !this.emailVerifyTokenValidityDuration) {\n      return undefined;\n    }\n    var now = new Date();\n    return new Date(now.getTime() + (this.emailVerifyTokenValidityDuration * 1000));\n  }\n\n  generatePasswordResetTokenExpiresAt() {\n    if (!this.passwordPolicy || !this.passwordPolicy.resetTokenValidityDuration) {\n      return undefined;\n    }\n    const now = new Date();\n    return new Date(now.getTime() + (this.passwordPolicy.resetTokenValidityDuration * 1000));\n  }\n\n  generateSessionExpiresAt() {\n    if (!this.expireInactiveSessions) {\n      return undefined;\n    }\n    var now = new Date();\n    return new Date(now.getTime() + (this.sessionLength * 1000));\n  }\n\n  get invalidLinkURL() {\n    return this.customPages.invalidLink || `${this.publicServerURL}/apps/invalid_link.html`;\n  }\n\n  get invalidVerificationLinkURL() {\n    return this.customPages.invalidVerificationLink || `${this.publicServerURL}/apps/invalid_verification_link.html`;\n  }\n\n  get linkSendSuccessURL() {\n    return this.customPages.linkSendSuccess || `${this.publicServerURL}/apps/link_send_success.html`\n  }\n\n  get linkSendFailURL() {\n    return this.customPages.linkSendFail || `${this.publicServerURL}/apps/link_send_fail.html`\n  }\n\n  get verifyEmailSuccessURL() {\n    return this.customPages.verifyEmailSuccess || `${this.publicServerURL}/apps/verify_email_success.html`;\n  }\n\n  get choosePasswordURL() {\n    return this.customPages.choosePassword || `${this.publicServerURL}/apps/choose_password`;\n  }\n\n  get requestResetPasswordURL() {\n    return `${this.publicServerURL}/apps/${this.applicationId}/request_password_reset`;\n  }\n\n  get passwordResetSuccessURL() {\n    return this.customPages.passwordResetSuccess || `${this.publicServerURL}/apps/password_reset_success.html`;\n  }\n\n  get parseFrameURL() {\n    return this.customPages.parseFrameURL;\n  }\n\n  get verifyEmailURL() {\n    return `${this.publicServerURL}/apps/${this.applicationId}/verify_email`;\n  }\n}\n\nexport default Config;\nmodule.exports = Config;\n"]}