{"version":3,"sources":["../src/AccountLockout.js"],"names":["AccountLockout","constructor","user","config","_user","_config","_setFailedLoginCount","value","query","username","updateFields","_failed_login_count","database","update","_isFailedLoginCountSet","$exists","find","then","users","Array","isArray","length","_initFailedLoginCount","failedLoginCountIsSet","_incrementFailedLoginCount","__op","amount","_setLockoutExpiration","$gte","accountLockout","threshold","now","Date","_account_lockout_expires_at","Parse","_encode","getTime","duration","catch","err","code","message","_notLocked","$gt","Error","OBJECT_NOT_FOUND","_handleFailedLoginAttempt","handleLoginAttempt","loginSuccessful","Promise","resolve"],"mappings":"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","file":"AccountLockout.js","sourcesContent":["// This class handles the Account Lockout Policy settings.\nimport Parse from 'parse/node';\n\nexport class AccountLockout {\n  constructor(user, config) {\n    this._user = user;\n    this._config = config;\n  }\n\n  /**\n   * set _failed_login_count to value\n   */\n  _setFailedLoginCount(value) {\n    const query = {\n      username: this._user.username\n    };\n\n    const updateFields = {\n      _failed_login_count: value\n    };\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * check if the _failed_login_count field has been set\n   */\n  _isFailedLoginCountSet() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $exists: true }\n    };\n\n    return this._config.database.find('_User', query)\n      .then(users => {\n        if (Array.isArray(users) && users.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  /**\n   * if _failed_login_count is NOT set then set it to 0\n   * else do nothing\n   */\n  _initFailedLoginCount() {\n    return this._isFailedLoginCountSet()\n      .then(failedLoginCountIsSet => {\n        if (!failedLoginCountIsSet) {\n          return this._setFailedLoginCount(0);\n        }\n      });\n  }\n\n  /**\n   * increment _failed_login_count by 1\n   */\n  _incrementFailedLoginCount() {\n    const query = {\n      username: this._user.username\n    };\n\n    const updateFields = {_failed_login_count: {__op: 'Increment', amount: 1}};\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * if the failed login count is greater than the threshold\n   * then sets lockout expiration to 'currenttime + accountPolicy.duration', i.e., account is locked out for the next 'accountPolicy.duration' minutes\n   * else do nothing\n   */\n  _setLockoutExpiration() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $gte: this._config.accountLockout.threshold }\n    };\n\n    const now = new Date();\n\n    const updateFields = {\n      _account_lockout_expires_at: Parse._encode(new Date(now.getTime() + this._config.accountLockout.duration * 60 * 1000))\n    };\n\n    return this._config.database.update('_User', query, updateFields)\n      .catch(err => {\n        if (err && err.code && err.message && err.code === 101 && err.message === 'Object not found.') {\n          return; // nothing to update so we are good\n        } else {\n          throw err; // unknown error\n        }\n      });\n  }\n\n  /**\n   * if _account_lockout_expires_at > current_time and _failed_login_count > threshold\n   *   reject with account locked error\n   * else\n   *   resolve\n   */\n  _notLocked() {\n    const query = {\n      username: this._user.username,\n      _account_lockout_expires_at: { $gt: Parse._encode(new Date()) },\n      _failed_login_count: {$gte: this._config.accountLockout.threshold}\n    };\n\n    return this._config.database.find('_User', query)\n      .then(users => {\n        if (Array.isArray(users) && users.length > 0) {\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Your account is locked due to multiple failed login attempts. Please try again after ' + this._config.accountLockout.duration + ' minute(s)');\n        }\n      });\n  }\n\n  /**\n   * set and/or increment _failed_login_count\n   * if _failed_login_count > threshold\n   *   set the _account_lockout_expires_at to current_time + accountPolicy.duration\n   * else\n   *   do nothing\n   */\n  _handleFailedLoginAttempt() {\n    return this._initFailedLoginCount()\n      .then(() => {\n        return this._incrementFailedLoginCount();\n      })\n      .then(() => {\n        return this._setLockoutExpiration();\n      });\n  }\n\n  /**\n   * handle login attempt if the Account Lockout Policy is enabled\n   */\n  handleLoginAttempt(loginSuccessful) {\n    if (!this._config.accountLockout) {\n      return Promise.resolve();\n    }\n    return this._notLocked()\n      .then(() => {\n        if (loginSuccessful) {\n          return this._setFailedLoginCount(0);\n        } else {\n          return this._handleFailedLoginAttempt();\n        }\n      });\n  }\n\n}\n\nexport default AccountLockout;\n"]}