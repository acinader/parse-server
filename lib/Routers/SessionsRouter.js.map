{"version":3,"sources":["../../src/Routers/SessionsRouter.js"],"names":["SessionsRouter","ClassesRouter","className","handleMe","req","info","sessionToken","Parse","Error","INVALID_SESSION_TOKEN","rest","find","config","Auth","master","undefined","clientSDK","then","response","results","length","handleUpdateToRevocableSession","user","auth","OBJECT_NOT_FOUND","sessionData","createSession","userId","id","createdWith","installationId","database","update","objectId","__op","Promise","resolve","mountRoutes","route","handleFind","handleGet","handleCreate","handleUpdate","handleDelete"],"mappings":"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","file":"SessionsRouter.js","sourcesContent":["\nimport ClassesRouter from './ClassesRouter';\nimport Parse         from 'parse/node';\nimport rest          from '../rest';\nimport Auth          from '../Auth';\n\nexport class SessionsRouter extends ClassesRouter {\n\n  className() {\n    return '_Session';\n  }\n\n  handleMe(req) {\n    // TODO: Verify correct behavior\n    if (!req.info || !req.info.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,\n        'Session token required.');\n    }\n    return rest.find(req.config, Auth.master(req.config), '_Session', { sessionToken: req.info.sessionToken }, undefined, req.info.clientSDK)\n      .then((response) => {\n        if (!response.results || response.results.length == 0) {\n          throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,\n            'Session token not found.');\n        }\n        return {\n          response: response.results[0]\n        };\n      });\n  }\n\n  handleUpdateToRevocableSession(req) {\n    const config = req.config;\n    const user = req.auth.user;\n    // Issue #2720\n    // Calling without a session token would result in a not found user\n    if (!user) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'invalid session');\n    }\n    const {\n      sessionData,\n      createSession\n    } = Auth.createSession(config, {\n      userId: user.id,\n      createdWith: {\n        'action': 'upgrade',\n      },\n      installationId: req.auth.installationId,\n    });\n\n    return createSession().then(() => {\n      // delete the session token, use the db to skip beforeSave\n      return config.database.update('_User', {\n        objectId: user.id\n      }, {\n        sessionToken: {__op: 'Delete'}\n      });\n    }).then(() => {\n      return Promise.resolve({ response: sessionData });\n    });\n  }\n\n  mountRoutes() {\n    this.route('GET','/sessions/me', req => { return this.handleMe(req); });\n    this.route('GET', '/sessions', req => { return this.handleFind(req); });\n    this.route('GET', '/sessions/:objectId', req => { return this.handleGet(req); });\n    this.route('POST', '/sessions', req => { return this.handleCreate(req); });\n    this.route('PUT', '/sessions/:objectId', req => { return this.handleUpdate(req); });\n    this.route('DELETE', '/sessions/:objectId', req => { return this.handleDelete(req); });\n    this.route('POST', '/upgradeToRevocableSession', req => { return this.handleUpdateToRevocableSession(req); })\n  }\n}\n\nexport default SessionsRouter;\n"]}