{"version":3,"sources":["../../src/Routers/PushRouter.js"],"names":["middleware","PushRouter","PromiseRouter","mountRoutes","route","promiseEnforceMasterKeyAccess","handlePOST","req","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","pushController","config","PUSH_MISCONFIGURED","where","getQueryCondition","resolve","promise","Promise","_resolve","pushStatusId","sendPush","body","objectId","headers","response","result","catch","err","loggerController","error","hasWhere","hasChannels","channels"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,U;;AACZ;;;;;;AAEO,MAAMC,UAAN,SAAyBC,uBAAzB,CAAuC;;AAE5CC,gBAAc;AACZ,SAAKC,KAAL,CAAW,MAAX,EAAmB,OAAnB,EAA4BJ,WAAWK,6BAAvC,EAAsEJ,WAAWK,UAAjF;AACD;;AAED,SAAOA,UAAP,CAAkBC,GAAlB,EAAuB;AACrB,QAAIA,IAAIC,IAAJ,CAASC,UAAb,EAAyB;AACvB,YAAM,IAAIC,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYC,mBAA5B,EAAiD,gEAAjD,CAAN;AACD;AACD,UAAMC,iBAAiBN,IAAIO,MAAJ,CAAWD,cAAlC;AACA,QAAI,CAACA,cAAL,EAAqB;AACnB,YAAM,IAAIH,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYI,kBAA5B,EAAgD,4BAAhD,CAAN;AACD;;AAED,UAAMC,QAAQf,WAAWgB,iBAAX,CAA6BV,GAA7B,CAAd;AACA,QAAIW,OAAJ;AACA,UAAMC,UAAU,IAAIC,OAAJ,CAAaC,QAAD,IAAc;AACxCH,gBAAUG,QAAV;AACD,KAFe,CAAhB;AAGA,QAAIC,YAAJ;AACAT,mBAAeU,QAAf,CAAwBhB,IAAIiB,IAA5B,EAAkCR,KAAlC,EAAyCT,IAAIO,MAA7C,EAAqDP,IAAIC,IAAzD,EAAgEiB,QAAD,IAAc;AAC3EH,qBAAeG,QAAf;AACAP,cAAQ;AACNQ,iBAAS;AACP,oCAA0BJ;AADnB,SADH;AAINK,kBAAU;AACRC,kBAAQ;AADA;AAJJ,OAAR;AAQD,KAVD,EAUGC,KAVH,CAUUC,GAAD,IAAS;AAChBvB,UAAIO,MAAJ,CAAWiB,gBAAX,CAA4BC,KAA5B,CAAmC,eAAcV,YAAa,4BAA9D,EAA2FQ,GAA3F;AACD,KAZD;AAaA,WAAOX,OAAP;AACD;;AAED;;;;;AAKA,SAAOF,iBAAP,CAAyBV,GAAzB,EAA8B;AAC5B,UAAMiB,OAAOjB,IAAIiB,IAAJ,IAAY,EAAzB;AACA,UAAMS,WAAW,OAAOT,KAAKR,KAAZ,KAAsB,WAAvC;AACA,UAAMkB,cAAc,OAAOV,KAAKW,QAAZ,KAAyB,WAA7C;;AAEA,QAAInB,KAAJ;AACA,QAAIiB,YAAYC,WAAhB,EAA6B;AAC3B,YAAM,IAAIxB,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYI,kBAA5B,EACJ,qDADI,CAAN;AAED,KAHD,MAGO,IAAIkB,QAAJ,EAAc;AACnBjB,cAAQQ,KAAKR,KAAb;AACD,KAFM,MAEA,IAAIkB,WAAJ,EAAiB;AACtBlB,cAAQ;AACN,oBAAY;AACV,iBAAOQ,KAAKW;AADF;AADN,OAAR;AAKD,KANM,MAMA;AACL,YAAM,IAAIzB,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYI,kBAA5B,EAAgD,+DAAhD,CAAN;AACD;AACD,WAAOC,KAAP;AACD;AA/D2C;;QAAjCf,U,GAAAA,U;kBAkEEA,U","file":"PushRouter.js","sourcesContent":["import PromiseRouter   from '../PromiseRouter';\nimport * as middleware from \"../middlewares\";\nimport { Parse }       from \"parse/node\";\n\nexport class PushRouter extends PromiseRouter {\n\n  mountRoutes() {\n    this.route(\"POST\", \"/push\", middleware.promiseEnforceMasterKeyAccess, PushRouter.handlePOST);\n  }\n\n  static handlePOST(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to send push notifications.');\n    }\n    const pushController = req.config.pushController;\n    if (!pushController) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED, 'Push controller is not set');\n    }\n\n    const where = PushRouter.getQueryCondition(req);\n    let resolve;\n    const promise = new Promise((_resolve) => {\n      resolve = _resolve;\n    });\n    let pushStatusId;\n    pushController.sendPush(req.body, where, req.config, req.auth, (objectId) => {\n      pushStatusId = objectId;\n      resolve({\n        headers: {\n          'X-Parse-Push-Status-Id': pushStatusId\n        },\n        response: {\n          result: true\n        }\n      });\n    }).catch((err) => {\n      req.config.loggerController.error(`_PushStatus ${pushStatusId}: error while sending push`, err);\n    });\n    return promise;\n  }\n\n  /**\n   * Get query condition from the request body.\n   * @param {Object} req A request object\n   * @returns {Object} The query condition, the where field in a query api call\n   */\n  static getQueryCondition(req) {\n    const body = req.body || {};\n    const hasWhere = typeof body.where !== 'undefined';\n    const hasChannels = typeof body.channels !== 'undefined';\n\n    let where;\n    if (hasWhere && hasChannels) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED,\n        'Channels and query can not be set at the same time.');\n    } else if (hasWhere) {\n      where = body.where;\n    } else if (hasChannels) {\n      where = {\n        \"channels\": {\n          \"$in\": body.channels\n        }\n      }\n    } else {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED, 'Sending a push requires either \"channels\" or a \"where\" query.');\n    }\n    return where;\n  }\n}\n\nexport default PushRouter;\n"]}