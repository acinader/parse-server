{"version":3,"sources":["../../src/Routers/IAPValidationRouter.js"],"names":["request","require","rest","IAP_SANDBOX_URL","IAP_PRODUCTION_URL","APP_STORE_ERRORS","appStoreError","status","parseInt","errorString","error","validateWithAppStore","url","receipt","Promise","fulfill","reject","post","body","json","err","res","getFileForProductIdentifier","productIdentifier","req","find","config","auth","undefined","info","clientSDK","then","result","products","results","length","Parse","Error","OBJECT_NOT_FOUND","download","resolve","response","IAPValidationRouter","PromiseRouter","handleRequest","INVALID_JSON","base64","process","env","TESTING","bypassAppStoreValidation","successCallback","errorCallback","mountRoutes","route"],"mappings":"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","file":"IAPValidationRouter.js","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nvar request = require(\"request\");\nvar rest = require(\"../rest\");\nimport Parse from 'parse/node';\n\n// TODO move validation logic in IAPValidationController\nconst IAP_SANDBOX_URL = \"https://sandbox.itunes.apple.com/verifyReceipt\";\nconst IAP_PRODUCTION_URL = \"https://buy.itunes.apple.com/verifyReceipt\";\n\nconst APP_STORE_ERRORS = {\n  21000: \"The App Store could not read the JSON object you provided.\",\n  21002: \"The data in the receipt-data property was malformed or missing.\",\n  21003: \"The receipt could not be authenticated.\",\n  21004: \"The shared secret you provided does not match the shared secret on file for your account.\",\n  21005: \"The receipt server is not currently available.\",\n  21006: \"This receipt is valid but the subscription has expired.\",\n  21007: \"This receipt is from the test environment, but it was sent to the production environment for verification. Send it to the test environment instead.\",\n  21008: \"This receipt is from the production environment, but it was sent to the test environment for verification. Send it to the production environment instead.\"\n}\n\nfunction appStoreError(status) {\n  status = parseInt(status);\n  var errorString = APP_STORE_ERRORS[status] || \"unknown error.\";\n  return { status: status, error: errorString }\n}\n\nfunction validateWithAppStore(url, receipt) {\n  return new Promise(function(fulfill, reject) {\n    request.post({\n      url: url,\n      body: { \"receipt-data\": receipt },\n      json: true,\n    }, function(err, res, body) {\n      var status = body.status;\n      if (status == 0) {\n        // No need to pass anything, status is OK\n        return fulfill();\n      }\n      // receipt is from test and should go to test\n      return reject(body);\n    });\n  });\n}\n\nfunction getFileForProductIdentifier(productIdentifier, req) {\n  return rest.find(req.config, req.auth, '_Product', { productIdentifier: productIdentifier }, undefined, req.info.clientSDK).then(function(result){\n    const products = result.results;\n    if (!products || products.length != 1) {\n      // Error not found or too many\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.')\n    }\n\n    var download = products[0].download;\n    return Promise.resolve({response: download});\n  });\n}\n\n\nexport class IAPValidationRouter extends PromiseRouter {\n\n  handleRequest(req) {\n    let receipt = req.body.receipt;\n    const productIdentifier = req.body.productIdentifier;\n\n    if (!receipt || ! productIdentifier) {\n      // TODO: Error, malformed request\n      throw new Parse.Error(Parse.Error.INVALID_JSON, \"missing receipt or productIdentifier\");\n    }\n\n    // Transform the object if there\n    // otherwise assume it's in Base64 already\n    if (typeof receipt == \"object\") {\n      if (receipt[\"__type\"] == \"Bytes\") {\n        receipt = receipt.base64;\n      }\n    }\n\n    if (process.env.TESTING == \"1\" && req.body.bypassAppStoreValidation) {\n      return getFileForProductIdentifier(productIdentifier, req);\n    }\n\n    function successCallback() {\n      return getFileForProductIdentifier(productIdentifier, req);\n    }\n\n    function errorCallback(error) {\n      return Promise.resolve({response: appStoreError(error.status) });\n    }\n\n    return validateWithAppStore(IAP_PRODUCTION_URL, receipt).then(() => {\n\n      return successCallback();\n\n    }, (error) => {\n      if (error.status == 21007) {\n        return validateWithAppStore(IAP_SANDBOX_URL, receipt).then(() => {\n          return successCallback();\n        }, (error) => {\n          return errorCallback(error);\n        }\n        );\n      }\n\n      return errorCallback(error);\n    });\n  }\n\n  mountRoutes() {\n    this.route(\"POST\",\"/validate_purchase\", this.handleRequest);\n  }\n}\n"]}