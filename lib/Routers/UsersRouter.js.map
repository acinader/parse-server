{"version":3,"sources":["../../src/Routers/UsersRouter.js"],"names":["UsersRouter","ClassesRouter","className","removeHiddenProperties","obj","key","hasOwnProperty","test","_authenticateUserFromRequest","req","Promise","resolve","reject","payload","body","username","query","email","password","Parse","Error","USERNAME_MISSING","PASSWORD_MISSING","OBJECT_NOT_FOUND","user","isValidPassword","$or","config","database","find","then","results","length","loggerController","warn","filter","passwordCrypto","compare","correct","accountLockoutPolicy","AccountLockout","handleLoginAttempt","auth","isMaster","ACL","Object","keys","verifyUserEmails","preventLoginWithUnverifiedEmail","emailVerified","EMAIL_NOT_FOUND","authData","forEach","provider","catch","error","handleMe","info","sessionToken","INVALID_SESSION_TOKEN","rest","Auth","master","include","clientSDK","response","handleLogIn","res","passwordPolicy","maxPasswordAge","changedAt","_password_changed_at","Date","update","_encode","__type","iso","expiresAt","getTime","sessionData","createSession","userId","objectId","createdWith","installationId","filesController","expandFilesInObject","handleVerifyPassword","handleLogOut","success","undefined","records","del","_throwOnBadEmailConfig","Config","validateEmailConfiguration","emailAdapter","userController","adapter","appName","publicServerURL","emailVerifyTokenValidityDuration","e","INTERNAL_SERVER_ERROR","handleResetRequest","EMAIL_MISSING","INVALID_EMAIL_ADDRESS","sendPasswordResetEmail","err","code","handleVerificationEmailRequest","OTHER_CAUSE","regenerateEmailVerifyToken","sendVerificationEmail","mountRoutes","route","handleFind","handleCreate","handleGet","handleUpdate","handleDelete"],"mappings":"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","file":"UsersRouter.js","sourcesContent":["// These methods handle the User-related routes.\n\nimport Parse from 'parse/node';\nimport Config from '../Config';\nimport AccountLockout from '../AccountLockout';\nimport ClassesRouter from './ClassesRouter';\nimport rest from '../rest';\nimport Auth from '../Auth';\nimport passwordCrypto from '../password';\n\nexport class UsersRouter extends ClassesRouter {\n\n  className() {\n    return '_User';\n  }\n\n  /**\n   * Removes all \"_\" prefixed properties from an object, except \"__type\"\n   * @param {Object} obj An object.\n   */\n  static removeHiddenProperties(obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        // Regexp comes from Parse.Object.prototype.validate\n        if (key !== \"__type\" && !(/^[A-Za-z][0-9A-Za-z_]*$/).test(key)) {\n          delete obj[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * Validates a password request in login and verifyPassword\n   * @param {Object} req The request\n   * @returns {Object} User object\n   * @private\n   */\n  _authenticateUserFromRequest(req) {\n    return new Promise((resolve, reject) => {\n      // Use query parameters instead if provided in url\n      let payload = req.body;\n      if (!payload.username && req.query.username || !payload.email && req.query.email) {\n        payload = req.query;\n      }\n      const {\n        username,\n        email,\n        password,\n      } = payload;\n\n      // TODO: use the right error codes / descriptions.\n      if (!username && !email) {\n        throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'username/email is required.');\n      }\n      if (!password) {\n        throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'password is required.');\n      }\n      if (typeof password !== 'string'\n        || email && typeof email !== 'string'\n        || username && typeof username !== 'string') {\n        throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n      }\n\n      let user;\n      let isValidPassword = false;\n      let query;\n      if (email && username) {\n        query = { email, username };\n      } else if (email) {\n        query = { email };\n      } else {\n        query = { $or: [{ username }, { email: username }] };\n      }\n      return req.config.database.find('_User', query)\n        .then((results) => {\n          if (!results.length) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n\n          if (results.length > 1) { // corner case where user1 has username == user2 email\n            req.config.loggerController.warn('There is a user which email is the same as another user\\'s username, logging in based on username');\n            user = results.filter((user) => user.username === username)[0];\n          } else {\n            user = results[0];\n          }\n\n          return passwordCrypto.compare(password, user.password);\n        })\n        .then((correct) => {\n          isValidPassword = correct;\n          const accountLockoutPolicy = new AccountLockout(user, req.config);\n          return accountLockoutPolicy.handleLoginAttempt(isValidPassword);\n        })\n        .then(() => {\n          if (!isValidPassword) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          // Ensure the user isn't locked out\n          // A locked out user won't be able to login\n          // To lock a user out, just set the ACL to `masterKey` only  ({}).\n          // Empty ACL is OK\n          if (!req.auth.isMaster && user.ACL && Object.keys(user.ACL).length == 0) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          if (req.config.verifyUserEmails && req.config.preventLoginWithUnverifiedEmail && !user.emailVerified) {\n            throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, 'User email is not verified.');\n          }\n\n          delete user.password;\n\n          // Sometimes the authData still has null on that keys\n          // https://github.com/parse-community/parse-server/issues/935\n          if (user.authData) {\n            Object.keys(user.authData).forEach((provider) => {\n              if (user.authData[provider] === null) {\n                delete user.authData[provider];\n              }\n            });\n            if (Object.keys(user.authData).length == 0) {\n              delete user.authData;\n            }\n          }\n\n          return resolve(user);\n        }).catch((error) => {\n          return reject(error);\n        });\n    });\n  }\n\n  handleMe(req) {\n    if (!req.info || !req.info.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n    }\n    const sessionToken = req.info.sessionToken;\n    return rest.find(req.config, Auth.master(req.config), '_Session',\n      { sessionToken },\n      { include: 'user' }, req.info.clientSDK)\n      .then((response) => {\n        if (!response.results ||\n          response.results.length == 0 ||\n          !response.results[0].user) {\n          throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n        } else {\n          const user = response.results[0].user;\n          // Send token back on the login, because SDKs expect that.\n          user.sessionToken = sessionToken;\n\n          // Remove hidden properties.\n          UsersRouter.removeHiddenProperties(user);\n\n          return { response: user };\n        }\n      });\n  }\n\n  handleLogIn(req) {\n    let user;\n    return this._authenticateUserFromRequest(req)\n      .then((res) => {\n\n        user = res;\n\n        // handle password expiry policy\n        if (req.config.passwordPolicy && req.config.passwordPolicy.maxPasswordAge) {\n          let changedAt = user._password_changed_at;\n\n          if (!changedAt) {\n            // password was created before expiry policy was enabled.\n            // simply update _User object so that it will start enforcing from now\n            changedAt = new Date();\n            req.config.database.update('_User', { username: user.username },\n              { _password_changed_at: Parse._encode(changedAt) });\n          } else {\n            // check whether the password has expired\n            if (changedAt.__type == 'Date') {\n              changedAt = new Date(changedAt.iso);\n            }\n            // Calculate the expiry time.\n            const expiresAt = new Date(changedAt.getTime() + 86400000 * req.config.passwordPolicy.maxPasswordAge);\n            if (expiresAt < new Date()) // fail of current time is past password expiry time\n              throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Your password has expired. Please reset your password.');\n          }\n        }\n\n        // Remove hidden properties.\n        UsersRouter.removeHiddenProperties(user);\n\n        const {\n          sessionData,\n          createSession\n        } = Auth.createSession(req.config, {\n          userId: user.objectId, createdWith: {\n            'action': 'login',\n            'authProvider': 'password'\n          }, installationId: req.info.installationId\n        });\n\n        user.sessionToken = sessionData.sessionToken;\n\n        req.config.filesController.expandFilesInObject(req.config, user);\n\n        return createSession();\n      })\n      .then(() => {\n        return { response: user };\n      });\n  }\n\n  handleVerifyPassword(req) {\n    return this._authenticateUserFromRequest(req)\n      .then((user) => {\n\n        // Remove hidden properties.\n        UsersRouter.removeHiddenProperties(user);\n\n        return { response: user };\n      }).catch((error) => {\n        throw error;\n      });\n  }\n\n  handleLogOut(req) {\n    const success = { response: {} };\n    if (req.info && req.info.sessionToken) {\n      return rest.find(req.config, Auth.master(req.config), '_Session',\n        { sessionToken: req.info.sessionToken }, undefined, req.info.clientSDK\n      ).then((records) => {\n        if (records.results && records.results.length) {\n          return rest.del(req.config, Auth.master(req.config), '_Session',\n            records.results[0].objectId\n          ).then(() => {\n            return Promise.resolve(success);\n          });\n        }\n        return Promise.resolve(success);\n      });\n    }\n    return Promise.resolve(success);\n  }\n\n  _throwOnBadEmailConfig(req) {\n    try {\n      Config.validateEmailConfiguration({\n        emailAdapter: req.config.userController.adapter,\n        appName: req.config.appName,\n        publicServerURL: req.config.publicServerURL,\n        emailVerifyTokenValidityDuration: req.config.emailVerifyTokenValidityDuration\n      });\n    } catch (e) {\n      if (typeof e === 'string') {\n        // Maybe we need a Bad Configuration error, but the SDKs won't understand it. For now, Internal Server Error.\n        throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'An appName, publicServerURL, and emailAdapter are required for password reset and email verification functionality.');\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  handleResetRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, \"you must provide an email\");\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(Parse.Error.INVALID_EMAIL_ADDRESS, 'you must provide a valid email string');\n    }\n    const userController = req.config.userController;\n    return userController.sendPasswordResetEmail(email).then(() => {\n      return Promise.resolve({\n        response: {}\n      });\n    }, err => {\n      if (err.code === Parse.Error.OBJECT_NOT_FOUND) {\n        throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, `No user found with email ${email}.`);\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  handleVerificationEmailRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, 'you must provide an email');\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(Parse.Error.INVALID_EMAIL_ADDRESS, 'you must provide a valid email string');\n    }\n\n    return req.config.database.find('_User', { email: email }).then((results) => {\n      if (!results.length || results.length < 1) {\n        throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, `No user found with email ${email}`);\n      }\n      const user = results[0];\n\n      // remove password field, messes with saving on postgres\n      delete user.password;\n\n      if (user.emailVerified) {\n        throw new Parse.Error(Parse.Error.OTHER_CAUSE, `Email ${email} is already verified.`);\n      }\n\n      const userController = req.config.userController;\n      return userController.regenerateEmailVerifyToken(user).then(() => {\n        userController.sendVerificationEmail(user);\n        return { response: {} };\n      });\n    });\n  }\n\n\n  mountRoutes() {\n    this.route('GET', '/users', req => { return this.handleFind(req); });\n    this.route('POST', '/users', req => { return this.handleCreate(req); });\n    this.route('GET', '/users/me', req => { return this.handleMe(req); });\n    this.route('GET', '/users/:objectId', req => { return this.handleGet(req); });\n    this.route('PUT', '/users/:objectId', req => { return this.handleUpdate(req); });\n    this.route('DELETE', '/users/:objectId', req => { return this.handleDelete(req); });\n    this.route('GET', '/login', req => { return this.handleLogIn(req); });\n    this.route('POST', '/login', req => { return this.handleLogIn(req); });\n    this.route('POST', '/logout', req => { return this.handleLogOut(req); });\n    this.route('POST', '/requestPasswordReset', req => { return this.handleResetRequest(req); });\n    this.route('POST', '/verificationEmailRequest', req => { return this.handleVerificationEmailRequest(req); });\n    this.route('GET', '/verifyPassword', req => { return this.handleVerifyPassword(req); });\n  }\n}\n\nexport default UsersRouter;\n"]}