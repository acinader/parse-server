{"version":3,"sources":["../../src/Routers/FunctionsRouter.js"],"names":["Parse","require","triggers","parseObject","obj","Array","isArray","map","item","__type","Object","assign","Date","iso","File","fromJSON","parseParams","params","_","mapValues","FunctionsRouter","PromiseRouter","mountRoutes","route","handleCloudFunction","promiseEnforceMasterKeyAccess","req","handleCloudJob","jobName","body","applicationId","config","jobHandler","jobFunction","getJob","Error","SCRIPT_FAILED","query","request","log","loggerController","headers","ip","status","success","setSucceeded","bind","error","setFailed","message","setMessage","setRunning","then","jobStatus","jobId","objectId","process","nextTick","response","createResponseObject","resolve","reject","result","_encode","code","functionName","theFunction","getFunction","theValidator","getValidator","master","auth","isMaster","user","installationId","info","VALIDATION_ERROR","Promise","userString","id","undefined","cleanInput","logger","truncateLogMessage","JSON","stringify","cleanResult","e","javascriptKey","masterKey"],"mappings":"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","file":"FunctionsRouter.js","sourcesContent":["// FunctionsRouter.js\n\nvar Parse = require('parse/node').Parse,\n  triggers = require('../triggers');\n\nimport PromiseRouter from '../PromiseRouter';\nimport { promiseEnforceMasterKeyAccess } from '../middlewares';\nimport { jobStatusHandler } from '../StatusHandler';\nimport _ from 'lodash';\nimport { logger } from '../logger';\n\nfunction parseObject(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map((item) => {\n      return parseObject(item);\n    });\n  } else if (obj && obj.__type == 'Date') {\n    return Object.assign(new Date(obj.iso), obj);\n  } else if (obj && obj.__type == 'File') {\n    return Parse.File.fromJSON(obj);\n  } else if (obj && typeof obj === 'object') {\n    return parseParams(obj);\n  } else {\n    return obj;\n  }\n}\n\nfunction parseParams(params) {\n  return _.mapValues(params, parseObject);\n}\n\nexport class FunctionsRouter extends PromiseRouter {\n\n  mountRoutes() {\n    this.route('POST', '/functions/:functionName', FunctionsRouter.handleCloudFunction);\n    this.route('POST', '/jobs/:jobName', promiseEnforceMasterKeyAccess, function(req) {\n      return FunctionsRouter.handleCloudJob(req);\n    });\n    this.route('POST', '/jobs', promiseEnforceMasterKeyAccess, function(req) {\n      return FunctionsRouter.handleCloudJob(req);\n    });\n  }\n\n  static handleCloudJob(req) {\n    const jobName = req.params.jobName || req.body.jobName;\n    const applicationId = req.config.applicationId;\n    const jobHandler = jobStatusHandler(req.config);\n    const jobFunction = triggers.getJob(jobName, applicationId);\n    if (!jobFunction) {\n      throw new Parse.Error(Parse.Error.SCRIPT_FAILED, 'Invalid job.');\n    }\n    let params = Object.assign({}, req.body, req.query);\n    params = parseParams(params);\n    const request = {\n      params: params,\n      log: req.config.loggerController,\n      headers: req.config.headers,\n      ip: req.config.ip,\n      jobName\n    };\n    const status = {\n      success: jobHandler.setSucceeded.bind(jobHandler),\n      error: jobHandler.setFailed.bind(jobHandler),\n      message: jobHandler.setMessage.bind(jobHandler)\n    }\n    return jobHandler.setRunning(jobName, params).then((jobStatus) => {\n      request.jobId = jobStatus.objectId\n      // run the function async\n      process.nextTick(() => {\n        jobFunction(request, status);\n      });\n      return {\n        headers: {\n          'X-Parse-Job-Status-Id': jobStatus.objectId\n        },\n        response: {}\n      }\n    });\n  }\n\n  static createResponseObject(resolve, reject, message) {\n    return {\n      success: function(result) {\n        resolve({\n          response: {\n            result: Parse._encode(result)\n          }\n        });\n      },\n      error: function(code, message) {\n        if (!message) {\n          if (code instanceof Parse.Error) {\n            return reject(code)\n          }\n          message = code;\n          code = Parse.Error.SCRIPT_FAILED;\n        }\n        reject(new Parse.Error(code, message));\n      },\n      message: message\n    }\n  }\n\n  static handleCloudFunction(req) {\n    const functionName = req.params.functionName;\n    const applicationId = req.config.applicationId;\n    const theFunction = triggers.getFunction(functionName, applicationId);\n    const theValidator = triggers.getValidator(req.params.functionName, applicationId);\n    if (theFunction) {\n      let params = Object.assign({}, req.body, req.query);\n      params = parseParams(params);\n      var request = {\n        params: params,\n        master: req.auth && req.auth.isMaster,\n        user: req.auth && req.auth.user,\n        installationId: req.info.installationId,\n        log: req.config.loggerController,\n        headers: req.config.headers,\n        ip: req.config.ip,\n        functionName\n      };\n\n      if (theValidator && typeof theValidator === \"function\") {\n        var result = theValidator(request);\n        if (!result) {\n          throw new Parse.Error(Parse.Error.VALIDATION_ERROR, 'Validation failed.');\n        }\n      }\n\n      return new Promise(function (resolve, reject) {\n        const userString = (req.auth && req.auth.user) ? req.auth.user.id : undefined;\n        const cleanInput = logger.truncateLogMessage(JSON.stringify(params));\n        var response = FunctionsRouter.createResponseObject((result) => {\n          try {\n            const cleanResult = logger.truncateLogMessage(JSON.stringify(result.response.result));\n            logger.info(\n              `Ran cloud function ${functionName} for user ${userString} with:\\n  Input: ${cleanInput }\\n  Result: ${cleanResult }`,\n              {\n                functionName,\n                params,\n                user: userString,\n              }\n            );\n            resolve(result);\n          } catch (e) {\n            reject(e);\n          }\n        }, (error) => {\n          try {\n            logger.error(\n              `Failed running cloud function ${functionName} for user ${userString} with:\\n  Input: ${cleanInput}\\n  Error: ` + JSON.stringify(error),\n              {\n                functionName,\n                error,\n                params,\n                user: userString\n              }\n            );\n            reject(error);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        // Force the keys before the function calls.\n        Parse.applicationId = req.config.applicationId;\n        Parse.javascriptKey = req.config.javascriptKey;\n        Parse.masterKey = req.config.masterKey;\n        theFunction(request, response);\n      });\n    } else {\n      throw new Parse.Error(Parse.Error.SCRIPT_FAILED, `Invalid function: \"${functionName}\"`);\n    }\n  }\n}\n"]}