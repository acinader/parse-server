{"version":3,"sources":["../../src/Routers/SchemasRouter.js"],"names":["middleware","Parse","require","SchemaController","classNameMismatchResponse","bodyClass","pathClass","Error","INVALID_CLASS_NAME","getAllSchemas","req","config","database","loadSchema","clearCache","then","schemaController","getAllClasses","schemas","response","results","getOneSchema","className","params","schema","catch","error","undefined","INTERNAL_SERVER_ERROR","createSchema","auth","isReadOnly","OPERATION_FORBIDDEN","body","path","addClassIfNotExists","fields","classLevelPermissions","indexes","modifySchema","submittedFields","updateClass","result","deleteSchema","classNameIsValid","invalidClassNameMessage","SchemasRouter","PromiseRouter","mountRoutes","route","promiseEnforceMasterKeyAccess"],"mappings":"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","file":"SchemasRouter.js","sourcesContent":["// schemas.js\n\nvar Parse = require('parse/node').Parse,\n  SchemaController = require('../Controllers/SchemaController');\n\nimport PromiseRouter   from '../PromiseRouter';\nimport * as middleware from \"../middlewares\";\n\nfunction classNameMismatchResponse(bodyClass, pathClass) {\n  throw new Parse.Error(\n    Parse.Error.INVALID_CLASS_NAME,\n    `Class name mismatch between ${bodyClass} and ${pathClass}.`\n  );\n}\n\nfunction getAllSchemas(req) {\n  return req.config.database.loadSchema({ clearCache: true})\n    .then(schemaController => schemaController.getAllClasses(true))\n    .then(schemas => ({ response: { results: schemas } }));\n}\n\nfunction getOneSchema(req) {\n  const className = req.params.className;\n  return req.config.database.loadSchema({ clearCache: true})\n    .then(schemaController => schemaController.getOneSchema(className, true))\n    .then(schema => ({ response: schema }))\n    .catch(error => {\n      if (error === undefined) {\n        throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, `Class ${className} does not exist.`);\n      } else {\n        throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Database adapter error.');\n      }\n    });\n}\n\nfunction createSchema(req) {\n  if (req.auth.isReadOnly) {\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to create a schema.');\n  }\n  if (req.params.className && req.body.className) {\n    if (req.params.className != req.body.className) {\n      return classNameMismatchResponse(req.body.className, req.params.className);\n    }\n  }\n\n  const className = req.params.className || req.body.className;\n  if (!className) {\n    throw new Parse.Error(135, `POST ${req.path} needs a class name.`);\n  }\n\n  return req.config.database.loadSchema({ clearCache: true})\n    .then(schema => schema.addClassIfNotExists(className, req.body.fields, req.body.classLevelPermissions, req.body.indexes))\n    .then(schema => ({ response: schema }));\n}\n\nfunction modifySchema(req) {\n  if (req.auth.isReadOnly) {\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to update a schema.');\n  }\n  if (req.body.className && req.body.className != req.params.className) {\n    return classNameMismatchResponse(req.body.className, req.params.className);\n  }\n\n  const submittedFields = req.body.fields || {};\n  const className = req.params.className;\n\n  return req.config.database.loadSchema({ clearCache: true})\n    .then(schema => schema.updateClass(className, submittedFields, req.body.classLevelPermissions, req.body.indexes, req.config.database))\n    .then(result => ({response: result}));\n}\n\nconst deleteSchema = req => {\n  if (req.auth.isReadOnly) {\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to delete a schema.');\n  }\n  if (!SchemaController.classNameIsValid(req.params.className)) {\n    throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, SchemaController.invalidClassNameMessage(req.params.className));\n  }\n  return req.config.database.deleteSchema(req.params.className)\n    .then(() => ({ response: {} }));\n}\n\nexport class SchemasRouter extends PromiseRouter {\n  mountRoutes() {\n    this.route('GET', '/schemas', middleware.promiseEnforceMasterKeyAccess, getAllSchemas);\n    this.route('GET', '/schemas/:className', middleware.promiseEnforceMasterKeyAccess, getOneSchema);\n    this.route('POST', '/schemas', middleware.promiseEnforceMasterKeyAccess, createSchema);\n    this.route('POST', '/schemas/:className', middleware.promiseEnforceMasterKeyAccess, createSchema);\n    this.route('PUT', '/schemas/:className', middleware.promiseEnforceMasterKeyAccess, modifySchema);\n    this.route('DELETE', '/schemas/:className', middleware.promiseEnforceMasterKeyAccess, deleteSchema);\n  }\n}\n"]}