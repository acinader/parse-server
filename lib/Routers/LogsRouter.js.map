{"version":3,"sources":["../../src/Routers/LogsRouter.js"],"names":["middleware","LogsRouter","PromiseRouter","mountRoutes","route","promiseEnforceMasterKeyAccess","validateRequest","req","handleGET","config","loggerController","Parse","Error","PUSH_MISCONFIGURED","from","query","until","size","n","order","level","options","getLogs","then","result","Promise","resolve","response"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;IAAYA,U;;;;;;AAEL,MAAMC,UAAN,SAAyBC,uBAAzB,CAAuC;;AAE5CC,gBAAc;AACZ,SAAKC,KAAL,CAAW,KAAX,EAAiB,YAAjB,EAA+BJ,WAAWK,6BAA1C,EAAyE,KAAKC,eAA9E,EAAiGC,GAAD,IAAS;AACvG,aAAO,KAAKC,SAAL,CAAeD,GAAf,CAAP;AACD,KAFD;AAGD;;AAEDD,kBAAgBC,GAAhB,EAAqB;AACnB,QAAI,CAACA,IAAIE,MAAL,IAAe,CAACF,IAAIE,MAAJ,CAAWC,gBAA/B,EAAiD;AAC/C,YAAM,IAAIC,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYC,kBAA5B,EACJ,iCADI,CAAN;AAED;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,YAAUD,GAAV,EAAe;AACb,UAAMO,OAAOP,IAAIQ,KAAJ,CAAUD,IAAvB;AACA,UAAME,QAAQT,IAAIQ,KAAJ,CAAUC,KAAxB;AACA,QAAIC,OAAOV,IAAIQ,KAAJ,CAAUE,IAArB;AACA,QAAIV,IAAIQ,KAAJ,CAAUG,CAAd,EAAiB;AACfD,aAAOV,IAAIQ,KAAJ,CAAUG,CAAjB;AACD;;AAED,UAAMC,QAAQZ,IAAIQ,KAAJ,CAAUI,KAAxB;AACA,UAAMC,QAAQb,IAAIQ,KAAJ,CAAUK,KAAxB;AACA,UAAMC,UAAU;AACdP,UADc;AAEdE,WAFc;AAGdC,UAHc;AAIdE,WAJc;AAKdC;AALc,KAAhB;;AAQA,WAAOb,IAAIE,MAAJ,CAAWC,gBAAX,CAA4BY,OAA5B,CAAoCD,OAApC,EAA6CE,IAA7C,CAAmDC,MAAD,IAAY;AACnE,aAAOC,QAAQC,OAAR,CAAgB;AACrBC,kBAAUH;AADW,OAAhB,CAAP;AAGD,KAJM,CAAP;AAKD;AA9C2C;;QAAjCvB,U,GAAAA,U;kBAiDEA,U","file":"LogsRouter.js","sourcesContent":["import { Parse } from 'parse/node';\nimport PromiseRouter from '../PromiseRouter';\nimport * as middleware from \"../middlewares\";\n\nexport class LogsRouter extends PromiseRouter {\n\n  mountRoutes() {\n    this.route('GET','/scriptlog', middleware.promiseEnforceMasterKeyAccess, this.validateRequest,  (req) => {\n      return this.handleGET(req);\n    });\n  }\n\n  validateRequest(req) {\n    if (!req.config || !req.config.loggerController) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED,\n        'Logger adapter is not available');\n    }\n  }\n\n  // Returns a promise for a {response} object.\n  // query params:\n  // level (optional) Level of logging you want to query for (info || error)\n  // from (optional) Start time for the search. Defaults to 1 week ago.\n  // until (optional) End time for the search. Defaults to current time.\n  // order (optional) Direction of results returned, either “asc” or “desc”. Defaults to “desc”.\n  // size (optional) Number of rows returned by search. Defaults to 10\n  // n same as size, overrides size if set\n  handleGET(req) {\n    const from = req.query.from;\n    const until = req.query.until;\n    let size = req.query.size;\n    if (req.query.n) {\n      size = req.query.n;\n    }\n\n    const order = req.query.order\n    const level = req.query.level;\n    const options = {\n      from,\n      until,\n      size,\n      order,\n      level\n    };\n\n    return req.config.loggerController.getLogs(options).then((result) => {\n      return Promise.resolve({\n        response: result\n      });\n    })\n  }\n}\n\nexport default LogsRouter;\n"]}