{"version":3,"sources":["../../src/Routers/PurgeRouter.js"],"names":["middleware","PurgeRouter","PromiseRouter","handlePurge","req","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","config","database","purgeCollection","params","className","then","cacheAdapter","cacheController","user","clear","role","response","catch","error","code","OBJECT_NOT_FOUND","mountRoutes","route","promiseEnforceMasterKeyAccess"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,U;;AACZ;;;;;;;;AAEO,MAAMC,WAAN,SAA0BC,uBAA1B,CAAwC;;AAE7CC,cAAYC,GAAZ,EAAiB;AACf,QAAIA,IAAIC,IAAJ,CAASC,UAAb,EAAyB;AACvB,YAAM,IAAIC,eAAMC,KAAV,CAAgBD,eAAMC,KAAN,CAAYC,mBAA5B,EAAiD,uDAAjD,CAAN;AACD;AACD,WAAOL,IAAIM,MAAJ,CAAWC,QAAX,CAAoBC,eAApB,CAAoCR,IAAIS,MAAJ,CAAWC,SAA/C,EACJC,IADI,CACC,MAAM;AACV,UAAIC,eAAeZ,IAAIM,MAAJ,CAAWO,eAA9B;AACA,UAAIb,IAAIS,MAAJ,CAAWC,SAAX,IAAwB,UAA5B,EAAwC;AACtCE,qBAAaE,IAAb,CAAkBC,KAAlB;AACD,OAFD,MAEO,IAAIf,IAAIS,MAAJ,CAAWC,SAAX,IAAwB,OAA5B,EAAqC;AAC1CE,qBAAaI,IAAb,CAAkBD,KAAlB;AACD;AACD,aAAO,EAACE,UAAU,EAAX,EAAP;AACD,KATI,EASFC,KATE,CASKC,KAAD,IAAW;AAClB,UAAI,CAACA,KAAD,IAAWA,SAASA,MAAMC,IAAN,KAAejB,eAAMC,KAAN,CAAYiB,gBAAnD,EAAsE;AACpE,eAAO,EAACJ,UAAU,EAAX,EAAP;AACD;AACD,YAAME,KAAN;AACD,KAdI,CAAP;AAeD;;AAEDG,gBAAc;AACZ,SAAKC,KAAL,CAAW,QAAX,EAAsB,mBAAtB,EAA2C3B,WAAW4B,6BAAtD,EAAsFxB,GAAD,IAAS;AAAE,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AAA+B,KAA/H;AACD;AAzB4C;;QAAlCH,W,GAAAA,W;kBA4BEA,W","file":"PurgeRouter.js","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nimport * as middleware from '../middlewares';\nimport Parse from 'parse/node';\n\nexport class PurgeRouter extends PromiseRouter {\n\n  handlePurge(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to purge a schema.');\n    }\n    return req.config.database.purgeCollection(req.params.className)\n      .then(() => {\n        var cacheAdapter = req.config.cacheController;\n        if (req.params.className == '_Session') {\n          cacheAdapter.user.clear();\n        } else if (req.params.className == '_Role') {\n          cacheAdapter.role.clear();\n        }\n        return {response: {}};\n      }).catch((error) => {\n        if (!error || (error && error.code === Parse.Error.OBJECT_NOT_FOUND)) {\n          return {response: {}};\n        }\n        throw error;\n      });\n  }\n\n  mountRoutes() {\n    this.route('DELETE',  '/purge/:className', middleware.promiseEnforceMasterKeyAccess, (req) => { return this.handlePurge(req); });\n  }\n}\n\nexport default PurgeRouter;\n"]}