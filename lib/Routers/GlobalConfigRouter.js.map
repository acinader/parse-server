{"version":3,"sources":["../../src/Routers/GlobalConfigRouter.js"],"names":["middleware","GlobalConfigRouter","PromiseRouter","getGlobalConfig","req","config","database","find","objectId","limit","then","results","length","response","params","globalConfig","updateGlobalConfig","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","body","update","Object","keys","reduce","acc","key","upsert","result","mountRoutes","route","promiseEnforceMasterKeyAccess"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;IAAYA,U;;;;;;AAEL,MAAMC,kBAAN,SAAiCC,uBAAjC,CAA+C;AACpDC,kBAAgBC,GAAhB,EAAqB;AACnB,WAAOA,IAAIC,MAAJ,CAAWC,QAAX,CAAoBC,IAApB,CAAyB,eAAzB,EAA0C,EAAEC,UAAU,GAAZ,EAA1C,EAA6D,EAAEC,OAAO,CAAT,EAA7D,EAA2EC,IAA3E,CAAiFC,OAAD,IAAa;AAClG,UAAIA,QAAQC,MAAR,IAAkB,CAAtB,EAAyB;AACvB;AACA,eAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAV,EAAZ,EAAP;AACD;AACD,YAAMC,eAAeJ,QAAQ,CAAR,CAArB;AACA,aAAO,EAAEE,UAAU,EAAEC,QAAQC,aAAaD,MAAvB,EAAZ,EAAP;AACD,KAPM,CAAP;AAQD;;AAEDE,qBAAmBZ,GAAnB,EAAwB;AACtB,QAAIA,IAAIa,IAAJ,CAASC,UAAb,EAAyB;AACvB,YAAM,IAAIC,eAAMC,KAAV,CAAgBD,eAAMC,KAAN,CAAYC,mBAA5B,EAAiD,0DAAjD,CAAN;AACD;AACD,UAAMP,SAASV,IAAIkB,IAAJ,CAASR,MAAxB;AACA;AACA,UAAMS,SAASC,OAAOC,IAAP,CAAYX,MAAZ,EAAoBY,MAApB,CAA2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtDD,UAAK,UAASC,GAAI,EAAlB,IAAuBd,OAAOc,GAAP,CAAvB;AACA,aAAOD,GAAP;AACD,KAHc,EAGZ,EAHY,CAAf;AAIA,WAAOvB,IAAIC,MAAJ,CAAWC,QAAX,CAAoBiB,MAApB,CAA2B,eAA3B,EAA4C,EAACf,UAAU,GAAX,EAA5C,EAA6De,MAA7D,EAAqE,EAACM,QAAQ,IAAT,EAArE,EAAqFnB,IAArF,CAA0F,OAAO,EAAEG,UAAU,EAAEiB,QAAQ,IAAV,EAAZ,EAAP,CAA1F,CAAP;AACD;;AAEDC,gBAAc;AACZ,SAAKC,KAAL,CAAW,KAAX,EAAkB,SAAlB,EAA6B5B,OAAO;AAAE,aAAO,KAAKD,eAAL,CAAqBC,GAArB,CAAP;AAAkC,KAAxE;AACA,SAAK4B,KAAL,CAAW,KAAX,EAAkB,SAAlB,EAA6BhC,WAAWiC,6BAAxC,EAAuE7B,OAAO;AAAE,aAAO,KAAKY,kBAAL,CAAwBZ,GAAxB,CAAP;AAAqC,KAArH;AACD;AA5BmD;;QAAzCH,kB,GAAAA,kB,EALb;;kBAoCeA,kB","file":"GlobalConfigRouter.js","sourcesContent":["// global_config.js\nimport Parse           from 'parse/node';\nimport PromiseRouter   from '../PromiseRouter';\nimport * as middleware from \"../middlewares\";\n\nexport class GlobalConfigRouter extends PromiseRouter {\n  getGlobalConfig(req) {\n    return req.config.database.find('_GlobalConfig', { objectId: \"1\" }, { limit: 1 }).then((results) => {\n      if (results.length != 1) {\n        // If there is no config in the database - return empty config.\n        return { response: { params: {} } };\n      }\n      const globalConfig = results[0];\n      return { response: { params: globalConfig.params } };\n    });\n  }\n\n  updateGlobalConfig(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'read-only masterKey isn\\'t allowed to update the config.');\n    }\n    const params = req.body.params;\n    // Transform in dot notation to make sure it works\n    const update = Object.keys(params).reduce((acc, key) => {\n      acc[`params.${key}`] = params[key];\n      return acc;\n    }, {});\n    return req.config.database.update('_GlobalConfig', {objectId: \"1\"}, update, {upsert: true}).then(() => ({ response: { result: true } }));\n  }\n\n  mountRoutes() {\n    this.route('GET', '/config', req => { return this.getGlobalConfig(req) });\n    this.route('PUT', '/config', middleware.promiseEnforceMasterKeyAccess, req => { return this.updateGlobalConfig(req) });\n  }\n}\n\nexport default GlobalConfigRouter;\n"]}