{"version":3,"sources":["../../src/Routers/PublicAPIRouter.js"],"names":["public_html","path","resolve","__dirname","views","PublicAPIRouter","PromiseRouter","verifyEmail","req","token","username","query","appId","params","config","Config","get","invalidRequest","publicServerURL","missingPublicServerURL","invalidLink","userController","then","qs","stringify","Promise","status","location","verifyEmailSuccessURL","invalidVerificationLink","resendVerificationEmail","body","linkSendSuccessURL","linkSendFailURL","changePassword","reject","id","text","fs","readFile","err","data","replace","requestResetPassword","checkResetTokenValidity","applicationId","app","appName","choosePasswordURL","resetPassword","new_password","updatePassword","passwordResetSuccessURL","error","invalidLinkURL","invalidVerificationLinkURL","Error","message","setConfig","mountRoutes","route","expressRouter","router","express","Router","use","static"],"mappings":"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","file":"PublicAPIRouter.js","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nimport Config from '../Config';\nimport express from 'express';\nimport path from 'path';\nimport fs from 'fs';\nimport qs from 'querystring';\n\nconst public_html = path.resolve(__dirname, \"../../public_html\");\nconst views = path.resolve(__dirname, '../../views');\n\nexport class PublicAPIRouter extends PromiseRouter {\n\n  verifyEmail(req) {\n    const { token, username } = req.query;\n    const appId = req.params.appId;\n    const config = Config.get(appId);\n\n    if(!config){\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    if (!token || !username) {\n      return this.invalidLink(req);\n    }\n\n    const userController = config.userController;\n    return userController.verifyEmail(username, token).then(() => {\n      const params = qs.stringify({username});\n      return Promise.resolve({\n        status: 302,\n        location: `${config.verifyEmailSuccessURL}?${params}`\n      });\n    }, ()=> {\n      return this.invalidVerificationLink(req);\n    })\n  }\n\n  resendVerificationEmail(req) {\n    const username = req.body.username;\n    const appId = req.params.appId;\n    const config = Config.get(appId);\n\n    if(!config){\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    if (!username) {\n      return this.invalidLink(req);\n    }\n\n    const userController = config.userController;\n\n    return userController.resendVerificationEmail(username).then(() => {\n      return Promise.resolve({\n        status: 302,\n        location: `${config.linkSendSuccessURL}`\n      });\n    }, ()=> {\n      return Promise.resolve({\n        status: 302,\n        location: `${config.linkSendFailURL}`\n      });\n    })\n  }\n\n  changePassword(req) {\n    return new Promise((resolve, reject) => {\n      const config = Config.get(req.query.id);\n\n      if(!config){\n        this.invalidRequest();\n      }\n\n      if (!config.publicServerURL) {\n        return resolve({\n          status: 404,\n          text: 'Not found.'\n        });\n      }\n      // Should we keep the file in memory or leave like that?\n      fs.readFile(path.resolve(views, \"choose_password\"), 'utf-8', (err, data) => {\n        if (err) {\n          return reject(err);\n        }\n        data = data.replace(\"PARSE_SERVER_URL\", `'${config.publicServerURL}'`);\n        resolve({\n          text: data\n        })\n      });\n    });\n  }\n\n  requestResetPassword(req) {\n\n    const config = req.config;\n\n    if(!config){\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    const { username, token } = req.query;\n\n    if (!username || !token) {\n      return this.invalidLink(req);\n    }\n\n    return config.userController.checkResetTokenValidity(username, token).then(() => {\n      const params = qs.stringify({token, id: config.applicationId, username, app: config.appName, });\n      return Promise.resolve({\n        status: 302,\n        location: `${config.choosePasswordURL}?${params}`\n      })\n    }, () => {\n      return this.invalidLink(req);\n    })\n  }\n\n  resetPassword(req) {\n\n    const config = req.config;\n\n    if(!config){\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    const {\n      username,\n      token,\n      new_password\n    } = req.body;\n\n    if (!username || !token || !new_password) {\n      return this.invalidLink(req);\n    }\n\n    return config.userController.updatePassword(username, token, new_password).then(() => {\n      const params = qs.stringify({username: username});\n      return Promise.resolve({\n        status: 302,\n        location: `${config.passwordResetSuccessURL}?${params}`\n      });\n    }, (err) => {\n      const params = qs.stringify({username: username, token: token, id: config.applicationId, error:err, app:config.appName});\n      return Promise.resolve({\n        status: 302,\n        location: `${config.choosePasswordURL}?${params}`\n      });\n    });\n\n  }\n\n  invalidLink(req) {\n    return Promise.resolve({\n      status: 302,\n      location: req.config.invalidLinkURL\n    });\n  }\n\n  invalidVerificationLink(req) {\n    const config = req.config;\n    if (req.query.username && req.params.appId) {\n      const params = qs.stringify({username: req.query.username, appId: req.params.appId});\n      return Promise.resolve({\n        status: 302,\n        location: `${config.invalidVerificationLinkURL}?${params}`\n      });\n    } else {\n      return this.invalidLink(req);\n    }\n  }\n\n  missingPublicServerURL() {\n    return Promise.resolve({\n      text:  'Not found.',\n      status: 404\n    });\n  }\n\n  invalidRequest() {\n    const error = new Error();\n    error.status = 403;\n    error.message = \"unauthorized\";\n    throw error;\n  }\n\n  setConfig(req) {\n    req.config = Config.get(req.params.appId);\n    return Promise.resolve();\n  }\n\n  mountRoutes() {\n    this.route('GET','/apps/:appId/verify_email',\n      req => { this.setConfig(req) },\n      req => { return this.verifyEmail(req); });\n\n    this.route('POST', '/apps/:appId/resend_verification_email',\n      req => { this.setConfig(req); },\n      req => { return this.resendVerificationEmail(req); });\n\n    this.route('GET','/apps/choose_password',\n      req => { return this.changePassword(req); });\n\n    this.route('POST','/apps/:appId/request_password_reset',\n      req => { this.setConfig(req) },\n      req => { return this.resetPassword(req); });\n\n    this.route('GET','/apps/:appId/request_password_reset',\n      req => { this.setConfig(req) },\n      req => { return this.requestResetPassword(req); });\n  }\n\n  expressRouter() {\n    const router = express.Router();\n    router.use(\"/apps\", express.static(public_html));\n    router.use(\"/\", super.expressRouter());\n    return router;\n  }\n}\n\nexport default PublicAPIRouter;\n"]}