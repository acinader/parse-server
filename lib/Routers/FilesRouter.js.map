{"version":3,"sources":["../../src/Routers/FilesRouter.js"],"names":["Middlewares","FilesRouter","expressRouter","maxUploadSize","router","express","Router","get","getHandler","post","req","res","next","Parse","Error","INVALID_FILE_NAME","allowCrossDomain","BodyParser","raw","type","limit","handleParseHeaders","createHandler","delete","enforceMasterKeyAccess","deleteHandler","config","Config","params","appId","filesController","filename","contentType","mime","getType","isFileStreamable","getFileStream","then","stream","handleFileStream","catch","status","set","end","getFileData","data","length","body","FILE_SAVE_ERROR","match","createFile","result","url","json","e","logger","error","message","deleteFile","FILE_DELETE_ERROR","adapter","getRange","parts","replace","split","start","parseInt","buffer_size","notEnded","notStarted","contentLength","writeHead","seek","gridFileStream","bufferAvail","remainingBytesToWrite","totalBytesWritten","on","buffer","slice","write","close","destroy"],"mappings":"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","file":"FilesRouter.js","sourcesContent":["import express             from 'express';\nimport BodyParser          from 'body-parser';\nimport * as Middlewares    from '../middlewares';\nimport Parse               from 'parse/node';\nimport Config              from '../Config';\nimport mime                from 'mime';\nimport logger              from '../logger';\n\nexport class FilesRouter {\n\n  expressRouter({ maxUploadSize = '20Mb' } = {}) {\n    var router = express.Router();\n    router.get('/files/:appId/:filename', this.getHandler);\n\n    router.post('/files', function(req, res, next) {\n      next(new Parse.Error(Parse.Error.INVALID_FILE_NAME,\n        'Filename not provided.'));\n    });\n\n    router.post('/files/:filename',\n      Middlewares.allowCrossDomain,\n      BodyParser.raw({type: () => { return true; }, limit: maxUploadSize }), // Allow uploads without Content-Type, or with any Content-Type.\n      Middlewares.handleParseHeaders,\n      this.createHandler\n    );\n\n    router.delete('/files/:filename',\n      Middlewares.allowCrossDomain,\n      Middlewares.handleParseHeaders,\n      Middlewares.enforceMasterKeyAccess,\n      this.deleteHandler\n    );\n    return router;\n  }\n\n  getHandler(req, res) {\n    const config = Config.get(req.params.appId);\n    const filesController = config.filesController;\n    const filename = req.params.filename;\n    const contentType = mime.getType(filename);\n    if (isFileStreamable(req, filesController)) {\n      filesController.getFileStream(config, filename).then((stream) => {\n        handleFileStream(stream, req, res, contentType);\n      }).catch(() => {\n        res.status(404);\n        res.set('Content-Type', 'text/plain');\n        res.end('File not found.');\n      });\n    } else {\n      filesController.getFileData(config, filename).then((data) => {\n        res.status(200);\n        res.set('Content-Type', contentType);\n        res.set('Content-Length', data.length);\n        res.end(data);\n      }).catch(() => {\n        res.status(404);\n        res.set('Content-Type', 'text/plain');\n        res.end('File not found.');\n      });\n    }\n  }\n\n  createHandler(req, res, next) {\n    if (!req.body || !req.body.length) {\n      next(new Parse.Error(Parse.Error.FILE_SAVE_ERROR,\n        'Invalid file upload.'));\n      return;\n    }\n\n    if (req.params.filename.length > 128) {\n      next(new Parse.Error(Parse.Error.INVALID_FILE_NAME,\n        'Filename too long.'));\n      return;\n    }\n\n    if (!req.params.filename.match(/^[_a-zA-Z0-9][a-zA-Z0-9@\\.\\ ~_-]*$/)) {\n      next(new Parse.Error(Parse.Error.INVALID_FILE_NAME,\n        'Filename contains invalid characters.'));\n      return;\n    }\n\n    const filename = req.params.filename;\n    const contentType = req.get('Content-type');\n    const config = req.config;\n    const filesController = config.filesController;\n\n    filesController.createFile(config, filename, req.body, contentType).then((result) => {\n      res.status(201);\n      res.set('Location', result.url);\n      res.json(result);\n    }).catch((e) => {\n      logger.error(e.message, e);\n      next(new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'Could not store file.'));\n    });\n  }\n\n  deleteHandler(req, res, next) {\n    const filesController = req.config.filesController;\n    filesController.deleteFile(req.config, req.params.filename).then(() => {\n      res.status(200);\n      // TODO: return useful JSON here?\n      res.end();\n    }).catch(() => {\n      next(new Parse.Error(Parse.Error.FILE_DELETE_ERROR,\n        'Could not delete file.'));\n    });\n  }\n}\n\nfunction isFileStreamable(req, filesController){\n  return  req.get('Range') && typeof filesController.adapter.getFileStream === 'function';\n}\n\nfunction getRange(req) {\n  const parts = req.get('Range').replace(/bytes=/, \"\").split(\"-\");\n  return { start: parseInt(parts[0], 10), end: parseInt(parts[1], 10) };\n}\n\n// handleFileStream is licenced under Creative Commons Attribution 4.0 International License (https://creativecommons.org/licenses/by/4.0/).\n// Author: LEROIB at weightingformypizza (https://weightingformypizza.wordpress.com/2015/06/24/stream-html5-media-content-like-video-audio-from-mongodb-using-express-and-gridstore/).\nfunction handleFileStream(stream, req, res, contentType) {\n  const buffer_size = 1024 * 1024; //1024Kb\n  // Range request, partiall stream the file\n  let {\n    start, end\n  } = getRange(req);\n\n  const notEnded = (!end && end !== 0);\n  const notStarted = (!start && start !== 0);\n  // No end provided, we want all bytes\n  if (notEnded) {\n    end = stream.length - 1;\n  }\n  // No start provided, we're reading backwards\n  if (notStarted) {\n    start = stream.length - end;\n    end = start + end - 1;\n  }\n\n  // Data exceeds the buffer_size, cap\n  if (end - start >= buffer_size) {\n    end = start + buffer_size - 1;\n  }\n\n  const contentLength = (end - start) + 1;\n\n  res.writeHead(206, {\n    'Content-Range': 'bytes ' + start + '-' + end + '/' + stream.length,\n    'Accept-Ranges': 'bytes',\n    'Content-Length': contentLength,\n    'Content-Type': contentType,\n  });\n\n  stream.seek(start, function () {\n    // get gridFile stream\n    const gridFileStream = stream.stream(true);\n    let bufferAvail = 0;\n    let remainingBytesToWrite = contentLength;\n    let totalBytesWritten = 0;\n    // write to response\n    gridFileStream.on('data', function (data) {\n      bufferAvail += data.length;\n      if (bufferAvail > 0) {\n        // slice returns the same buffer if overflowing\n        // safe to call in any case\n        const buffer = data.slice(0, remainingBytesToWrite);\n        // write the buffer\n        res.write(buffer);\n        // increment total\n        totalBytesWritten += buffer.length;\n        // decrement remaining\n        remainingBytesToWrite -= data.length;\n        // decrement the avaialbe buffer\n        bufferAvail -= buffer.length;\n      }\n      // in case of small slices, all values will be good at that point\n      // we've written enough, end...\n      if (totalBytesWritten >= contentLength) {\n        stream.close();\n        res.end();\n        this.destroy();\n      }\n    });\n  });\n}\n"]}